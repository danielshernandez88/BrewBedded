
BrewSaSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b64  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  0002084c  2**0
                  CONTENTS
  4 .ARM          00000000  08005da0  08005da0  0002084c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da0  08005da0  0002084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000084c  20000000  08005dac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f30  2000084c  080065f8  0002084c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000177c  080065f8  0002177c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8dd  00000000  00000000  00020875  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000455f  00000000  00000000  00040152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  000446b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00045b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c007  00000000  00000000  00046de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000063b8  00000000  00000000  00052de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007f  00000000  00000000  0005919f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005788  00000000  00000000  00059220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000084c 	.word	0x2000084c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c5c 	.word	0x08005c5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000850 	.word	0x20000850
 800014c:	08005c5c 	.word	0x08005c5c

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 fd39 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f004 fefe 	bl	8004f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f004 fd80 	bl	8004c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000184:	2300      	movs	r3, #0
 8000186:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000188:	2300      	movs	r3, #0
 800018a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d101      	bne.n	800019e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800019a:	2301      	movs	r3, #1
 800019c:	e0be      	b.n	800031c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	689b      	ldr	r3, [r3, #8]
 80001a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d109      	bne.n	80001c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2200      	movs	r2, #0
 80001b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f004 fd90 	bl	8004ce0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f000 fbb9 	bl	8000938 <ADC_ConversionStop_Disable>
 80001c6:	4603      	mov	r3, r0
 80001c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001ce:	f003 0310 	and.w	r3, r3, #16
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	f040 8099 	bne.w	800030a <HAL_ADC_Init+0x18e>
 80001d8:	7dfb      	ldrb	r3, [r7, #23]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	f040 8095 	bne.w	800030a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80001e8:	f023 0302 	bic.w	r3, r3, #2
 80001ec:	f043 0202 	orr.w	r2, r3, #2
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80001fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000204:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	4313      	orrs	r3, r2
 800020a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000214:	d003      	beq.n	800021e <HAL_ADC_Init+0xa2>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d102      	bne.n	8000224 <HAL_ADC_Init+0xa8>
 800021e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000222:	e000      	b.n	8000226 <HAL_ADC_Init+0xaa>
 8000224:	2300      	movs	r3, #0
 8000226:	693a      	ldr	r2, [r7, #16]
 8000228:	4313      	orrs	r3, r2
 800022a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d119      	bne.n	8000268 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d109      	bne.n	8000250 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	3b01      	subs	r3, #1
 8000242:	035a      	lsls	r2, r3, #13
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	4313      	orrs	r3, r2
 8000248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	e00b      	b.n	8000268 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000254:	f043 0220 	orr.w	r2, r3, #32
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000260:	f043 0201 	orr.w	r2, r3, #1
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	693a      	ldr	r2, [r7, #16]
 8000278:	430a      	orrs	r2, r1
 800027a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	4b28      	ldr	r3, [pc, #160]	; (8000324 <HAL_ADC_Init+0x1a8>)
 8000284:	4013      	ands	r3, r2
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	6812      	ldr	r2, [r2, #0]
 800028a:	68b9      	ldr	r1, [r7, #8]
 800028c:	430b      	orrs	r3, r1
 800028e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000298:	d003      	beq.n	80002a2 <HAL_ADC_Init+0x126>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d104      	bne.n	80002ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	051b      	lsls	r3, r3, #20
 80002aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	430a      	orrs	r2, r1
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	689a      	ldr	r2, [r3, #8]
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <HAL_ADC_Init+0x1ac>)
 80002c8:	4013      	ands	r3, r2
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d10b      	bne.n	80002e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002da:	f023 0303 	bic.w	r3, r3, #3
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80002e6:	e018      	b.n	800031a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	f023 0312 	bic.w	r3, r3, #18
 80002f0:	f043 0210 	orr.w	r2, r3, #16
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fc:	f043 0201 	orr.w	r2, r3, #1
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000304:	2301      	movs	r3, #1
 8000306:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000308:	e007      	b.n	800031a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030e:	f043 0210 	orr.w	r2, r3, #16
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000316:	2301      	movs	r3, #1
 8000318:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800031a:	7dfb      	ldrb	r3, [r7, #23]
}
 800031c:	4618      	mov	r0, r3
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	ffe1f7fd 	.word	0xffe1f7fd
 8000328:	ff1f0efe 	.word	0xff1f0efe

0800032c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000338:	2300      	movs	r3, #0
 800033a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a64      	ldr	r2, [pc, #400]	; (80004d4 <HAL_ADC_Start_DMA+0x1a8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d004      	beq.n	8000350 <HAL_ADC_Start_DMA+0x24>
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a63      	ldr	r2, [pc, #396]	; (80004d8 <HAL_ADC_Start_DMA+0x1ac>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <HAL_ADC_Start_DMA+0x32>
 8000350:	4b60      	ldr	r3, [pc, #384]	; (80004d4 <HAL_ADC_Start_DMA+0x1a8>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000358:	2b00      	cmp	r3, #0
 800035a:	f040 80b3 	bne.w	80004c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000364:	2b01      	cmp	r3, #1
 8000366:	d101      	bne.n	800036c <HAL_ADC_Start_DMA+0x40>
 8000368:	2302      	movs	r3, #2
 800036a:	e0ae      	b.n	80004ca <HAL_ADC_Start_DMA+0x19e>
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	2201      	movs	r2, #1
 8000370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f000 fa8d 	bl	8000894 <ADC_Enable>
 800037a:	4603      	mov	r3, r0
 800037c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800037e:	7dfb      	ldrb	r3, [r7, #23]
 8000380:	2b00      	cmp	r3, #0
 8000382:	f040 809a 	bne.w	80004ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800038e:	f023 0301 	bic.w	r3, r3, #1
 8000392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a4e      	ldr	r2, [pc, #312]	; (80004d8 <HAL_ADC_Start_DMA+0x1ac>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d105      	bne.n	80003b0 <HAL_ADC_Start_DMA+0x84>
 80003a4:	4b4b      	ldr	r3, [pc, #300]	; (80004d4 <HAL_ADC_Start_DMA+0x1a8>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d115      	bne.n	80003dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d026      	beq.n	8000418 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003da:	e01d      	b.n	8000418 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a39      	ldr	r2, [pc, #228]	; (80004d4 <HAL_ADC_Start_DMA+0x1a8>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d004      	beq.n	80003fc <HAL_ADC_Start_DMA+0xd0>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <HAL_ADC_Start_DMA+0x1ac>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10d      	bne.n	8000418 <HAL_ADC_Start_DMA+0xec>
 80003fc:	4b35      	ldr	r3, [pc, #212]	; (80004d4 <HAL_ADC_Start_DMA+0x1a8>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000404:	2b00      	cmp	r3, #0
 8000406:	d007      	beq.n	8000418 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800040c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d006      	beq.n	8000432 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000428:	f023 0206 	bic.w	r2, r3, #6
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000430:	e002      	b.n	8000438 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2200      	movs	r2, #0
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <HAL_ADC_Start_DMA+0x1b0>)
 8000446:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <HAL_ADC_Start_DMA+0x1b4>)
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4a23      	ldr	r2, [pc, #140]	; (80004e4 <HAL_ADC_Start_DMA+0x1b8>)
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f06f 0202 	mvn.w	r2, #2
 8000460:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000470:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6a18      	ldr	r0, [r3, #32]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	334c      	adds	r3, #76	; 0x4c
 800047c:	4619      	mov	r1, r3
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f000 fc39 	bl	8000cf8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000490:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000494:	d108      	bne.n	80004a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	689a      	ldr	r2, [r3, #8]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80004a6:	e00f      	b.n	80004c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80004b8:	e006      	b.n	80004c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	2200      	movs	r2, #0
 80004be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80004c2:	e001      	b.n	80004c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004c4:	2301      	movs	r3, #1
 80004c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80004c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40012400 	.word	0x40012400
 80004d8:	40012800 	.word	0x40012800
 80004dc:	080009ad 	.word	0x080009ad
 80004e0:	08000a29 	.word	0x08000a29
 80004e4:	08000a45 	.word	0x08000a45

080004e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f003 0320 	and.w	r3, r3, #32
 80004fa:	2b20      	cmp	r3, #32
 80004fc:	d140      	bne.n	8000580 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	2b02      	cmp	r3, #2
 800050a:	d139      	bne.n	8000580 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000510:	f003 0310 	and.w	r3, r3, #16
 8000514:	2b00      	cmp	r3, #0
 8000516:	d105      	bne.n	8000524 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800052e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000532:	d11d      	bne.n	8000570 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000538:	2b00      	cmp	r3, #0
 800053a:	d119      	bne.n	8000570 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f022 0220 	bic.w	r2, r2, #32
 800054a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d105      	bne.n	8000570 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000568:	f043 0201 	orr.w	r2, r3, #1
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f003 ffd3 	bl	800451c <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f06f 0212 	mvn.w	r2, #18
 800057e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	2b80      	cmp	r3, #128	; 0x80
 800058c:	d14f      	bne.n	800062e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	2b04      	cmp	r3, #4
 800059a:	d148      	bne.n	800062e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a0:	f003 0310 	and.w	r3, r3, #16
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80005be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80005c2:	d012      	beq.n	80005ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d125      	bne.n	800061e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80005dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005e0:	d11d      	bne.n	800061e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d119      	bne.n	800061e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80005f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060e:	2b00      	cmp	r3, #0
 8000610:	d105      	bne.n	800061e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000616:	f043 0201 	orr.w	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fa2a 	bl	8000a78 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f06f 020c 	mvn.w	r2, #12
 800062c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000638:	2b40      	cmp	r3, #64	; 0x40
 800063a:	d114      	bne.n	8000666 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10d      	bne.n	8000666 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f812 	bl	8000680 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f06f 0201 	mvn.w	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d101      	bne.n	80006c4 <HAL_ADC_ConfigChannel+0x20>
 80006c0:	2302      	movs	r3, #2
 80006c2:	e0dc      	b.n	800087e <HAL_ADC_ConfigChannel+0x1da>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2201      	movs	r2, #1
 80006c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d81c      	bhi.n	800070e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	3b05      	subs	r3, #5
 80006e6:	221f      	movs	r2, #31
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4019      	ands	r1, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	3b05      	subs	r3, #5
 8000700:	fa00 f203 	lsl.w	r2, r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
 800070c:	e03c      	b.n	8000788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b0c      	cmp	r3, #12
 8000714:	d81c      	bhi.n	8000750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	3b23      	subs	r3, #35	; 0x23
 8000728:	221f      	movs	r2, #31
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	4019      	ands	r1, r3
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3b23      	subs	r3, #35	; 0x23
 8000742:	fa00 f203 	lsl.w	r2, r0, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	430a      	orrs	r2, r1
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
 800074e:	e01b      	b.n	8000788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	3b41      	subs	r3, #65	; 0x41
 8000762:	221f      	movs	r2, #31
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	4019      	ands	r1, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	3b41      	subs	r3, #65	; 0x41
 800077c:	fa00 f203 	lsl.w	r2, r0, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	430a      	orrs	r2, r1
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b09      	cmp	r3, #9
 800078e:	d91c      	bls.n	80007ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68d9      	ldr	r1, [r3, #12]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4613      	mov	r3, r2
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4413      	add	r3, r2
 80007a0:	3b1e      	subs	r3, #30
 80007a2:	2207      	movs	r2, #7
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4019      	ands	r1, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	3b1e      	subs	r3, #30
 80007bc:	fa00 f203 	lsl.w	r2, r0, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	e019      	b.n	80007fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6919      	ldr	r1, [r3, #16]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	2207      	movs	r2, #7
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4019      	ands	r1, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	6898      	ldr	r0, [r3, #8]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	fa00 f203 	lsl.w	r2, r0, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b10      	cmp	r3, #16
 8000804:	d003      	beq.n	800080e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800080a:	2b11      	cmp	r3, #17
 800080c:	d132      	bne.n	8000874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_ADC_ConfigChannel+0x1e4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d125      	bne.n	8000864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d126      	bne.n	8000874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000834:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b10      	cmp	r3, #16
 800083c:	d11a      	bne.n	8000874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_ADC_ConfigChannel+0x1e8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <HAL_ADC_ConfigChannel+0x1ec>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	0c9a      	lsrs	r2, r3, #18
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000854:	e002      	b.n	800085c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3b01      	subs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f9      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x1b2>
 8000862:	e007      	b.n	8000874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000868:	f043 0220 	orr.w	r2, r3, #32
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40012400 	.word	0x40012400
 800088c:	20000004 	.word	0x20000004
 8000890:	431bde83 	.word	0x431bde83

08000894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d039      	beq.n	8000926 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f042 0201 	orr.w	r2, r2, #1
 80008c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <ADC_Enable+0x9c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <ADC_Enable+0xa0>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	0c9b      	lsrs	r3, r3, #18
 80008ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80008d0:	e002      	b.n	80008d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008de:	f002 f8bd 	bl	8002a5c <HAL_GetTick>
 80008e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80008e4:	e018      	b.n	8000918 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008e6:	f002 f8b9 	bl	8002a5c <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d911      	bls.n	8000918 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f8:	f043 0210 	orr.w	r2, r3, #16
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	f043 0201 	orr.w	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e007      	b.n	8000928 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b01      	cmp	r3, #1
 8000924:	d1df      	bne.n	80008e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000004 	.word	0x20000004
 8000934:	431bde83 	.word	0x431bde83

08000938 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b01      	cmp	r3, #1
 8000950:	d127      	bne.n	80009a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0201 	bic.w	r2, r2, #1
 8000960:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000962:	f002 f87b 	bl	8002a5c <HAL_GetTick>
 8000966:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000968:	e014      	b.n	8000994 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800096a:	f002 f877 	bl	8002a5c <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d90d      	bls.n	8000994 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	f043 0210 	orr.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e007      	b.n	80009a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d0e3      	beq.n	800096a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d127      	bne.n	8000a16 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009e0:	d115      	bne.n	8000a0e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d105      	bne.n	8000a0e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f043 0201 	orr.w	r2, r3, #1
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f003 fd84 	bl	800451c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000a14:	e004      	b.n	8000a20 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	4798      	blx	r3
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a34:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fe19 	bl	800066e <HAL_ADC_ConvHalfCpltCallback>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a62:	f043 0204 	orr.w	r2, r3, #4
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fe11 	bl	8000692 <HAL_ADC_ErrorCallback>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
	...

08000a8c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4906      	ldr	r1, [pc, #24]	; (8000b1c <NVIC_EnableIRQ+0x2c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da0b      	bge.n	8000b4c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <NVIC_SetPriority+0x4c>)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	3b04      	subs	r3, #4
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4a:	e009      	b.n	8000b60 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <NVIC_SetPriority+0x50>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff53 	bl	8000a8c <NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff68 	bl	8000ad4 <NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ffb2 	bl	8000b74 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff81 	bl	8000b20 <NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5b 	bl	8000af0 <NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e043      	b.n	8000ce2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_DMA_Init+0xa8>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_DMA_Init+0xac>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_DMA_Init+0xb0>)
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	bffdfff8 	.word	0xbffdfff8
 8000cf0:	cccccccd 	.word	0xcccccccd
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <HAL_DMA_Start_IT+0x20>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e04a      	b.n	8000dae <HAL_DMA_Start_IT+0xb6>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d13a      	bne.n	8000da0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f938 	bl	8000fc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 020e 	orr.w	r2, r2, #14
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e00f      	b.n	8000d8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0204 	bic.w	r2, r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f042 020a 	orr.w	r2, r2, #10
 8000d8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e005      	b.n	8000dac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000da8:	2302      	movs	r3, #2
 8000daa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d04f      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xc8>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d04a      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d107      	bne.n	8000e08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0204 	bic.w	r2, r2, #4
 8000e06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a66      	ldr	r2, [pc, #408]	; (8000fa8 <HAL_DMA_IRQHandler+0x1f0>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d029      	beq.n	8000e66 <HAL_DMA_IRQHandler+0xae>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a65      	ldr	r2, [pc, #404]	; (8000fac <HAL_DMA_IRQHandler+0x1f4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d022      	beq.n	8000e62 <HAL_DMA_IRQHandler+0xaa>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a63      	ldr	r2, [pc, #396]	; (8000fb0 <HAL_DMA_IRQHandler+0x1f8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01a      	beq.n	8000e5c <HAL_DMA_IRQHandler+0xa4>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a62      	ldr	r2, [pc, #392]	; (8000fb4 <HAL_DMA_IRQHandler+0x1fc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d012      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x9e>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a60      	ldr	r2, [pc, #384]	; (8000fb8 <HAL_DMA_IRQHandler+0x200>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00a      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x98>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <HAL_DMA_IRQHandler+0x204>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d102      	bne.n	8000e4a <HAL_DMA_IRQHandler+0x92>
 8000e44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e48:	e00e      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e4e:	e00b      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e54:	e008      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e5a:	e005      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	e002      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	e000      	b.n	8000e68 <HAL_DMA_IRQHandler+0xb0>
 8000e66:	2304      	movs	r3, #4
 8000e68:	4a55      	ldr	r2, [pc, #340]	; (8000fc0 <HAL_DMA_IRQHandler+0x208>)
 8000e6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 8094 	beq.w	8000f9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e7e:	e08e      	b.n	8000f9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2202      	movs	r2, #2
 8000e86:	409a      	lsls	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d056      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x186>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d051      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10b      	bne.n	8000ec0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 020a 	bic.w	r2, r2, #10
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <HAL_DMA_IRQHandler+0x1f0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d029      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x166>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a37      	ldr	r2, [pc, #220]	; (8000fac <HAL_DMA_IRQHandler+0x1f4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d022      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x162>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <HAL_DMA_IRQHandler+0x1f8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01a      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x15c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_DMA_IRQHandler+0x1fc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d012      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x156>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <HAL_DMA_IRQHandler+0x200>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00a      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x150>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <HAL_DMA_IRQHandler+0x204>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d102      	bne.n	8000f02 <HAL_DMA_IRQHandler+0x14a>
 8000efc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f00:	e00e      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f06:	e00b      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0c:	e008      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f12:	e005      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	e002      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	e000      	b.n	8000f20 <HAL_DMA_IRQHandler+0x168>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_DMA_IRQHandler+0x208>)
 8000f22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d034      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f3c:	e02f      	b.n	8000f9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2208      	movs	r2, #8
 8000f44:	409a      	lsls	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d028      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x1e8>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d023      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020e 	bic.w	r2, r2, #14
 8000f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    }
  }
  return;
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
}
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020008 	.word	0x40020008
 8000fac:	4002001c 	.word	0x4002001c
 8000fb0:	40020030 	.word	0x40020030
 8000fb4:	40020044 	.word	0x40020044
 8000fb8:	40020058 	.word	0x40020058
 8000fbc:	4002006c 	.word	0x4002006c
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	d108      	bne.n	8001004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001002:	e007      	b.n	8001014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
 8001042:	e127      	b.n	8001294 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001044:	2201      	movs	r2, #1
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8116 	bne.w	800128e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d034      	beq.n	80010d4 <HAL_GPIO_Init+0xb4>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d80d      	bhi.n	800108a <HAL_GPIO_Init+0x6a>
 800106e:	2b02      	cmp	r3, #2
 8001070:	d02b      	beq.n	80010ca <HAL_GPIO_Init+0xaa>
 8001072:	2b02      	cmp	r3, #2
 8001074:	d804      	bhi.n	8001080 <HAL_GPIO_Init+0x60>
 8001076:	2b00      	cmp	r3, #0
 8001078:	d031      	beq.n	80010de <HAL_GPIO_Init+0xbe>
 800107a:	2b01      	cmp	r3, #1
 800107c:	d01c      	beq.n	80010b8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107e:	e048      	b.n	8001112 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001080:	2b03      	cmp	r3, #3
 8001082:	d043      	beq.n	800110c <HAL_GPIO_Init+0xec>
 8001084:	2b11      	cmp	r3, #17
 8001086:	d01b      	beq.n	80010c0 <HAL_GPIO_Init+0xa0>
          break;
 8001088:	e043      	b.n	8001112 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800108a:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_GPIO_Init+0x288>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d026      	beq.n	80010de <HAL_GPIO_Init+0xbe>
 8001090:	4a85      	ldr	r2, [pc, #532]	; (80012a8 <HAL_GPIO_Init+0x288>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d806      	bhi.n	80010a4 <HAL_GPIO_Init+0x84>
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <HAL_GPIO_Init+0x28c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d020      	beq.n	80010de <HAL_GPIO_Init+0xbe>
 800109c:	4a84      	ldr	r2, [pc, #528]	; (80012b0 <HAL_GPIO_Init+0x290>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01d      	beq.n	80010de <HAL_GPIO_Init+0xbe>
          break;
 80010a2:	e036      	b.n	8001112 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80010a4:	4a83      	ldr	r2, [pc, #524]	; (80012b4 <HAL_GPIO_Init+0x294>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0xbe>
 80010aa:	4a83      	ldr	r2, [pc, #524]	; (80012b8 <HAL_GPIO_Init+0x298>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d016      	beq.n	80010de <HAL_GPIO_Init+0xbe>
 80010b0:	4a82      	ldr	r2, [pc, #520]	; (80012bc <HAL_GPIO_Init+0x29c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0xbe>
          break;
 80010b6:	e02c      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e028      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	3304      	adds	r3, #4
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e023      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	3308      	adds	r3, #8
 80010d0:	623b      	str	r3, [r7, #32]
          break;
 80010d2:	e01e      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	330c      	adds	r3, #12
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e019      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e6:	2304      	movs	r3, #4
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e012      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f4:	2308      	movs	r3, #8
 80010f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	611a      	str	r2, [r3, #16]
          break;
 80010fe:	e008      	b.n	8001112 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001100:	2308      	movs	r3, #8
 8001102:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	615a      	str	r2, [r3, #20]
          break;
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d801      	bhi.n	800111c <HAL_GPIO_Init+0xfc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	e001      	b.n	8001120 <HAL_GPIO_Init+0x100>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3304      	adds	r3, #4
 8001120:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2bff      	cmp	r3, #255	; 0xff
 8001126:	d802      	bhi.n	800112e <HAL_GPIO_Init+0x10e>
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x114>
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3b08      	subs	r3, #8
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	210f      	movs	r1, #15
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	6a39      	ldr	r1, [r7, #32]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 8096 	beq.w	800128e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800117a:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x2a4>)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4013      	ands	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a49      	ldr	r2, [pc, #292]	; (80012c8 <HAL_GPIO_Init+0x2a8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x1ae>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <HAL_GPIO_Init+0x2ac>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x1aa>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_GPIO_Init+0x2b0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x1a6>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <HAL_GPIO_Init+0x2b4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x1a2>
 80011be:	2303      	movs	r3, #3
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x1b0>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x1b0>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x1b0>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x1b0>
 80011ce:	2300      	movs	r3, #0
 80011d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80011e0:	4938      	ldr	r1, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x2a4>)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4936      	ldr	r1, [pc, #216]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	43db      	mvns	r3, r3
 8001210:	4931      	ldr	r1, [pc, #196]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001212:	4013      	ands	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	492c      	ldr	r1, [pc, #176]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	43db      	mvns	r3, r3
 8001238:	4927      	ldr	r1, [pc, #156]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800123a:	4013      	ands	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	4922      	ldr	r1, [pc, #136]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	491d      	ldr	r1, [pc, #116]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001262:	4013      	ands	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	4918      	ldr	r1, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	60cb      	str	r3, [r1, #12]
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	43db      	mvns	r3, r3
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 800128a:	4013      	ands	r3, r2
 800128c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3301      	adds	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f aed4 	bls.w	8001044 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	10120000 	.word	0x10120000
 80012b4:	10310000 	.word	0x10310000
 80012b8:	10320000 	.word	0x10320000
 80012bc:	10220000 	.word	0x10220000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]
 8001316:	4613      	mov	r3, r2
 8001318:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131a:	787b      	ldrb	r3, [r7, #1]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001326:	e003      	b.n	8001330 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0e7      	b.n	8001526 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f003 fd28 	bl	8004dc0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001388:	f000 fcb8 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 800138c:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a67      	ldr	r2, [pc, #412]	; (8001530 <HAL_I2C_Init+0x1f4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d807      	bhi.n	80013a8 <HAL_I2C_Init+0x6c>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4a66      	ldr	r2, [pc, #408]	; (8001534 <HAL_I2C_Init+0x1f8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	bf94      	ite	ls
 80013a0:	2301      	movls	r3, #1
 80013a2:	2300      	movhi	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	e006      	b.n	80013b6 <HAL_I2C_Init+0x7a>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4a63      	ldr	r2, [pc, #396]	; (8001538 <HAL_I2C_Init+0x1fc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	bf94      	ite	ls
 80013b0:	2301      	movls	r3, #1
 80013b2:	2300      	movhi	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0b3      	b.n	8001526 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_I2C_Init+0x200>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_I2C_Init+0x1f4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d802      	bhi.n	80013e2 <HAL_I2C_Init+0xa6>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	e009      	b.n	80013f6 <HAL_I2C_Init+0xba>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_I2C_Init+0x204>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	3301      	adds	r3, #1
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <HAL_I2C_Init+0x1f4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d80d      	bhi.n	8001422 <HAL_I2C_Init+0xe6>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1e5a      	subs	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	3301      	adds	r3, #1
 8001416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf38      	it	cc
 800141e:	2304      	movcc	r3, #4
 8001420:	e04f      	b.n	80014c2 <HAL_I2C_Init+0x186>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d111      	bne.n	800144e <HAL_I2C_Init+0x112>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1e59      	subs	r1, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	fbb1 f3f3 	udiv	r3, r1, r3
 800143c:	3301      	adds	r3, #1
 800143e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	e012      	b.n	8001474 <HAL_I2C_Init+0x138>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1e59      	subs	r1, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009a      	lsls	r2, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_Init+0x140>
 8001478:	2301      	movs	r3, #1
 800147a:	e022      	b.n	80014c2 <HAL_I2C_Init+0x186>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10e      	bne.n	80014a2 <HAL_I2C_Init+0x166>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1e59      	subs	r1, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	fbb1 f3f3 	udiv	r3, r1, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a0:	e00f      	b.n	80014c2 <HAL_I2C_Init+0x186>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1e59      	subs	r1, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	009a      	lsls	r2, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69d9      	ldr	r1, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6919      	ldr	r1, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6959      	ldr	r1, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2220      	movs	r2, #32
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	000186a0 	.word	0x000186a0
 8001534:	001e847f 	.word	0x001e847f
 8001538:	003d08ff 	.word	0x003d08ff
 800153c:	431bde83 	.word	0x431bde83
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8087 	beq.w	800166c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800155e:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b04      	cmp	r3, #4
 8001568:	d00c      	beq.n	8001584 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156a:	4b8f      	ldr	r3, [pc, #572]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x58>
 8001576:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d06c      	beq.n	800166a <HAL_RCC_OscConfig+0x126>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d168      	bne.n	800166a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e22d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x70>
 80015a6:	4b80      	ldr	r3, [pc, #512]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7f      	ldr	r2, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e02e      	b.n	8001612 <HAL_RCC_OscConfig+0xce>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x92>
 80015bc:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a76      	ldr	r2, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0xce>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0xb6>
 80015e0:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6d      	ldr	r2, [pc, #436]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0xce>
 80015fa:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6a      	ldr	r2, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f001 fa1f 	bl	8002a5c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001622:	f001 fa1b 	bl	8002a5c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1e1      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0xde>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f001 fa0b 	bl	8002a5c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164a:	f001 fa07 	bl	8002a5c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1cd      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165c:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x106>
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d063      	beq.n	8001740 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001678:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001684:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d11c      	bne.n	80016ca <HAL_RCC_OscConfig+0x186>
 8001690:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d116      	bne.n	80016ca <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x170>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e1a1      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4939      	ldr	r1, [pc, #228]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c8:	e03a      	b.n	8001740 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d020      	beq.n	8001714 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x268>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f001 f9c0 	bl	8002a5c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e0:	f001 f9bc 	bl	8002a5c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e182      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4926      	ldr	r1, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
 8001712:	e015      	b.n	8001740 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_OscConfig+0x268>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f001 f99f 	bl	8002a5c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001722:	f001 f99b 	bl	8002a5c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e161      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d039      	beq.n	80017c0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f001 f97f 	bl	8002a5c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f001 f97b 	bl	8002a5c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e141      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_RCC_OscConfig+0x264>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f000 fb13 	bl	8001dac <RCC_Delay>
 8001786:	e01b      	b.n	80017c0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f001 f965 	bl	8002a5c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e00e      	b.n	80017b4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f001 f961 	bl	8002a5c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d907      	bls.n	80017b4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e127      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42420000 	.word	0x42420000
 80017b0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ea      	bne.n	8001796 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a6 	beq.w	800191a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a87      	ldr	r2, [pc, #540]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b82      	ldr	r3, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x4c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x4c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x4c0>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f001 f923 	bl	8002a5c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f001 f91f 	bl	8002a5c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e0e5      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x4c0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x30a>
 8001840:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x366>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x32c>
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x366>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x34e>
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a5d      	ldr	r2, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x366>
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a5a      	ldr	r2, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f001 f8d3 	bl	8002a5c <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f001 f8cf 	bl	8002a5c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e093      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x376>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f001 f8bd 	bl	8002a5c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f001 f8b9 	bl	8002a5c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e07d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d069      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d061      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d146      	bne.n	80019c4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f001 f88e 	bl	8002a5c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f001 f88a 	bl	8002a5c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e050      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d108      	bne.n	800197e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4921      	ldr	r1, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a19      	ldr	r1, [r3, #32]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	430b      	orrs	r3, r1
 8001990:	491b      	ldr	r1, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f001 f85e 	bl	8002a5c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f001 f85a 	bl	8002a5c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e020      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x460>
 80019c2:	e018      	b.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f001 f847 	bl	8002a5c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f001 f843 	bl	8002a5c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e009      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x48e>
 80019f0:	e001      	b.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d910      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 0207 	bic.w	r2, r3, #7
 8001a30:	4978      	ldr	r1, [pc, #480]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a38:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0e0      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a62:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a6c      	ldr	r2, [pc, #432]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a68:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a80:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a84:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a86:	4b64      	ldr	r3, [pc, #400]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4961      	ldr	r1, [pc, #388]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d06a      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0a7      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e09b      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e093      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 0203 	bic.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4949      	ldr	r1, [pc, #292]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af6:	f000 ffb1 	bl	8002a5c <HAL_GetTick>
 8001afa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d112      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f000 ffa9 	bl	8002a5c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e077      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1ee      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xfa>
 8001b28:	e027      	b.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d11d      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f000 ff92 	bl	8002a5c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e060      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x128>
 8001b56:	e010      	b.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f000 ff80 	bl	8002a5c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04e      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d210      	bcs.n	8001baa <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 0207 	bic.w	r2, r3, #7
 8001b90:	4920      	ldr	r1, [pc, #128]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e030      	b.n	8001c0c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4915      	ldr	r1, [pc, #84]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be8:	f000 f81c 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001bec:	4601      	mov	r1, r0
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_RCC_ClockConfig+0x210>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	fa21 f303 	lsr.w	r3, r1, r3
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_ClockConfig+0x214>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f003 f9af 	bl	8004f68 <HAL_InitTick>
  
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08005d5c 	.word	0x08005d5c
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08005c74 	.word	0x08005c74
 8001cd8:	08005c84 	.word	0x08005c84
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff2 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08005d6c 	.word	0x08005d6c

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08005d6c 	.word	0x08005d6c

08001d4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	220f      	movs	r2, #15
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_RCC_GetClockConfig+0x58>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40022000 	.word	0x40022000

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001dc8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000004 	.word	0x20000004
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f000 fe08 	bl	8002a5c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f000 fe04 	bl	8002a5c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e06d      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d027      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d014      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f000 fdd3 	bl	8002a5c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f000 fdcf 	bl	8002a5c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e036      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4917      	ldr	r1, [pc, #92]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42420440 	.word	0x42420440

08001f54 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e01d      	b.n	8001fa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f815 	bl	8001faa <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 fa4a 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e01d      	b.n	800203e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f002 ff22 	bl	8004e60 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 f9fc 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d122      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d11b      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0202 	mvn.w	r2, #2
 8002072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f9b4 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 800208e:	e005      	b.n	800209c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f9a7 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9b6 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d122      	bne.n	80020f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d11b      	bne.n	80020f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0204 	mvn.w	r2, #4
 80020c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f98a 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 80020e2:	e005      	b.n	80020f0 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f97d 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f98c 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d122      	bne.n	800214a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11b      	bne.n	800214a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0208 	mvn.w	r2, #8
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f960 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002136:	e005      	b.n	8002144 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f953 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f962 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d122      	bne.n	800219e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d11b      	bne.n	800219e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0210 	mvn.w	r2, #16
 800216e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2208      	movs	r2, #8
 8002174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f936 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 800218a:	e005      	b.n	8002198 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f929 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f938 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10e      	bne.n	80021ca <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0201 	mvn.w	r2, #1
 80021c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f002 fd3b 	bl	8004c40 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d10e      	bne.n	80021f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d107      	bne.n	80021f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fb6e 	bl	80028d2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d10e      	bne.n	8002222 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d107      	bne.n	8002222 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8fc 	bl	800241a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b20      	cmp	r3, #32
 800222e:	d10e      	bne.n	800224e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	d107      	bne.n	800224e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f06f 0220 	mvn.w	r2, #32
 8002246:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fb39 	bl	80028c0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800226e:	2302      	movs	r3, #2
 8002270:	e0b4      	b.n	80023dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	f200 809f 	bhi.w	80023c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022c5 	.word	0x080022c5
 8002294:	080023c9 	.word	0x080023c9
 8002298:	080023c9 	.word	0x080023c9
 800229c:	080023c9 	.word	0x080023c9
 80022a0:	08002305 	.word	0x08002305
 80022a4:	080023c9 	.word	0x080023c9
 80022a8:	080023c9 	.word	0x080023c9
 80022ac:	080023c9 	.word	0x080023c9
 80022b0:	08002347 	.word	0x08002347
 80022b4:	080023c9 	.word	0x080023c9
 80022b8:	080023c9 	.word	0x080023c9
 80022bc:	080023c9 	.word	0x080023c9
 80022c0:	08002387 	.word	0x08002387
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f914 	bl	80024f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6999      	ldr	r1, [r3, #24]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
    }
    break;
 8002302:	e062      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f960 	bl	80025d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6999      	ldr	r1, [r3, #24]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	619a      	str	r2, [r3, #24]
    }
    break;
 8002344:	e041      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f9af 	bl	80026b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0208 	orr.w	r2, r2, #8
 8002360:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69d9      	ldr	r1, [r3, #28]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	61da      	str	r2, [r3, #28]
    }
    break;
 8002384:	e021      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f9ff 	bl	8002790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a0:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69d9      	ldr	r1, [r3, #28]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	61da      	str	r2, [r3, #28]
    }
    break;
 80023c6:	e000      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80023c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_Base_SetConfig+0x34>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d007      	beq.n	8002460 <TIM_Base_SetConfig+0x34>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <TIM_Base_SetConfig+0xc4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0x34>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <TIM_Base_SetConfig+0xc8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d108      	bne.n	8002472 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0x66>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0x66>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <TIM_Base_SetConfig+0xc4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0x66>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <TIM_Base_SetConfig+0xc8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d103      	bne.n	80024dc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	615a      	str	r2, [r3, #20]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800

080024f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0201 	bic.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <TIM_OC1_SetConfig+0xd4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10c      	bne.n	800257a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0308 	bic.w	r3, r3, #8
 8002566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <TIM_OC1_SetConfig+0xd4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f023 0210 	bic.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0320 	bic.w	r3, r3, #32
 8002626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <TIM_OC2_SetConfig+0xdc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d10d      	bne.n	8002658 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002656:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <TIM_OC2_SetConfig+0xdc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d113      	bne.n	8002688 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40012c00 	.word	0x40012c00

080026b0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <TIM_OC3_SetConfig+0xdc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10d      	bne.n	8002736 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002734:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <TIM_OC3_SetConfig+0xdc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d113      	bne.n	8002766 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40012c00 	.word	0x40012c00

08002790 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	031b      	lsls	r3, r3, #12
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <TIM_OC4_SetConfig+0xa4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d109      	bne.n	8002810 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e032      	b.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800286e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002890:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <TM_DELAY_Init+0x58>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <TM_DELAY_Init+0x58>)
 80028f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f4:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <TM_DELAY_Init+0x58>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <TM_DELAY_Init+0x58>)
 80028fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002900:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <TM_DELAY_Init+0x5c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <TM_DELAY_Init+0x5c>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <TM_DELAY_Init+0x5c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <TM_DELAY_Init+0x5c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <TM_DELAY_Init+0x5c>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <TM_DELAY_Init+0x5c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8002926:	bf00      	nop
	__ASM volatile ("NOP");
 8002928:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <TM_DELAY_Init+0x5c>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000edf0 	.word	0xe000edf0
 8002940:	e0001000 	.word	0xe0001000

08002944 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_IncTick+0x100>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <HAL_IncTick+0x100>)
 800295e:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8002960:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_IncTick+0x104>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_IncTick+0x22>
		TM_Time2--;
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_IncTick+0x104>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <HAL_IncTick+0x104>)
 8002970:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002972:	2300      	movs	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	e05f      	b.n	8002a38 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	4a37      	ldr	r2, [pc, #220]	; (8002a58 <HAL_IncTick+0x108>)
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	685b      	ldr	r3, [r3, #4]
		if (
 8002982:	2b00      	cmp	r3, #0
 8002984:	d055      	beq.n	8002a32 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <HAL_IncTick+0x108>)
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d04a      	beq.n	8002a32 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <HAL_IncTick+0x108>)
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	4a2a      	ldr	r2, [pc, #168]	; (8002a58 <HAL_IncTick+0x108>)
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	3a01      	subs	r2, #1
 80029ba:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_IncTick+0x108>)
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d132      	bne.n	8002a32 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <HAL_IncTick+0x108>)
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	491f      	ldr	r1, [pc, #124]	; (8002a58 <HAL_IncTick+0x108>)
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	6858      	ldr	r0, [r3, #4]
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	491c      	ldr	r1, [pc, #112]	; (8002a58 <HAL_IncTick+0x108>)
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_IncTick+0x108>)
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_IncTick+0x108>)
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	6852      	ldr	r2, [r2, #4]
 8002a08:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_IncTick+0x108>)
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d108      	bne.n	8002a32 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_IncTick+0x108>)
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	7813      	ldrb	r3, [r2, #0]
 8002a2c:	f36f 0341 	bfc	r3, #1, #1
 8002a30:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	3301      	adds	r3, #1
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_IncTick+0x108>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d39a      	bcc.n	8002978 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8002a42:	f7ff ff7f 	bl	8002944 <TM_DELAY_1msHandler>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000086c 	.word	0x2000086c
 8002a54:	20000868 	.word	0x20000868
 8002a58:	20000870 	.word	0x20000870

08002a5c <HAL_GetTick>:
			}
		}
	}
}

uint32_t HAL_GetTick(void) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_GetTick+0x10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	2000086c 	.word	0x2000086c

08002a70 <TM_DS18B20_StartAll>:
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
	
	return 1;
}

void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	TM_OneWire_Reset(OneWire);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f9e1 	bl	8002e40 <TM_OneWire_Reset>
	/* Skip rom */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002a7e:	21cc      	movs	r1, #204	; 0xcc
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa67 	bl	8002f54 <TM_OneWire_WriteByte>
	/* Start conversion on all connected devices */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002a86:	2144      	movs	r1, #68	; 0x44
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa63 	bl	8002f54 <TM_OneWire_WriteByte>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <TM_DS18B20_Read>:

uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, uint16_t *destination) {
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b08b      	sub	sp, #44	; 0x2c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint16_t decimal;
	uint8_t i = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!TM_DS18B20_Is(ROM)) {
 8002ab0:	68b8      	ldr	r0, [r7, #8]
 8002ab2:	f000 f941 	bl	8002d38 <TM_DS18B20_Is>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <TM_DS18B20_Read+0x28>
		return 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e0af      	b.n	8002c20 <TM_DS18B20_Read+0x188>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa1b 	bl	8002efc <TM_OneWire_ReadBit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <TM_DS18B20_Read+0x38>
		/* Conversion is not finished yet */
		return 0; 
 8002acc:	2300      	movs	r3, #0
 8002ace:	e0a7      	b.n	8002c20 <TM_DS18B20_Read+0x188>
	}

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f9b5 	bl	8002e40 <TM_OneWire_Reset>
	/* Select ROM number */
	//TM_OneWire_SelectWithPointer(OneWire, ROM);
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002ad6:	21cc      	movs	r1, #204	; 0xcc
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa3b 	bl	8002f54 <TM_OneWire_WriteByte>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ade:	21be      	movs	r1, #190	; 0xbe
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fa37 	bl	8002f54 <TM_OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002aec:	e010      	b.n	8002b10 <TM_DS18B20_Read+0x78>
		/* Read byte by byte */
		data[i] = TM_OneWire_ReadByte(OneWire);
 8002aee:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa4b 	bl	8002f8e <TM_OneWire_ReadByte>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b00:	4423      	add	r3, r4
 8002b02:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 8002b06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002b10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d9ea      	bls.n	8002aee <TM_DS18B20_Read+0x56>
	}

	/* Calculate CRC */
	crc = TM_OneWire_CRC8(data, 8);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2108      	movs	r1, #8
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fb77 	bl	8003212 <TM_OneWire_CRC8>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f887 3020 	strb.w	r3, [r7, #32]
		/* CRC invalid */
		//return 0;
	//}
	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002b2a:	7d3b      	ldrb	r3, [r7, #20]
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	7d7b      	ldrb	r3, [r7, #21]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f980 	bl	8002e40 <TM_OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 8002b40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da05      	bge.n	8002b54 <TM_DS18B20_Read+0xbc>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002b48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002b54:	7e3b      	ldrb	r3, [r7, #24]
 8002b56:	115b      	asrs	r3, r3, #5
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3309      	adds	r3, #9
 8002b62:	77fb      	strb	r3, [r7, #31]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002b64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7c:	b25a      	sxtb	r2, r3
 8002b7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) {
 8002b88:	7ffb      	ldrb	r3, [r7, #31]
 8002b8a:	3b09      	subs	r3, #9
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d831      	bhi.n	8002bf4 <TM_DS18B20_Read+0x15c>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <TM_DS18B20_Read+0x100>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bbd 	.word	0x08002bbd
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002be5 	.word	0x08002be5
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 8002ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	847b      	strh	r3, [r7, #34]	; 0x22
			decimal /= DS18B20_DECIMAL_STEPS_9BIT;
 8002bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	847b      	strh	r3, [r7, #34]	; 0x22
		} break;
 8002bba:	e020      	b.n	8002bfe <TM_DS18B20_Read+0x166>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 8002bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	847b      	strh	r3, [r7, #34]	; 0x22
			decimal /= DS18B20_DECIMAL_STEPS_10BIT;
 8002bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	847b      	strh	r3, [r7, #34]	; 0x22
		} break;
 8002bce:	e016      	b.n	8002bfe <TM_DS18B20_Read+0x166>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 8002bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	847b      	strh	r3, [r7, #34]	; 0x22
			decimal /= DS18B20_DECIMAL_STEPS_11BIT;
 8002bdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	847b      	strh	r3, [r7, #34]	; 0x22
		} break;
 8002be2:	e00c      	b.n	8002bfe <TM_DS18B20_Read+0x166>
		case 12: {
			decimal = temperature & 0x0F;
 8002be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	847b      	strh	r3, [r7, #34]	; 0x22
			decimal /= DS18B20_DECIMAL_STEPS_12BIT;
 8002bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	847b      	strh	r3, [r7, #34]	; 0x22
		} break;
 8002bf2:	e004      	b.n	8002bfe <TM_DS18B20_Read+0x166>
		default: {
			decimal = 0xFF;
 8002bf4:	23ff      	movs	r3, #255	; 0xff
 8002bf6:	847b      	strh	r3, [r7, #34]	; 0x22
			digit = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8002bfe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c06:	4413      	add	r3, r2
 8002c08:	847b      	strh	r3, [r7, #34]	; 0x22
	if (minus) {
 8002c0a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <TM_DS18B20_Read+0x180>
		decimal = 0 - decimal;
 8002c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c14:	425b      	negs	r3, r3
 8002c16:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	
	/* Set to pointer */
	*destination = decimal;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002c1c:	801a      	strh	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return 1;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	372c      	adds	r7, #44	; 0x2c
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}

08002c28 <TM_DS18B20_SetResolution>:
	
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!TM_DS18B20_Is(ROM)) {
 8002c36:	68b8      	ldr	r0, [r7, #8]
 8002c38:	f000 f87e 	bl	8002d38 <TM_DS18B20_Is>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <TM_DS18B20_SetResolution+0x1e>
		return 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e074      	b.n	8002d30 <TM_DS18B20_SetResolution+0x108>
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f8fa 	bl	8002e40 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 faa6 	bl	80031a0 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c54:	21be      	movs	r1, #190	; 0xbe
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f97c 	bl	8002f54 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f996 	bl	8002f8e <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f993 	bl	8002f8e <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f990 	bl	8002f8e <TM_OneWire_ReadByte>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75bb      	strb	r3, [r7, #22]
	tl = TM_OneWire_ReadByte(OneWire);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f98b 	bl	8002f8e <TM_OneWire_ReadByte>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	757b      	strb	r3, [r7, #21]
	conf = TM_OneWire_ReadByte(OneWire);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f986 	bl	8002f8e <TM_OneWire_ReadByte>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d108      	bne.n	8002c9e <TM_DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c92:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	f023 0320 	bic.w	r3, r3, #32
 8002c9a:	75fb      	strb	r3, [r7, #23]
 8002c9c:	e022      	b.n	8002ce4 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b0a      	cmp	r3, #10
 8002ca2:	d108      	bne.n	8002cb6 <TM_DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002caa:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	f043 0320 	orr.w	r3, r3, #32
 8002cb2:	75fb      	strb	r3, [r7, #23]
 8002cb4:	e016      	b.n	8002ce4 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b0b      	cmp	r3, #11
 8002cba:	d108      	bne.n	8002cce <TM_DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	f023 0320 	bic.w	r3, r3, #32
 8002cca:	75fb      	strb	r3, [r7, #23]
 8002ccc:	e00a      	b.n	8002ce4 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d107      	bne.n	8002ce4 <TM_DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cda:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f8ab 	bl	8002e40 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fa57 	bl	80031a0 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002cf2:	214e      	movs	r1, #78	; 0x4e
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f92d 	bl	8002f54 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002cfa:	7dbb      	ldrb	r3, [r7, #22]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f928 	bl	8002f54 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002d04:	7d7b      	ldrb	r3, [r7, #21]
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f923 	bl	8002f54 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	4619      	mov	r1, r3
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f91e 	bl	8002f54 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f891 	bl	8002e40 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fa3d 	bl	80031a0 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002d26:	2148      	movs	r1, #72	; 0x48
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f913 	bl	8002f54 <TM_OneWire_WriteByte>
	
	return 1;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <TM_DS18B20_Is>:

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b28      	cmp	r3, #40	; 0x28
 8002d46:	d101      	bne.n	8002d4c <TM_DS18B20_Is+0x14>
		return 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <TM_DS18B20_Is+0x16>
	}
	return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <TM_DS18B20_AllDone>:
uint8_t TM_DS18B20_AlarmSearch(TM_OneWire_t* OneWire) {
	/* Start alarm search */
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8cb 	bl	8002efc <TM_OneWire_ReadBit>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <Delay+0x3c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002d7e:	f7fe ffb3 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <Delay+0x40>)
 8002d86:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8a:	0c9b      	lsrs	r3, r3, #18
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002d94:	bf00      	nop
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <Delay+0x3c>)
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad2      	subs	r2, r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3f8      	bcc.n	8002d96 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	e0001000 	.word	0xe0001000
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <gpio_ds18b20_outputMode>:
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_onewire.h"

void gpio_ds18b20_outputMode(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DS18B20_OutputStruct;

	GPIO_DS18B20_OutputStruct.Pin = ds18b20_data_Pin;
 8002dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dbe:	603b      	str	r3, [r7, #0]
	GPIO_DS18B20_OutputStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
	GPIO_DS18B20_OutputStruct.Pull = GPIO_PULLUP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
	GPIO_DS18B20_OutputStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_DS18B20_OutputStruct);
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <gpio_ds18b20_outputMode+0x2c>)
 8002dd2:	f7fe f925 	bl	8001020 <HAL_GPIO_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40010800 	.word	0x40010800

08002de4 <gpio_ds18b20_inputMode>:


void gpio_ds18b20_inputMode(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DS18B20_InputStruct;

	GPIO_DS18B20_InputStruct.Pin = ds18b20_data_Pin;
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	603b      	str	r3, [r7, #0]
	GPIO_DS18B20_InputStruct.Mode = GPIO_MODE_INPUT;
 8002df0:	2300      	movs	r3, #0
 8002df2:	607b      	str	r3, [r7, #4]
	GPIO_DS18B20_InputStruct.Pull = GPIO_PULLUP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
	GPIO_DS18B20_InputStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_DS18B20_InputStruct);
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <gpio_ds18b20_inputMode+0x2c>)
 8002e02:	f7fe f90d 	bl	8001020 <HAL_GPIO_Init>
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40010800 	.word	0x40010800

08002e14 <TM_OneWire_Init>:

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8002e22:	f7ff fd5f 	bl	80028e4 <TM_DELAY_Init>

	/* Init GPIO pin */
	//TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
	gpio_ds18b20_outputMode();
 8002e26:	f7ff ffc5 	bl	8002db4 <gpio_ds18b20_outputMode>

	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	809a      	strh	r2, [r3, #4]
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW();
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4e:	480f      	ldr	r0, [pc, #60]	; (8002e8c <TM_OneWire_Reset+0x4c>)
 8002e50:	f7fe fa5b 	bl	800130a <HAL_GPIO_WritePin>
	ONEWIRE_OUTPUT();
 8002e54:	f7ff ffae 	bl	8002db4 <gpio_ds18b20_outputMode>
	ONEWIRE_DELAY(480);
 8002e58:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002e5c:	f7ff ff88 	bl	8002d70 <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT();
 8002e60:	f7ff ffc0 	bl	8002de4 <gpio_ds18b20_inputMode>
	ONEWIRE_DELAY(70);
 8002e64:	2046      	movs	r0, #70	; 0x46
 8002e66:	f7ff ff83 	bl	8002d70 <Delay>
	
	/* Check bit value */
	i = HAL_GPIO_ReadPin(ds18b20_data_GPIO_Port,ds18b20_data_Pin);
 8002e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6e:	4807      	ldr	r0, [pc, #28]	; (8002e8c <TM_OneWire_Reset+0x4c>)
 8002e70:	f7fe fa34 	bl	80012dc <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8002e78:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002e7c:	f7ff ff78 	bl	8002d70 <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010800 	.word	0x40010800

08002e90 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9c:	b672      	cpsid	i
	__disable_irq();
	if (bit) {
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d012      	beq.n	8002eca <TM_OneWire_WriteBit+0x3a>
		/* Set line low */
		ONEWIRE_LOW();
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eaa:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <TM_OneWire_WriteBit+0x68>)
 8002eac:	f7fe fa2d 	bl	800130a <HAL_GPIO_WritePin>
		ONEWIRE_OUTPUT();
 8002eb0:	f7ff ff80 	bl	8002db4 <gpio_ds18b20_outputMode>
		ONEWIRE_DELAY(10);
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7ff ff5b 	bl	8002d70 <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT();
 8002eba:	f7ff ff93 	bl	8002de4 <gpio_ds18b20_inputMode>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8002ebe:	2037      	movs	r0, #55	; 0x37
 8002ec0:	f7ff ff56 	bl	8002d70 <Delay>
		ONEWIRE_INPUT();
 8002ec4:	f7ff ff8e 	bl	8002de4 <gpio_ds18b20_inputMode>
 8002ec8:	e011      	b.n	8002eee <TM_OneWire_WriteBit+0x5e>
	} else {
		/* Set line low */
		ONEWIRE_LOW();
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <TM_OneWire_WriteBit+0x68>)
 8002ed2:	f7fe fa1a 	bl	800130a <HAL_GPIO_WritePin>
		ONEWIRE_OUTPUT();
 8002ed6:	f7ff ff6d 	bl	8002db4 <gpio_ds18b20_outputMode>
		ONEWIRE_DELAY(65);
 8002eda:	2041      	movs	r0, #65	; 0x41
 8002edc:	f7ff ff48 	bl	8002d70 <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT();
 8002ee0:	f7ff ff80 	bl	8002de4 <gpio_ds18b20_inputMode>
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8002ee4:	2005      	movs	r0, #5
 8002ee6:	f7ff ff43 	bl	8002d70 <Delay>
		ONEWIRE_INPUT();
 8002eea:	f7ff ff7b 	bl	8002de4 <gpio_ds18b20_inputMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8002eee:	b662      	cpsie	i
	}
	__enable_irq();
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010800 	.word	0x40010800

08002efc <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
	__disable_irq();
	/* Line low */
	ONEWIRE_LOW();
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f10:	480f      	ldr	r0, [pc, #60]	; (8002f50 <TM_OneWire_ReadBit+0x54>)
 8002f12:	f7fe f9fa 	bl	800130a <HAL_GPIO_WritePin>
	ONEWIRE_OUTPUT();
 8002f16:	f7ff ff4d 	bl	8002db4 <gpio_ds18b20_outputMode>
	ONEWIRE_DELAY(4); /*3*/
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f7ff ff28 	bl	8002d70 <Delay>
	
	/* Release line */
	ONEWIRE_INPUT();
 8002f20:	f7ff ff60 	bl	8002de4 <gpio_ds18b20_inputMode>
	ONEWIRE_DELAY(15); /*10*/
 8002f24:	200f      	movs	r0, #15
 8002f26:	f7ff ff23 	bl	8002d70 <Delay>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(ds18b20_data_GPIO_Port,ds18b20_data_Pin)) {
 8002f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f2e:	4808      	ldr	r0, [pc, #32]	; (8002f50 <TM_OneWire_ReadBit+0x54>)
 8002f30:	f7fe f9d4 	bl	80012dc <HAL_GPIO_ReadPin>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <TM_OneWire_ReadBit+0x42>
		/* Bit is HIGH */
		bit = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(55); /*50*/
 8002f3e:	2037      	movs	r0, #55	; 0x37
 8002f40:	f7ff ff16 	bl	8002d70 <Delay>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f44:	b662      	cpsie	i
	
	__enable_irq();

	/* Return bit value */
	return bit;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40010800 	.word	0x40010800

08002f54 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002f60:	2308      	movs	r3, #8
 8002f62:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8002f64:	e00a      	b.n	8002f7c <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff8d 	bl	8002e90 <TM_OneWire_WriteBit>
		byte >>= 1;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	73fa      	strb	r2, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ef      	bne.n	8002f66 <TM_OneWire_WriteByte+0x12>
	}
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002f96:	2308      	movs	r3, #8
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002f9e:	e00d      	b.n	8002fbc <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa8 	bl	8002efc <TM_OneWire_ReadBit>
 8002fac:	4603      	mov	r3, r0
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	73fa      	strb	r2, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ec      	bne.n	8002fa0 <TM_OneWire_ReadByte+0x12>
	}
	
	return byte;
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t* OneWireStruct) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f809 	bl	8002ff0 <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002fde:	21f0      	movs	r1, #240	; 0xf0
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f817 	bl	8003014 <TM_OneWire_Search>
 8002fe6:	4603      	mov	r3, r0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <TM_OneWire_ResetSearch>:
uint8_t TM_OneWire_Next(TM_OneWire_t* OneWireStruct) {
   /* Leave the search state alone */
   return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
}

void TM_OneWire_ResetSearch(TM_OneWire_t* OneWireStruct) {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	71da      	strb	r2, [r3, #7]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800302c:	2301      	movs	r3, #1
 800302e:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	733b      	strb	r3, [r7, #12]

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7a1b      	ldrb	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 809a 	bne.w	8003172 <TM_OneWire_Search+0x15e>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fefe 	bl	8002e40 <TM_OneWire_Reset>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	71da      	strb	r2, [r3, #7]
			return 0;
 800305c:	2300      	movs	r3, #0
 800305e:	e09b      	b.n	8003198 <TM_OneWire_Search+0x184>
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff75 	bl	8002f54 <TM_OneWire_WriteByte>

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff46 	bl	8002efc <TM_OneWire_ReadBit>
 8003070:	4603      	mov	r3, r0
 8003072:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff41 	bl	8002efc <TM_OneWire_ReadBit>
 800307a:	4603      	mov	r3, r0
 800307c:	723b      	strb	r3, [r7, #8]

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 800307e:	7a7b      	ldrb	r3, [r7, #9]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <TM_OneWire_Search+0x76>
 8003084:	7a3b      	ldrb	r3, [r7, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d064      	beq.n	8003154 <TM_OneWire_Search+0x140>
				break;
			} else {
				/* All devices coupled have 0 or 1 */
				if (id_bit != cmp_id_bit) {
 800308a:	7a7a      	ldrb	r2, [r7, #9]
 800308c:	7a3b      	ldrb	r3, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d002      	beq.n	8003098 <TM_OneWire_Search+0x84>
					/* Bit write value for search */
					search_direction = id_bit;
 8003092:	7a7b      	ldrb	r3, [r7, #9]
 8003094:	72bb      	strb	r3, [r7, #10]
 8003096:	e026      	b.n	80030e6 <TM_OneWire_Search+0xd2>
				} else {
					/* If this discrepancy is before the Last Discrepancy on a previous next then pick the same as last time */
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	799b      	ldrb	r3, [r3, #6]
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20d      	bcs.n	80030be <TM_OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80030a2:	7b7b      	ldrb	r3, [r7, #13]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	7a5a      	ldrb	r2, [r3, #9]
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	72bb      	strb	r3, [r7, #10]
 80030bc:	e008      	b.n	80030d0 <TM_OneWire_Search+0xbc>
					} else {
						/* If equal to last pick 1, if not then pick 0 */
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	799b      	ldrb	r3, [r3, #6]
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	72bb      	strb	r3, [r7, #10]
					}
					
					/* If 0 was picked then record its position in LastZero */
					if (search_direction == 0) {
 80030d0:	7abb      	ldrb	r3, [r7, #10]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	73bb      	strb	r3, [r7, #14]

						/* Check for Last discrepancy in family */
						if (last_zero < 9) {
 80030da:	7bbb      	ldrb	r3, [r7, #14]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d802      	bhi.n	80030e6 <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7bba      	ldrb	r2, [r7, #14]
 80030e4:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				/* Set or clear the bit in the ROM byte rom_byte_number with mask rom_byte_mask */
				if (search_direction == 1) {
 80030e6:	7abb      	ldrb	r3, [r7, #10]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80030ec:	7b7b      	ldrb	r3, [r7, #13]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	7a59      	ldrb	r1, [r3, #9]
 80030f4:	7b7b      	ldrb	r3, [r7, #13]
 80030f6:	7afa      	ldrb	r2, [r7, #11]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	b2d1      	uxtb	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	460a      	mov	r2, r1
 8003102:	725a      	strb	r2, [r3, #9]
 8003104:	e010      	b.n	8003128 <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003106:	7b7b      	ldrb	r3, [r7, #13]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	7a5b      	ldrb	r3, [r3, #9]
 800310e:	b25a      	sxtb	r2, r3
 8003110:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003114:	43db      	mvns	r3, r3
 8003116:	b25b      	sxtb	r3, r3
 8003118:	4013      	ands	r3, r2
 800311a:	b25a      	sxtb	r2, r3
 800311c:	7b7b      	ldrb	r3, [r7, #13]
 800311e:	b2d1      	uxtb	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	460a      	mov	r2, r1
 8003126:	725a      	strb	r2, [r3, #9]
				}
				
				/* Serial number search direction write bit */
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003128:	7abb      	ldrb	r3, [r7, #10]
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff feaf 	bl	8002e90 <TM_OneWire_WriteBit>

				/* Increment the byte counter id_bit_number and shift the mask rom_byte_mask */
				id_bit_number++;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3301      	adds	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	72fb      	strb	r3, [r7, #11]

				/* If the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask */
				if (rom_byte_mask == 0) {
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <TM_OneWire_Search+0x13a>
					rom_byte_number++;
 8003144:	7b7b      	ldrb	r3, [r7, #13]
 8003146:	3301      	adds	r3, #1
 8003148:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	72fb      	strb	r3, [r7, #11]
				}
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);
 800314e:	7b7b      	ldrb	r3, [r7, #13]
 8003150:	2b07      	cmp	r3, #7
 8003152:	d98a      	bls.n	800306a <TM_OneWire_Search+0x56>

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d90b      	bls.n	8003172 <TM_OneWire_Search+0x15e>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7bba      	ldrb	r2, [r7, #14]
 800315e:	719a      	strb	r2, [r3, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	733b      	strb	r3, [r7, #12]
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003172:	7b3b      	ldrb	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <TM_OneWire_Search+0x16c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7a5b      	ldrb	r3, [r3, #9]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8003196:	7b3b      	ldrb	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80031aa:	2155      	movs	r1, #85	; 0x55
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fed1 	bl	8002f54 <TM_OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e00a      	b.n	80031ce <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fec6 	bl	8002f54 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	3301      	adds	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d9f1      	bls.n	80031b8 <TM_OneWire_SelectWithPointer+0x18>
	}	
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e00a      	b.n	8003202 <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	440b      	add	r3, r1
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	440a      	add	r2, r1
 80031f8:	7a52      	ldrb	r2, [r2, #9]
 80031fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	3301      	adds	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b07      	cmp	r3, #7
 8003206:	d9f1      	bls.n	80031ec <TM_OneWire_GetFullROM+0x10>
	}
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8003222:	e022      	b.n	800326a <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800322e:	2308      	movs	r3, #8
 8003230:	737b      	strb	r3, [r7, #13]
 8003232:	e017      	b.n	8003264 <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	4053      	eors	r3, r2
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003248:	7b3b      	ldrb	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003254:	43db      	mvns	r3, r3
 8003256:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800325e:	7b7b      	ldrb	r3, [r7, #13]
 8003260:	3b01      	subs	r3, #1
 8003262:	737b      	strb	r3, [r7, #13]
 8003264:	7b7b      	ldrb	r3, [r7, #13]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e4      	bne.n	8003234 <TM_OneWire_CRC8+0x22>
	while (len--) {
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	1e5a      	subs	r2, r3, #1
 800326e:	70fa      	strb	r2, [r7, #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1d7      	bne.n	8003224 <TM_OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <Delay+0x3c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800328e:	f7fe fd2b 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <Delay+0x40>)
 8003296:	fba3 2302 	umull	r2, r3, r3, r2
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80032a4:	bf00      	nop
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <Delay+0x3c>)
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad2      	subs	r2, r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3f8      	bcc.n	80032a6 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	e0001000 	.word	0xe0001000
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	460a      	mov	r2, r1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	TM_DELAY_Init();
 80032d4:	f7ff fb06 	bl	80028e4 <TM_DELAY_Init>
	
	/* Init pinout */
	TM_HD44780_InitPins();
 80032d8:	f000 f990 	bl	80035fc <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 80032dc:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 80032e0:	f7ff ffce 	bl	8003280 <Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <TM_HD44780_Init+0xd0>)
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 80032ea:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <TM_HD44780_Init+0xd0>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <TM_HD44780_Init+0xd0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <TM_HD44780_Init+0xd0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <TM_HD44780_Init+0xd0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8003302:	79bb      	ldrb	r3, [r7, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d906      	bls.n	8003316 <TM_HD44780_Init+0x52>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <TM_HD44780_Init+0xd0>)
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <TM_HD44780_Init+0xd0>)
 8003314:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 8003316:	2003      	movs	r0, #3
 8003318:	f000 f8f8 	bl	800350c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800331c:	f241 1094 	movw	r0, #4500	; 0x1194
 8003320:	f7ff ffae 	bl	8003280 <Delay>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 8003324:	2003      	movs	r0, #3
 8003326:	f000 f8f1 	bl	800350c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800332a:	f241 1094 	movw	r0, #4500	; 0x1194
 800332e:	f7ff ffa7 	bl	8003280 <Delay>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 8003332:	2003      	movs	r0, #3
 8003334:	f000 f8ea 	bl	800350c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8003338:	f241 1094 	movw	r0, #4500	; 0x1194
 800333c:	f7ff ffa0 	bl	8003280 <Delay>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 8003340:	2002      	movs	r0, #2
 8003342:	f000 f8e3 	bl	800350c <TM_HD44780_Cmd4bit>
	HD44780_Delay(1000);
 8003346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800334a:	f7ff ff99 	bl	8003280 <Delay>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <TM_HD44780_Init+0xd0>)
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	f043 0320 	orr.w	r3, r3, #32
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f89b 	bl	8003494 <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <TM_HD44780_Init+0xd0>)
 8003360:	2204      	movs	r2, #4
 8003362:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 8003364:	f000 f880 	bl	8003468 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8003368:	f000 f816 	bl	8003398 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <TM_HD44780_Init+0xd0>)
 800336e:	2202      	movs	r2, #2
 8003370:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <TM_HD44780_Init+0xd0>)
 8003374:	789b      	ldrb	r3, [r3, #2]
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f889 	bl	8003494 <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 8003382:	f241 1094 	movw	r0, #4500	; 0x1194
 8003386:	f7ff ff7b 	bl	8003280 <Delay>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000888 	.word	0x20000888

08003398 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 800339c:	2001      	movs	r0, #1
 800339e:	f000 f879 	bl	8003494 <TM_HD44780_Cmd>
	HD44780_Delay(30000);
 80033a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80033a6:	f7ff ff6b 	bl	8003280 <Delay>
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	603a      	str	r2, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
 80033bc:	460b      	mov	r3, r1
 80033be:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 80033c0:	79ba      	ldrb	r2, [r7, #6]
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8e6 	bl	8003598 <TM_HD44780_CursorSet>
	while (*str) {
 80033cc:	e042      	b.n	8003454 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033d0:	795a      	ldrb	r2, [r3, #5]
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d310      	bcc.n	80033fc <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033e2:	799b      	ldrb	r3, [r3, #6]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033ea:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033ee:	795a      	ldrb	r2, [r3, #5]
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <TM_HD44780_Puts+0xb4>)
 80033f2:	799b      	ldrb	r3, [r3, #6]
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 f8ce 	bl	8003598 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b0a      	cmp	r3, #10
 8003402:	d10e      	bne.n	8003422 <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <TM_HD44780_Puts+0xb4>)
 8003406:	799b      	ldrb	r3, [r3, #6]
 8003408:	3301      	adds	r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <TM_HD44780_Puts+0xb4>)
 800340e:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <TM_HD44780_Puts+0xb4>)
 8003412:	795a      	ldrb	r2, [r3, #5]
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <TM_HD44780_Puts+0xb4>)
 8003416:	799b      	ldrb	r3, [r3, #6]
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f000 f8bc 	bl	8003598 <TM_HD44780_CursorSet>
 8003420:	e015      	b.n	800344e <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b0d      	cmp	r3, #13
 8003428:	d106      	bne.n	8003438 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <TM_HD44780_Puts+0xb4>)
 800342c:	799b      	ldrb	r3, [r3, #6]
 800342e:	4619      	mov	r1, r3
 8003430:	2000      	movs	r0, #0
 8003432:	f000 f8b1 	bl	8003598 <TM_HD44780_CursorSet>
 8003436:	e00a      	b.n	800344e <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f847 	bl	80034d0 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <TM_HD44780_Puts+0xb4>)
 8003444:	795b      	ldrb	r3, [r3, #5]
 8003446:	3301      	adds	r3, #1
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <TM_HD44780_Puts+0xb4>)
 800344c:	715a      	strb	r2, [r3, #5]
		}
		str++;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1b8      	bne.n	80033ce <TM_HD44780_Puts+0x1e>
	}
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000888 	.word	0x20000888

08003468 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <TM_HD44780_DisplayOn+0x28>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <TM_HD44780_DisplayOn+0x28>)
 8003478:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <TM_HD44780_DisplayOn+0x28>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f805 	bl	8003494 <TM_HD44780_Cmd>
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000888 	.word	0x20000888

08003494 <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034a4:	4809      	ldr	r0, [pc, #36]	; (80034cc <TM_HD44780_Cmd+0x38>)
 80034a6:	f7fd ff30 	bl	800130a <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f82b 	bl	800350c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f824 	bl	800350c <TM_HD44780_Cmd4bit>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40010c00 	.word	0x40010c00

080034d0 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 80034da:	2201      	movs	r2, #1
 80034dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <TM_HD44780_Data+0x38>)
 80034e2:	f7fd ff12 	bl	800130a <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f80d 	bl	800350c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f806 	bl	800350c <TM_HD44780_Cmd4bit>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40010c00 	.word	0x40010c00

0800350c <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003524:	481b      	ldr	r0, [pc, #108]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 8003526:	f7fd fef0 	bl	800130a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003538:	4816      	ldr	r0, [pc, #88]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 800353a:	f7fd fee6 	bl	800130a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354c:	4811      	ldr	r0, [pc, #68]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 800354e:	f7fd fedc 	bl	800130a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 8003562:	f7fd fed2 	bl	800130a <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 8003566:	2201      	movs	r2, #1
 8003568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800356c:	4809      	ldr	r0, [pc, #36]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 800356e:	f7fd fecc 	bl	800130a <HAL_GPIO_WritePin>
 8003572:	2050      	movs	r0, #80	; 0x50
 8003574:	f7ff fe84 	bl	8003280 <Delay>
 8003578:	2200      	movs	r2, #0
 800357a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <TM_HD44780_Cmd4bit+0x88>)
 8003580:	f7fd fec3 	bl	800130a <HAL_GPIO_WritePin>
 8003584:	2050      	movs	r0, #80	; 0x50
 8003586:	f7ff fe7b 	bl	8003280 <Delay>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40010c00 	.word	0x40010c00

08003598 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	460a      	mov	r2, r1
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <TM_HD44780_CursorSet+0x5c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <TM_HD44780_CursorSet+0x60>)
 80035b0:	78db      	ldrb	r3, [r3, #3]
 80035b2:	79ba      	ldrb	r2, [r7, #6]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d301      	bcc.n	80035bc <TM_HD44780_CursorSet+0x24>
		row = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <TM_HD44780_CursorSet+0x60>)
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <TM_HD44780_CursorSet+0x60>)
 80035c4:	79bb      	ldrb	r3, [r7, #6]
 80035c6:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 80035c8:	79bb      	ldrb	r3, [r7, #6]
 80035ca:	f107 0210 	add.w	r2, r7, #16
 80035ce:	4413      	add	r3, r2
 80035d0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff55 	bl	8003494 <TM_HD44780_Cmd>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08005c88 	.word	0x08005c88
 80035f8:	20000888 	.word	0x20000888

080035fc <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361a:	2b84      	cmp	r3, #132	; 0x84
 800361c:	d005      	beq.n	800362a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800361e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	3303      	adds	r3, #3
 8003628:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800363a:	f000 fa7f 	bl	8003b3c <vTaskStartScheduler>
  
  return osOK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}

08003644 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af04      	add	r7, sp, #16
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685c      	ldr	r4, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681d      	ldr	r5, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691e      	ldr	r6, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ffd1 	bl	8003608 <makeFreeRtosPriority>
 8003666:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003670:	9202      	str	r2, [sp, #8]
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	9100      	str	r1, [sp, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4632      	mov	r2, r6
 800367a:	4629      	mov	r1, r5
 800367c:	4620      	mov	r0, r4
 800367e:	f000 f8b5 	bl	80037ec <xTaskCreateStatic>
 8003682:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800368e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0208 	add.w	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e00c      	b.n	8003764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3308      	adds	r3, #8
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e002      	b.n	8003758 <vListInsert+0x2e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d2f6      	bcs.n	8003752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6852      	ldr	r2, [r2, #4]
 80037ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d103      	bne.n	80037ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	1e5a      	subs	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af04      	add	r7, sp, #16
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e7fe      	b.n	8003812 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <xTaskCreateStatic+0x42>
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e7fe      	b.n	800382c <xTaskCreateStatic+0x40>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01a      	beq.n	800386a <xTaskCreateStatic+0x7e>
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003844:	2300      	movs	r3, #0
 8003846:	9303      	str	r3, [sp, #12]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9302      	str	r3, [sp, #8]
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f80b 	bl	8003878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003862:	69f8      	ldr	r0, [r7, #28]
 8003864:	f000 f886 	bl	8003974 <prvAddNewTaskToReadyList>
 8003868:	e001      	b.n	800386e <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 800386e:	693b      	ldr	r3, [r7, #16]
	}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003890:	3b01      	subs	r3, #1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <prvInitialiseNewTask+0x46>
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e7fe      	b.n	80038bc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e012      	b.n	80038ea <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	7819      	ldrb	r1, [r3, #0]
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	3334      	adds	r3, #52	; 0x34
 80038d4:	460a      	mov	r2, r1
 80038d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d9e9      	bls.n	80038c4 <prvInitialiseNewTask+0x4c>
 80038f0:	e000      	b.n	80038f4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80038f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d901      	bls.n	8003906 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003902:	2306      	movs	r3, #6
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2200      	movs	r2, #0
 8003916:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fed5 	bl	80036cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	3318      	adds	r3, #24
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fed0 	bl	80036cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	f1c3 0207 	rsb	r2, r3, #7
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2200      	movs	r2, #0
 8003946:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	69b8      	ldr	r0, [r7, #24]
 8003956:	f000 fc45 	bl	80041e4 <pxPortInitialiseStack>
 800395a:	4602      	mov	r2, r0
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800397c:	f000 fd02 	bl	8004384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <prvAddNewTaskToReadyList+0xb8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <prvAddNewTaskToReadyList+0xb8>)
 8003988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <prvAddNewTaskToReadyList+0xbc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003992:	4a27      	ldr	r2, [pc, #156]	; (8003a30 <prvAddNewTaskToReadyList+0xbc>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003998:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <prvAddNewTaskToReadyList+0xb8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d110      	bne.n	80039c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039a0:	f000 fb10 	bl	8003fc4 <prvInitialiseTaskLists>
 80039a4:	e00d      	b.n	80039c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <prvAddNewTaskToReadyList+0xc0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <prvAddNewTaskToReadyList+0xbc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d802      	bhi.n	80039c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <prvAddNewTaskToReadyList+0xbc>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <prvAddNewTaskToReadyList+0xc4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <prvAddNewTaskToReadyList+0xc4>)
 80039ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <prvAddNewTaskToReadyList+0xc8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <prvAddNewTaskToReadyList+0xc8>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <prvAddNewTaskToReadyList+0xcc>)
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7ff fe75 	bl	80036e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039fa:	f000 fcf1 	bl	80043e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <prvAddNewTaskToReadyList+0xc0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00e      	beq.n	8003a24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <prvAddNewTaskToReadyList+0xbc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d207      	bcs.n	8003a24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <prvAddNewTaskToReadyList+0xd0>)
 8003a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000990 	.word	0x20000990
 8003a30:	20000890 	.word	0x20000890
 8003a34:	2000099c 	.word	0x2000099c
 8003a38:	200009ac 	.word	0x200009ac
 8003a3c:	20000998 	.word	0x20000998
 8003a40:	20000894 	.word	0x20000894
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <vTaskDelayUntil+0x28>
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e7fe      	b.n	8003a6e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <vTaskDelayUntil+0x42>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e7fe      	b.n	8003a88 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <vTaskDelayUntil+0xe8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <vTaskDelayUntil+0x5e>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8003aa6:	f000 f8a7 	bl	8003bf8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <vTaskDelayUntil+0xec>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d20b      	bcs.n	8003adc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d211      	bcs.n	8003af2 <vTaskDelayUntil+0xaa>
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d90d      	bls.n	8003af2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e00a      	b.n	8003af2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d303      	bcc.n	8003aee <vTaskDelayUntil+0xa6>
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d901      	bls.n	8003af2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fb06 	bl	8004118 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003b0c:	f000 f882 	bl	8003c14 <xTaskResumeAll>
 8003b10:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <vTaskDelayUntil+0xf0>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b28:	bf00      	nop
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200009b8 	.word	0x200009b8
 8003b34:	20000994 	.word	0x20000994
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b4a:	463a      	mov	r2, r7
 8003b4c:	1d39      	adds	r1, r7, #4
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fcca 	bl	80044ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	9202      	str	r2, [sp, #8]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	460a      	mov	r2, r1
 8003b6a:	491d      	ldr	r1, [pc, #116]	; (8003be0 <vTaskStartScheduler+0xa4>)
 8003b6c:	481d      	ldr	r0, [pc, #116]	; (8003be4 <vTaskStartScheduler+0xa8>)
 8003b6e:	f7ff fe3d 	bl	80037ec <xTaskCreateStatic>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <vTaskStartScheduler+0xac>)
 8003b76:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <vTaskStartScheduler+0xac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e001      	b.n	8003b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d115      	bne.n	8003bbc <vTaskStartScheduler+0x80>
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <vTaskStartScheduler+0xb0>)
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <vTaskStartScheduler+0xb4>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <vTaskStartScheduler+0xb8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bb6:	f000 fb87 	bl	80042c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bba:	e00d      	b.n	8003bd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d109      	bne.n	8003bd8 <vTaskStartScheduler+0x9c>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskStartScheduler+0x9a>
}
 8003bd8:	bf00      	nop
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08005c8c 	.word	0x08005c8c
 8003be4:	08003f95 	.word	0x08003f95
 8003be8:	200009b4 	.word	0x200009b4
 8003bec:	200009b0 	.word	0x200009b0
 8003bf0:	2000099c 	.word	0x2000099c
 8003bf4:	20000994 	.word	0x20000994

08003bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <vTaskSuspendAll+0x18>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <vTaskSuspendAll+0x18>)
 8003c04:	6013      	str	r3, [r2, #0]
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	200009b8 	.word	0x200009b8

08003c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <xTaskResumeAll+0x114>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <xTaskResumeAll+0x2a>
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	e7fe      	b.n	8003c3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c3e:	f000 fba1 	bl	8004384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <xTaskResumeAll+0x114>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <xTaskResumeAll+0x114>)
 8003c4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <xTaskResumeAll+0x114>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d161      	bne.n	8003d18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <xTaskResumeAll+0x118>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05d      	beq.n	8003d18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c5c:	e02e      	b.n	8003cbc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c5e:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <xTaskResumeAll+0x11c>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3318      	adds	r3, #24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fd95 	bl	800379a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fd90 	bl	800379a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <xTaskResumeAll+0x120>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <xTaskResumeAll+0x120>)
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <xTaskResumeAll+0x124>)
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f7ff fd1e 	bl	80036e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <xTaskResumeAll+0x128>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <xTaskResumeAll+0x12c>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <xTaskResumeAll+0x11c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cc      	bne.n	8003c5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cca:	f000 fa01 	bl	80040d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <xTaskResumeAll+0x130>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d010      	beq.n	8003cfc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cda:	f000 f845 	bl	8003d68 <xTaskIncrementTick>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <xTaskResumeAll+0x12c>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f1      	bne.n	8003cda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <xTaskResumeAll+0x130>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <xTaskResumeAll+0x12c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <xTaskResumeAll+0x134>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d18:	f000 fb62 	bl	80043e0 <vPortExitCritical>

	return xAlreadyYielded;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200009b8 	.word	0x200009b8
 8003d2c:	20000990 	.word	0x20000990
 8003d30:	20000950 	.word	0x20000950
 8003d34:	20000998 	.word	0x20000998
 8003d38:	20000894 	.word	0x20000894
 8003d3c:	20000890 	.word	0x20000890
 8003d40:	200009a4 	.word	0x200009a4
 8003d44:	200009a0 	.word	0x200009a0
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <xTaskGetTickCount+0x18>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	20000994 	.word	0x20000994

08003d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d72:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 808c 	bne.w	8003e94 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003d7c:	4b4e      	ldr	r3, [pc, #312]	; (8003eb8 <xTaskIncrementTick+0x150>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d84:	4a4c      	ldr	r2, [pc, #304]	; (8003eb8 <xTaskIncrementTick+0x150>)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11f      	bne.n	8003dd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d90:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <xTaskIncrementTick+0x46>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	e7fe      	b.n	8003dac <xTaskIncrementTick+0x44>
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <xTaskIncrementTick+0x158>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a40      	ldr	r2, [pc, #256]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <xTaskIncrementTick+0x158>)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <xTaskIncrementTick+0x15c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	4a3e      	ldr	r2, [pc, #248]	; (8003ec4 <xTaskIncrementTick+0x15c>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	f000 f980 	bl	80040d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dd0:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <xTaskIncrementTick+0x160>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d34d      	bcc.n	8003e76 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <xTaskIncrementTick+0x80>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <xTaskIncrementTick+0x82>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <xTaskIncrementTick+0x160>)
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	601a      	str	r2, [r3, #0]
					break;
 8003df6:	e03e      	b.n	8003e76 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d203      	bcs.n	8003e18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e10:	4a2d      	ldr	r2, [pc, #180]	; (8003ec8 <xTaskIncrementTick+0x160>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
						break;
 8003e16:	e02e      	b.n	8003e76 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fcbc 	bl	800379a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fcb3 	bl	800379a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <xTaskIncrementTick+0x164>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <xTaskIncrementTick+0x164>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <xTaskIncrementTick+0x168>)
 8003e54:	441a      	add	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7ff fc41 	bl	80036e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <xTaskIncrementTick+0x16c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3b4      	bcc.n	8003dda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e74:	e7b1      	b.n	8003dda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <xTaskIncrementTick+0x16c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4914      	ldr	r1, [pc, #80]	; (8003ed0 <xTaskIncrementTick+0x168>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d907      	bls.n	8003e9e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e004      	b.n	8003e9e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <xTaskIncrementTick+0x170>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <xTaskIncrementTick+0x170>)
 8003e9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <xTaskIncrementTick+0x174>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	200009b8 	.word	0x200009b8
 8003eb8:	20000994 	.word	0x20000994
 8003ebc:	20000948 	.word	0x20000948
 8003ec0:	2000094c 	.word	0x2000094c
 8003ec4:	200009a8 	.word	0x200009a8
 8003ec8:	200009b0 	.word	0x200009b0
 8003ecc:	20000998 	.word	0x20000998
 8003ed0:	20000894 	.word	0x20000894
 8003ed4:	20000890 	.word	0x20000890
 8003ed8:	200009a0 	.word	0x200009a0
 8003edc:	200009a4 	.word	0x200009a4

08003ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <vTaskSwitchContext+0xa0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <vTaskSwitchContext+0xa4>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ef4:	e03e      	b.n	8003f74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <vTaskSwitchContext+0xa4>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <vTaskSwitchContext+0xa8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	f1c3 031f 	rsb	r3, r3, #31
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	491e      	ldr	r1, [pc, #120]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	e7fe      	b.n	8003f38 <vTaskSwitchContext+0x58>
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003f46:	4413      	add	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <vTaskSwitchContext+0x8a>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <vTaskSwitchContext+0xb0>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	200009b8 	.word	0x200009b8
 8003f84:	200009a4 	.word	0x200009a4
 8003f88:	20000998 	.word	0x20000998
 8003f8c:	20000894 	.word	0x20000894
 8003f90:	20000890 	.word	0x20000890

08003f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f9c:	f000 f852 	bl	8004044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <prvIdleTask+0x28>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d9f9      	bls.n	8003f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <prvIdleTask+0x2c>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fb8:	e7f0      	b.n	8003f9c <prvIdleTask+0x8>
 8003fba:	bf00      	nop
 8003fbc:	20000894 	.word	0x20000894
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	e00c      	b.n	8003fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <prvInitialiseTaskLists+0x60>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fb55 	bl	800368e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d9ef      	bls.n	8003fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ff0:	480d      	ldr	r0, [pc, #52]	; (8004028 <prvInitialiseTaskLists+0x64>)
 8003ff2:	f7ff fb4c 	bl	800368e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ff6:	480d      	ldr	r0, [pc, #52]	; (800402c <prvInitialiseTaskLists+0x68>)
 8003ff8:	f7ff fb49 	bl	800368e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ffc:	480c      	ldr	r0, [pc, #48]	; (8004030 <prvInitialiseTaskLists+0x6c>)
 8003ffe:	f7ff fb46 	bl	800368e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004002:	480c      	ldr	r0, [pc, #48]	; (8004034 <prvInitialiseTaskLists+0x70>)
 8004004:	f7ff fb43 	bl	800368e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004008:	480b      	ldr	r0, [pc, #44]	; (8004038 <prvInitialiseTaskLists+0x74>)
 800400a:	f7ff fb40 	bl	800368e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <prvInitialiseTaskLists+0x78>)
 8004010:	4a05      	ldr	r2, [pc, #20]	; (8004028 <prvInitialiseTaskLists+0x64>)
 8004012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <prvInitialiseTaskLists+0x7c>)
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <prvInitialiseTaskLists+0x68>)
 8004018:	601a      	str	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000894 	.word	0x20000894
 8004028:	20000920 	.word	0x20000920
 800402c:	20000934 	.word	0x20000934
 8004030:	20000950 	.word	0x20000950
 8004034:	20000964 	.word	0x20000964
 8004038:	2000097c 	.word	0x2000097c
 800403c:	20000948 	.word	0x20000948
 8004040:	2000094c 	.word	0x2000094c

08004044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800404a:	e028      	b.n	800409e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800404c:	f7ff fdd4 	bl	8003bf8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <prvCheckTasksWaitingTermination+0x6c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004060:	f7ff fdd8 	bl	8003c14 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800406a:	f000 f98b 	bl	8004384 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <prvCheckTasksWaitingTermination+0x6c>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fb8d 	bl	800379a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvCheckTasksWaitingTermination+0x70>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <prvCheckTasksWaitingTermination+0x70>)
 8004088:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <prvCheckTasksWaitingTermination+0x74>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <prvCheckTasksWaitingTermination+0x74>)
 8004092:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004094:	f000 f9a4 	bl	80043e0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004098:	6838      	ldr	r0, [r7, #0]
 800409a:	f000 f80f 	bl	80040bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <prvCheckTasksWaitingTermination+0x74>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d2      	bne.n	800404c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000964 	.word	0x20000964
 80040b4:	20000990 	.word	0x20000990
 80040b8:	20000978 	.word	0x20000978

080040bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <prvResetNextTaskUnblockTime+0x40>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <prvResetNextTaskUnblockTime+0x14>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <prvResetNextTaskUnblockTime+0x16>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <prvResetNextTaskUnblockTime+0x44>)
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040f2:	e008      	b.n	8004106 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvResetNextTaskUnblockTime+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvResetNextTaskUnblockTime+0x44>)
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	20000948 	.word	0x20000948
 8004114:	200009b0 	.word	0x200009b0

08004118 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fb33 	bl	800379a <uxListRemove>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2201      	movs	r2, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4013      	ands	r3, r2
 800414e:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004150:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d10a      	bne.n	8004170 <prvAddCurrentTaskToDelayedList+0x58>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	481a      	ldr	r0, [pc, #104]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800416a:	f7ff fabb 	bl	80036e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800416e:	e026      	b.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d209      	bcs.n	800419c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7ff fac8 	bl	800372a <vListInsert>
}
 800419a:	e010      	b.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff fabe 	bl	800372a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d202      	bcs.n	80041be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000994 	.word	0x20000994
 80041cc:	20000890 	.word	0x20000890
 80041d0:	20000998 	.word	0x20000998
 80041d4:	2000097c 	.word	0x2000097c
 80041d8:	2000094c 	.word	0x2000094c
 80041dc:	20000948 	.word	0x20000948
 80041e0:	200009b0 	.word	0x200009b0

080041e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b04      	subs	r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b04      	subs	r3, #4
 8004202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b04      	subs	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <pxPortInitialiseStack+0x54>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b14      	subs	r3, #20
 800421e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b20      	subs	r3, #32
 800422a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	0800423d 	.word	0x0800423d

0800423c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <prvTaskExitError+0x38>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d009      	beq.n	8004260 <prvTaskExitError+0x24>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e7fe      	b.n	800425e <prvTaskExitError+0x22>
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004272:	e7fe      	b.n	8004272 <prvTaskExitError+0x36>
 8004274:	20000000 	.word	0x20000000
	...

08004280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	f04e 0e0d 	orr.w	lr, lr, #13
 800429e:	4770      	bx	lr

080042a0 <pxCurrentTCBConst2>:
 80042a0:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <prvPortStartFirstTask+0x1c>)
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f380 8808 	msr	MSP, r0
 80042b2:	b662      	cpsie	i
 80042b4:	b661      	cpsie	f
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	df00      	svc	0
 80042c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042c2:	bf00      	nop
 80042c4:	e000ed08 	.word	0xe000ed08

080042c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <xPortStartScheduler+0xa8>)
 80042d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <xPortStartScheduler+0xac>)
 80042f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <xPortStartScheduler+0xb0>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80042fe:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <xPortStartScheduler+0xb0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <xPortStartScheduler+0xb0>)
 8004306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d0ef      	beq.n	80042fe <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <xPortStartScheduler+0xb0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <xPortStartScheduler+0xb0>)
 8004326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <xPortStartScheduler+0xb0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <xPortStartScheduler+0xb0>)
 8004332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xPortStartScheduler+0xb4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0e      	ldr	r2, [pc, #56]	; (800437c <xPortStartScheduler+0xb4>)
 8004342:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <xPortStartScheduler+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <xPortStartScheduler+0xb4>)
 800434e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004354:	f000 f8b0 	bl	80044b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <xPortStartScheduler+0xb8>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800435e:	f7ff ffa3 	bl	80042a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004362:	f7ff ff6b 	bl	800423c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	e000e400 	.word	0xe000e400
 8004374:	200009bc 	.word	0x200009bc
 8004378:	200009c0 	.word	0x200009c0
 800437c:	e000ed20 	.word	0xe000ed20
 8004380:	20000000 	.word	0x20000000

08004384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <vPortEnterCritical+0x54>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <vPortEnterCritical+0x54>)
 80043a4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <vPortEnterCritical+0x54>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10e      	bne.n	80043cc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <vPortEnterCritical+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <vPortEnterCritical+0x48>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	e7fe      	b.n	80043ca <vPortEnterCritical+0x46>
	}
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <vPortExitCritical+0x48>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <vPortExitCritical+0x22>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e7fe      	b.n	8004400 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <vPortExitCritical+0x48>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <vPortExitCritical+0x48>)
 800440a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <vPortExitCritical+0x48>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <vPortExitCritical+0x3e>
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	20000000 	.word	0x20000000
 800442c:	00000000 	.word	0x00000000

08004430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004440:	6010      	str	r0, [r2, #0]
 8004442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800444a:	f380 8811 	msr	BASEPRI, r0
 800444e:	f7ff fd47 	bl	8003ee0 <vTaskSwitchContext>
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004466:	f380 8809 	msr	PSP, r0
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	4770      	bx	lr

08004470 <pxCurrentTCBConst>:
 8004470:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004490:	f7ff fc6a 	bl	8003d68 <xTaskIncrementTick>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <SysTick_Handler+0x3c>)
 800449c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	2300      	movs	r3, #0
 80044a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <vPortSetupTimerInterrupt+0x24>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <vPortSetupTimerInterrupt+0x28>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <vPortSetupTimerInterrupt+0x2c>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <vPortSetupTimerInterrupt+0x30>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	20000004 	.word	0x20000004
 80044e0:	10624dd3 	.word	0x10624dd3
 80044e4:	e000e014 	.word	0xe000e014
 80044e8:	e000e010 	.word	0xe000e010

080044ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a06      	ldr	r2, [pc, #24]	; (8004514 <vApplicationGetIdleTaskMemory+0x28>)
 80044fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a05      	ldr	r2, [pc, #20]	; (8004518 <vApplicationGetIdleTaskMemory+0x2c>)
 8004502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	200009c4 	.word	0x200009c4
 8004518:	20000a18 	.word	0x20000a18

0800451c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_ADC_ConvCpltCallback+0x40>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d110      	bne.n	8004550 <HAL_ADC_ConvCpltCallback+0x34>
	{
		for(int i=0; i<3; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e00a      	b.n	800454a <HAL_ADC_ConvCpltCallback+0x2e>
		{
			valueAdc[i] = adc_buffer[i];
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_ADC_ConvCpltCallback+0x44>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800453c:	4909      	ldr	r1, [pc, #36]	; (8004564 <HAL_ADC_ConvCpltCallback+0x48>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<3; i++)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b02      	cmp	r3, #2
 800454e:	ddf1      	ble.n	8004534 <HAL_ADC_ConvCpltCallback+0x18>
		}
	}
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012400 	.word	0x40012400
 8004560:	20001210 	.word	0x20001210
 8004564:	20001708 	.word	0x20001708

08004568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b09c      	sub	sp, #112	; 0x70
 800456c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800456e:	f7fb fdef 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004572:	f000 f8b5 	bl	80046e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004576:	f000 fa19 	bl	80049ac <MX_GPIO_Init>
  MX_DMA_Init();
 800457a:	f000 f9f9 	bl	8004970 <MX_DMA_Init>
  MX_ADC1_Init();
 800457e:	f000 f90b 	bl	8004798 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004582:	f000 f965 	bl	8004850 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004586:	f000 f991 	bl	80048ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TM_OneWire_Init(&oneWireDS18B20, ds18b20_data_GPIO_Port, ds18b20_data_Pin);
 800458a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458e:	4944      	ldr	r1, [pc, #272]	; (80046a0 <main+0x138>)
 8004590:	4844      	ldr	r0, [pc, #272]	; (80046a4 <main+0x13c>)
 8004592:	f7fe fc3f 	bl	8002e14 <TM_OneWire_Init>
  /* Initialize LCD 20 cols x 4 rows */
  TM_HD44780_Init(16, 2);
 8004596:	2102      	movs	r1, #2
 8004598:	2010      	movs	r0, #16
 800459a:	f7fe fe93 	bl	80032c4 <TM_HD44780_Init>

  if (TM_OneWire_First(&oneWireDS18B20))
 800459e:	4841      	ldr	r0, [pc, #260]	; (80046a4 <main+0x13c>)
 80045a0:	f7fe fd16 	bl	8002fd0 <TM_OneWire_First>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <main+0x58>
  {
  	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 80045aa:	2201      	movs	r2, #1
 80045ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045b0:	483d      	ldr	r0, [pc, #244]	; (80046a8 <main+0x140>)
 80045b2:	f7fc feaa 	bl	800130a <HAL_GPIO_WritePin>

  	/* Read ROM number */
  	TM_OneWire_GetFullROM(&oneWireDS18B20, DS_ROM);
 80045b6:	493d      	ldr	r1, [pc, #244]	; (80046ac <main+0x144>)
 80045b8:	483a      	ldr	r0, [pc, #232]	; (80046a4 <main+0x13c>)
 80045ba:	f7fe fe0f 	bl	80031dc <TM_OneWire_GetFullROM>
 80045be:	e005      	b.n	80045cc <main+0x64>
  }
  else
  {
  	/* Bad Initialization */
  	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 80045c0:	2200      	movs	r2, #0
 80045c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045c6:	4838      	ldr	r0, [pc, #224]	; (80046a8 <main+0x140>)
 80045c8:	f7fc fe9f 	bl	800130a <HAL_GPIO_WritePin>
  }


  if (TM_DS18B20_Is(DS_ROM)) {
 80045cc:	4837      	ldr	r0, [pc, #220]	; (80046ac <main+0x144>)
 80045ce:	f7fe fbb3 	bl	8002d38 <TM_DS18B20_Is>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <main+0x80>
  	/* Set resolution */
  	TM_DS18B20_SetResolution(&oneWireDS18B20, DS_ROM, TM_DS18B20_Resolution_12bits);
 80045d8:	220c      	movs	r2, #12
 80045da:	4934      	ldr	r1, [pc, #208]	; (80046ac <main+0x144>)
 80045dc:	4831      	ldr	r0, [pc, #196]	; (80046a4 <main+0x13c>)
 80045de:	f7fe fb23 	bl	8002c28 <TM_DS18B20_SetResolution>

  	/* Start conversion on all sensors */
  	TM_DS18B20_StartAll(&oneWireDS18B20);
 80045e2:	4830      	ldr	r0, [pc, #192]	; (80046a4 <main+0x13c>)
 80045e4:	f7fe fa44 	bl	8002a70 <TM_DS18B20_StartAll>
  }

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 80045e8:	2203      	movs	r2, #3
 80045ea:	4931      	ldr	r1, [pc, #196]	; (80046b0 <main+0x148>)
 80045ec:	4831      	ldr	r0, [pc, #196]	; (80046b4 <main+0x14c>)
 80045ee:	f7fb fe9d 	bl	800032c <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* Save custom character on location 0 in LCD */

  /* Put string to LCD */
  TM_HD44780_Puts(3, 0, "BrewBedded");
 80045f2:	4a31      	ldr	r2, [pc, #196]	; (80046b8 <main+0x150>)
 80045f4:	2100      	movs	r1, #0
 80045f6:	2003      	movs	r0, #3
 80045f8:	f7fe feda 	bl	80033b0 <TM_HD44780_Puts>
  TM_HD44780_Puts(4, 1, "By LeinaD");
 80045fc:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <main+0x154>)
 80045fe:	2101      	movs	r1, #1
 8004600:	2004      	movs	r0, #4
 8004602:	f7fe fed5 	bl	80033b0 <TM_HD44780_Puts>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of IdleTask */
  osThreadStaticDef(IdleTask, StartIdleTask, osPriorityIdle, 0, 128, defaultIdleTaskBuffer, &defaultIdleTaskControlBlock);
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <main+0x158>)
 8004608:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800460c:	461d      	mov	r5, r3
 800460e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IdleTaskHandle = osThreadCreate(osThread(IdleTask), NULL);
 800461a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f80f 	bl	8003644 <osThreadCreate>
 8004626:	4602      	mov	r2, r0
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <main+0x15c>)
 800462a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_2ms */
  osThreadStaticDef(Task_2ms, StartTask2ms, osPriorityIdle, 0, 128, myTask2msBuffer, &myTask2msControlBlock);
 800462c:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <main+0x160>)
 800462e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004632:	461d      	mov	r5, r3
 8004634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800463c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_2msHandle = osThreadCreate(osThread(Task_2ms), NULL);
 8004640:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fffc 	bl	8003644 <osThreadCreate>
 800464c:	4602      	mov	r2, r0
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <main+0x164>)
 8004650:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_5ms */
  osThreadStaticDef(Task_5ms, StartTask5ms, osPriorityIdle, 0, 128, myTask5msBuffer, &myTask5msControlBlock);
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <main+0x168>)
 8004654:	f107 041c 	add.w	r4, r7, #28
 8004658:	461d      	mov	r5, r3
 800465a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8004666:	f107 031c 	add.w	r3, r7, #28
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe ffe9 	bl	8003644 <osThreadCreate>
 8004672:	4602      	mov	r2, r0
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <main+0x16c>)
 8004676:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_10ms */
  osThreadStaticDef(Task_10ms, StartTask10ms, osPriorityIdle, 0, 128, myTask10msBuffer, &myTask10msControlBlock);
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <main+0x170>)
 800467a:	463c      	mov	r4, r7
 800467c:	461d      	mov	r5, r3
 800467e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 800468a:	463b      	mov	r3, r7
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe ffd8 	bl	8003644 <osThreadCreate>
 8004694:	4602      	mov	r2, r0
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <main+0x174>)
 8004698:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800469a:	f7fe ffcc 	bl	8003636 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800469e:	e7fe      	b.n	800469e <main+0x136>
 80046a0:	40010800 	.word	0x40010800
 80046a4:	20000d10 	.word	0x20000d10
 80046a8:	40011000 	.word	0x40011000
 80046ac:	20000c58 	.word	0x20000c58
 80046b0:	20001210 	.word	0x20001210
 80046b4:	20000f7c 	.word	0x20000f7c
 80046b8:	08005c94 	.word	0x08005c94
 80046bc:	08005ca0 	.word	0x08005ca0
 80046c0:	08005cb8 	.word	0x08005cb8
 80046c4:	20000d0c 	.word	0x20000d0c
 80046c8:	08005ce0 	.word	0x08005ce0
 80046cc:	2000121c 	.word	0x2000121c
 80046d0:	08005d08 	.word	0x08005d08
 80046d4:	20000c54 	.word	0x20000c54
 80046d8:	08005d30 	.word	0x08005d30
 80046dc:	20000c60 	.word	0x20000c60

080046e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b094      	sub	sp, #80	; 0x50
 80046e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ea:	2228      	movs	r2, #40	; 0x28
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f83a 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004710:	2301      	movs	r3, #1
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800471a:	2300      	movs	r3, #0
 800471c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800471e:	2301      	movs	r3, #1
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004722:	2302      	movs	r3, #2
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800472c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc ff04 	bl	8001544 <HAL_RCC_OscConfig>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004742:	f000 fa8f 	bl	8004c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004746:	230f      	movs	r3, #15
 8004748:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800474a:	2302      	movs	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd f952 	bl	8001a0c <HAL_RCC_ClockConfig>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800476e:	f000 fa79 	bl	8004c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004772:	2302      	movs	r3, #2
 8004774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fb32 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800478a:	f000 fa6b 	bl	8004c64 <Error_Handler>
  }
}
 800478e:	bf00      	nop
 8004790:	3750      	adds	r7, #80	; 0x50
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047aa:	4a28      	ldr	r2, [pc, #160]	; (800484c <MX_ADC1_Init+0xb4>)
 80047ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80047bc:	4b22      	ldr	r3, [pc, #136]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80047c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047d2:	2203      	movs	r2, #3
 80047d4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047d6:	481c      	ldr	r0, [pc, #112]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047d8:	f7fb fcd0 	bl	800017c <HAL_ADC_Init>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80047e2:	f000 fa3f 	bl	8004c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80047ee:	2307      	movs	r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4814      	ldr	r0, [pc, #80]	; (8004848 <MX_ADC1_Init+0xb0>)
 80047f8:	f7fb ff54 	bl	80006a4 <HAL_ADC_ConfigChannel>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004802:	f000 fa2f 	bl	8004c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004806:	2301      	movs	r3, #1
 8004808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800480a:	2302      	movs	r3, #2
 800480c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	4619      	mov	r1, r3
 8004812:	480d      	ldr	r0, [pc, #52]	; (8004848 <MX_ADC1_Init+0xb0>)
 8004814:	f7fb ff46 	bl	80006a4 <HAL_ADC_ConfigChannel>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800481e:	f000 fa21 	bl	8004c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004822:	2302      	movs	r3, #2
 8004824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004826:	2303      	movs	r3, #3
 8004828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4806      	ldr	r0, [pc, #24]	; (8004848 <MX_ADC1_Init+0xb0>)
 8004830:	f7fb ff38 	bl	80006a4 <HAL_ADC_ConfigChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800483a:	f000 fa13 	bl	8004c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000f7c 	.word	0x20000f7c
 800484c:	40012400 	.word	0x40012400

08004850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <MX_I2C1_Init+0x54>)
 8004858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_I2C1_Init+0x50>)
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <MX_I2C1_Init+0x58>)
 800485e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004868:	2200      	movs	r2, #0
 800486a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_I2C1_Init+0x50>)
 800486e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <MX_I2C1_Init+0x50>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <MX_I2C1_Init+0x50>)
 8004888:	2200      	movs	r2, #0
 800488a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800488c:	4804      	ldr	r0, [pc, #16]	; (80048a0 <MX_I2C1_Init+0x50>)
 800488e:	f7fc fd55 	bl	800133c <HAL_I2C_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004898:	f000 f9e4 	bl	8004c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000cb8 	.word	0x20000cb8
 80048a4:	40005400 	.word	0x40005400
 80048a8:	000186a0 	.word	0x000186a0

080048ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b2:	f107 0320 	add.w	r3, r7, #32
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	615a      	str	r2, [r3, #20]
 80048cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048ce:	4b27      	ldr	r3, [pc, #156]	; (800496c <MX_TIM2_Init+0xc0>)
 80048d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80048d6:	4b25      	ldr	r3, [pc, #148]	; (800496c <MX_TIM2_Init+0xc0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <MX_TIM2_Init+0xc0>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <MX_TIM2_Init+0xc0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <MX_TIM2_Init+0xc0>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ee:	4b1f      	ldr	r3, [pc, #124]	; (800496c <MX_TIM2_Init+0xc0>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80048f4:	481d      	ldr	r0, [pc, #116]	; (800496c <MX_TIM2_Init+0xc0>)
 80048f6:	f7fd fb7b 	bl	8001ff0 <HAL_TIM_PWM_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004900:	f000 f9b0 	bl	8004c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800490c:	f107 0320 	add.w	r3, r7, #32
 8004910:	4619      	mov	r1, r3
 8004912:	4816      	ldr	r0, [pc, #88]	; (800496c <MX_TIM2_Init+0xc0>)
 8004914:	f7fd ff90 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800491e:	f000 f9a1 	bl	8004c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004922:	2360      	movs	r3, #96	; 0x60
 8004924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2200      	movs	r2, #0
 8004936:	4619      	mov	r1, r3
 8004938:	480c      	ldr	r0, [pc, #48]	; (800496c <MX_TIM2_Init+0xc0>)
 800493a:	f7fd fc8d 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004944:	f000 f98e 	bl	8004c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	2204      	movs	r2, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4807      	ldr	r0, [pc, #28]	; (800496c <MX_TIM2_Init+0xc0>)
 8004950:	f7fd fc82 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800495a:	f000 f983 	bl	8004c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800495e:	4803      	ldr	r0, [pc, #12]	; (800496c <MX_TIM2_Init+0xc0>)
 8004960:	f000 faa2 	bl	8004ea8 <HAL_TIM_MspPostInit>

}
 8004964:	bf00      	nop
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20001220 	.word	0x20001220

08004970 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <MX_DMA_Init+0x38>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <MX_DMA_Init+0x38>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6153      	str	r3, [r2, #20]
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <MX_DMA_Init+0x38>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2105      	movs	r1, #5
 8004992:	200b      	movs	r0, #11
 8004994:	f7fc f92b 	bl	8000bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004998:	200b      	movs	r0, #11
 800499a:	f7fc f944 	bl	8000c26 <HAL_NVIC_EnableIRQ>

}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000

080049ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049c0:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	4a38      	ldr	r2, [pc, #224]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	6193      	str	r3, [r2, #24]
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049d8:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4a32      	ldr	r2, [pc, #200]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049de:	f043 0320 	orr.w	r3, r3, #32
 80049e2:	6193      	str	r3, [r2, #24]
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f0:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6193      	str	r3, [r2, #24]
 80049fc:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 8004a0e:	f043 0308 	orr.w	r3, r3, #8
 8004a12:	6193      	str	r3, [r2, #24]
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <MX_GPIO_Init+0xfc>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a26:	4821      	ldr	r0, [pc, #132]	; (8004aac <MX_GPIO_Init+0x100>)
 8004a28:	f7fc fc6f 	bl	800130a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f64f 4130 	movw	r1, #64560	; 0xfc30
 8004a32:	481f      	ldr	r0, [pc, #124]	; (8004ab0 <MX_GPIO_Init+0x104>)
 8004a34:	f7fc fc69 	bl	800130a <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|Fan_Peltier_Pin|Water_Pump_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ds18b20_data_GPIO_Port, ds18b20_data_Pin, GPIO_PIN_SET);
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a3e:	481d      	ldr	r0, [pc, #116]	; (8004ab4 <MX_GPIO_Init+0x108>)
 8004a40:	f7fc fc63 	bl	800130a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a52:	2302      	movs	r3, #2
 8004a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004a56:	f107 0310 	add.w	r3, r7, #16
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4813      	ldr	r0, [pc, #76]	; (8004aac <MX_GPIO_Init+0x100>)
 8004a5e:	f7fc fadf 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin Fan_Peltier_Pin Water_Pump_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 8004a62:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8004a66:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|Fan_Peltier_Pin|Water_Pump_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a70:	2302      	movs	r3, #2
 8004a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a74:	f107 0310 	add.w	r3, r7, #16
 8004a78:	4619      	mov	r1, r3
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <MX_GPIO_Init+0x104>)
 8004a7c:	f7fc fad0 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ds18b20_data_Pin */
  GPIO_InitStruct.Pin = ds18b20_data_Pin;
 8004a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004a86:	2311      	movs	r3, #17
 8004a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_InitStruct);
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	4619      	mov	r1, r3
 8004a98:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <MX_GPIO_Init+0x108>)
 8004a9a:	f7fc fac1 	bl	8001020 <HAL_GPIO_Init>

}
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40011000 	.word	0x40011000
 8004ab0:	40010c00 	.word	0x40010c00
 8004ab4:	40010800 	.word	0x40010800

08004ab8 <StartIdleTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8004ac0:	e7fe      	b.n	8004ac0 <StartIdleTask+0x8>

08004ac2 <StartTask2ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2ms */
void StartTask2ms(void const * argument)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8004aca:	2302      	movs	r3, #2
 8004acc:	60fb      	str	r3, [r7, #12]

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004ace:	f7ff f93d 	bl	8003d4c <xTaskGetTickCount>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe ffb3 	bl	8003a48 <vTaskDelayUntil>
 8004ae2:	e7f8      	b.n	8004ad6 <StartTask2ms+0x14>

08004ae4 <StartTask5ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5ms */
void StartTask5ms(void const * argument)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask5ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5;
 8004aec:	2305      	movs	r3, #5
 8004aee:	60fb      	str	r3, [r7, #12]

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004af0:	f7ff f92c 	bl	8003d4c <xTaskGetTickCount>
 8004af4:	4603      	mov	r3, r0
 8004af6:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe ffa2 	bl	8003a48 <vTaskDelayUntil>
 8004b04:	e7f8      	b.n	8004af8 <StartTask5ms+0x14>
	...

08004b08 <StartTask10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask10ms */
void StartTask10ms(void const * argument)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask10ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8004b10:	230a      	movs	r3, #10
 8004b12:	60fb      	str	r3, [r7, #12]
	static uint8_t cnt100ms=0;

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004b14:	f7ff f91a 	bl	8003d4c <xTaskGetTickCount>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]

	TM_HD44780_Clear();
 8004b1c:	f7fe fc3c 	bl	8003398 <TM_HD44780_Clear>

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe ff8e 	bl	8003a48 <vTaskDelayUntil>

		if(cnt100ms > 100)
 8004b2c:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <StartTask10ms+0x110>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b64      	cmp	r3, #100	; 0x64
 8004b32:	d969      	bls.n	8004c08 <StartTask10ms+0x100>
		{
			if (TM_DS18B20_Is(DS_ROM))
 8004b34:	4839      	ldr	r0, [pc, #228]	; (8004c1c <StartTask10ms+0x114>)
 8004b36:	f7fe f8ff 	bl	8002d38 <TM_DS18B20_Is>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d033      	beq.n	8004ba8 <StartTask10ms+0xa0>
			{
				/* Everything is done */
				if (TM_DS18B20_AllDone(&oneWireDS18B20))
 8004b40:	4837      	ldr	r0, [pc, #220]	; (8004c20 <StartTask10ms+0x118>)
 8004b42:	f7fe f909 	bl	8002d58 <TM_DS18B20_AllDone>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <StartTask10ms+0xa0>
				{
					/* Read temperature from device */
					if (TM_DS18B20_Read(&oneWireDS18B20, DS_ROM, &temp))
 8004b4c:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <StartTask10ms+0x11c>)
 8004b4e:	4933      	ldr	r1, [pc, #204]	; (8004c1c <StartTask10ms+0x114>)
 8004b50:	4833      	ldr	r0, [pc, #204]	; (8004c20 <StartTask10ms+0x118>)
 8004b52:	f7fd ffa1 	bl	8002a98 <TM_DS18B20_Read>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <StartTask10ms+0x94>
					{
						/* Temp read OK, CRC is OK */
						HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b62:	4831      	ldr	r0, [pc, #196]	; (8004c28 <StartTask10ms+0x120>)
 8004b64:	f7fc fbd1 	bl	800130a <HAL_GPIO_WritePin>
						/* Start again on all sensors */
						TM_DS18B20_StartAll(&oneWireDS18B20);
 8004b68:	482d      	ldr	r0, [pc, #180]	; (8004c20 <StartTask10ms+0x118>)
 8004b6a:	f7fd ff81 	bl	8002a70 <TM_DS18B20_StartAll>

						TM_HD44780_Puts(0, 0, "TempAgua: ");
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <StartTask10ms+0x124>)
 8004b70:	2100      	movs	r1, #0
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7fe fc1c 	bl	80033b0 <TM_HD44780_Puts>
						itoa(temp,buffer,10);
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <StartTask10ms+0x11c>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	220a      	movs	r2, #10
 8004b7e:	492c      	ldr	r1, [pc, #176]	; (8004c30 <StartTask10ms+0x128>)
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fb55 	bl	8005230 <itoa>
						TM_HD44780_Puts(10, 0, buffer);
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <StartTask10ms+0x128>)
 8004b88:	2100      	movs	r1, #0
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f7fe fc10 	bl	80033b0 <TM_HD44780_Puts>
						TM_HD44780_Puts(13, 0, "C");
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <StartTask10ms+0x12c>)
 8004b92:	2100      	movs	r1, #0
 8004b94:	200d      	movs	r0, #13
 8004b96:	f7fe fc0b 	bl	80033b0 <TM_HD44780_Puts>
 8004b9a:	e005      	b.n	8004ba8 <StartTask10ms+0xa0>

					}
					else
					{
						/* CRC failed, hardware problems on data line */
						HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba2:	4821      	ldr	r0, [pc, #132]	; (8004c28 <StartTask10ms+0x120>)
 8004ba4:	f7fc fbb1 	bl	800130a <HAL_GPIO_WritePin>
					}
				}
			}
			itoa(valueAdc[0],buffer,10);
 8004ba8:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <StartTask10ms+0x130>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	220a      	movs	r2, #10
 8004bae:	4920      	ldr	r1, [pc, #128]	; (8004c30 <StartTask10ms+0x128>)
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fb3d 	bl	8005230 <itoa>
			TM_HD44780_Puts(0, 1, buffer);
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <StartTask10ms+0x128>)
 8004bb8:	2101      	movs	r1, #1
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7fe fbf8 	bl	80033b0 <TM_HD44780_Puts>

			valueAdc[1] = valueAdc[1]/10;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <StartTask10ms+0x130>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <StartTask10ms+0x134>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <StartTask10ms+0x130>)
 8004bce:	6053      	str	r3, [r2, #4]

			itoa(valueAdc[1],buffer,10);
 8004bd0:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <StartTask10ms+0x130>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	220a      	movs	r2, #10
 8004bd6:	4916      	ldr	r1, [pc, #88]	; (8004c30 <StartTask10ms+0x128>)
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb29 	bl	8005230 <itoa>
			TM_HD44780_Puts(6, 1, buffer);
 8004bde:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <StartTask10ms+0x128>)
 8004be0:	2101      	movs	r1, #1
 8004be2:	2006      	movs	r0, #6
 8004be4:	f7fe fbe4 	bl	80033b0 <TM_HD44780_Puts>

			itoa(valueAdc[2],buffer,10);
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <StartTask10ms+0x130>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	220a      	movs	r2, #10
 8004bee:	4910      	ldr	r1, [pc, #64]	; (8004c30 <StartTask10ms+0x128>)
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fb1d 	bl	8005230 <itoa>
			TM_HD44780_Puts(13, 1, buffer);
 8004bf6:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <StartTask10ms+0x128>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	200d      	movs	r0, #13
 8004bfc:	f7fe fbd8 	bl	80033b0 <TM_HD44780_Puts>

			cnt100ms = 0;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <StartTask10ms+0x110>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e78b      	b.n	8004b20 <StartTask10ms+0x18>
		}
		else
		{
			cnt100ms++;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <StartTask10ms+0x110>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <StartTask10ms+0x110>)
 8004c12:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004c14:	e784      	b.n	8004b20 <StartTask10ms+0x18>
 8004c16:	bf00      	nop
 8004c18:	20000c18 	.word	0x20000c18
 8004c1c:	20000c58 	.word	0x20000c58
 8004c20:	20000d10 	.word	0x20000d10
 8004c24:	20000f24 	.word	0x20000f24
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	08005d4c 	.word	0x08005d4c
 8004c30:	20000fb8 	.word	0x20000fb8
 8004c34:	08005d58 	.word	0x08005d58
 8004c38:	20001708 	.word	0x20001708
 8004c3c:	cccccccd 	.word	0xcccccccd

08004c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c52:	f7fd fe7d 	bl	8002950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00

08004c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6193      	str	r3, [r2, #24]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	61d3      	str	r3, [r2, #28]
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_MspInit+0x68>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	210f      	movs	r1, #15
 8004caa:	f06f 0001 	mvn.w	r0, #1
 8004cae:	f7fb ff9e 	bl	8000bee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <HAL_MspInit+0x6c>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_MspInit+0x6c>)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40010000 	.word	0x40010000

08004ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_ADC_MspInit+0xcc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d151      	bne.n	8004da4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d00:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0a:	6193      	str	r3, [r2, #24]
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	6193      	str	r3, [r2, #24]
 8004d24:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_ADC_MspInit+0xd0>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = Crrnt_Peltier1_Pin|Crrnt_Peltier2_Pin|Cooler_Temp_Pin;
 8004d30:	2307      	movs	r3, #7
 8004d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d34:	2303      	movs	r3, #3
 8004d36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	481d      	ldr	r0, [pc, #116]	; (8004db4 <HAL_ADC_MspInit+0xd4>)
 8004d40:	f7fc f96e 	bl	8001020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004d44:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_ADC_MspInit+0xdc>)
 8004d48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d6e:	2220      	movs	r2, #32
 8004d70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d78:	480f      	ldr	r0, [pc, #60]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d7a:	f7fb ff63 	bl	8000c44 <HAL_DMA_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004d84:	f7ff ff6e 	bl	8004c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <HAL_ADC_MspInit+0xd8>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2105      	movs	r1, #5
 8004d98:	2012      	movs	r0, #18
 8004d9a:	f7fb ff28 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d9e:	2012      	movs	r0, #18
 8004da0:	f7fb ff41 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004da4:	bf00      	nop
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40012400 	.word	0x40012400
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40010800 	.word	0x40010800
 8004db8:	200011cc 	.word	0x200011cc
 8004dbc:	40020008 	.word	0x40020008

08004dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_I2C_MspInit+0x90>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d132      	bne.n	8004e46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004de6:	f043 0308 	orr.w	r3, r3, #8
 8004dea:	6193      	str	r3, [r2, #24]
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_Beagle_SCL_Pin|I2C_Beagle_SDA_Pin;
 8004df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dfe:	2312      	movs	r3, #18
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e02:	2303      	movs	r3, #3
 8004e04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4812      	ldr	r0, [pc, #72]	; (8004e58 <HAL_I2C_MspInit+0x98>)
 8004e0e:	f7fc f907 	bl	8001020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_I2C_MspInit+0x9c>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	f043 0302 	orr.w	r3, r3, #2
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <HAL_I2C_MspInit+0x9c>)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e38:	61d3      	str	r3, [r2, #28]
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_I2C_MspInit+0x94>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e46:	bf00      	nop
 8004e48:	3728      	adds	r7, #40	; 0x28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40005400 	.word	0x40005400
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40010c00 	.word	0x40010c00
 8004e5c:	40010000 	.word	0x40010000

08004e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d113      	bne.n	8004e9a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_TIM_PWM_MspInit+0x44>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <HAL_TIM_PWM_MspInit+0x44>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	61d3      	str	r3, [r2, #28]
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_TIM_PWM_MspInit+0x44>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	201c      	movs	r0, #28
 8004e90:	f7fb fead 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e94:	201c      	movs	r0, #28
 8004e96:	f7fb fec6 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f107 0314 	add.w	r3, r7, #20
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d142      	bne.n	8004f4e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	6193      	str	r3, [r2, #24]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004ee6:	f043 0308 	orr.w	r3, r3, #8
 8004eea:	6193      	str	r3, [r2, #24]
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_TIM_MspPostInit+0xb0>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = PWM_Peltier2_Pin;
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2302      	movs	r3, #2
 8004f04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWM_Peltier2_GPIO_Port, &GPIO_InitStruct);
 8004f06:	f107 0314 	add.w	r3, r7, #20
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4813      	ldr	r0, [pc, #76]	; (8004f5c <HAL_TIM_MspPostInit+0xb4>)
 8004f0e:	f7fc f887 	bl	8001020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Peltier1_Pin;
 8004f12:	2308      	movs	r3, #8
 8004f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWM_Peltier1_GPIO_Port, &GPIO_InitStruct);
 8004f1e:	f107 0314 	add.w	r3, r7, #20
 8004f22:	4619      	mov	r1, r3
 8004f24:	480e      	ldr	r0, [pc, #56]	; (8004f60 <HAL_TIM_MspPostInit+0xb8>)
 8004f26:	f7fc f87b 	bl	8001020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_TIM_MspPostInit+0xbc>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
 8004f48:	4a06      	ldr	r2, [pc, #24]	; (8004f64 <HAL_TIM_MspPostInit+0xbc>)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004f4e:	bf00      	nop
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40010800 	.word	0x40010800
 8004f60:	40010c00 	.word	0x40010c00
 8004f64:	40010000 	.word	0x40010000

08004f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8004f78:	2200      	movs	r2, #0
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	2019      	movs	r0, #25
 8004f7e:	f7fb fe36 	bl	8000bee <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8004f82:	2019      	movs	r0, #25
 8004f84:	f7fb fe4f 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004f88:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <HAL_InitTick+0x9c>)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_InitTick+0x9c>)
 8004f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f92:	6193      	str	r3, [r2, #24]
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_InitTick+0x9c>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fa0:	f107 0210 	add.w	r2, r7, #16
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fc fece 	bl	8001d4c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fc feb8 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	4a13      	ldr	r2, [pc, #76]	; (8005008 <HAL_InitTick+0xa0>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_InitTick+0xa4>)
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_InitTick+0xa8>)
 8004fc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_InitTick+0xa4>)
 8004fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	; (800500c <HAL_InitTick+0xa4>)
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_InitTick+0xa4>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_InitTick+0xa4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004fe4:	4809      	ldr	r0, [pc, #36]	; (800500c <HAL_InitTick+0xa4>)
 8004fe6:	f7fc ffb5 	bl	8001f54 <HAL_TIM_Base_Init>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004ff0:	4806      	ldr	r0, [pc, #24]	; (800500c <HAL_InitTick+0xa4>)
 8004ff2:	f7fc ffe3 	bl	8001fbc <HAL_TIM_Base_Start_IT>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	e000      	b.n	8004ffc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	431bde83 	.word	0x431bde83
 800500c:	20001714 	.word	0x20001714
 8005010:	40012c00 	.word	0x40012c00

08005014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005024:	e7fe      	b.n	8005024 <HardFault_Handler+0x4>

08005026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800502a:	e7fe      	b.n	800502a <MemManage_Handler+0x4>

0800502c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005030:	e7fe      	b.n	8005030 <BusFault_Handler+0x4>

08005032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005036:	e7fe      	b.n	8005036 <UsageFault_Handler+0x4>

08005038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <DMA1_Channel1_IRQHandler+0x10>)
 800504a:	f7fb feb5 	bl	8000db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200011cc 	.word	0x200011cc

08005058 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <ADC1_2_IRQHandler+0x10>)
 800505e:	f7fb fa43 	bl	80004e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000f7c 	.word	0x20000f7c

0800506c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <TIM1_UP_IRQHandler+0x10>)
 8005072:	f7fc ffe8 	bl	8002046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20001714 	.word	0x20001714

08005080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <TIM2_IRQHandler+0x10>)
 8005086:	f7fc ffde 	bl	8002046 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20001220 	.word	0x20001220

08005094 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <_sbrk+0x50>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <_sbrk+0x16>
		heap_end = &end;
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <_sbrk+0x50>)
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <_sbrk+0x54>)
 80050a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <_sbrk+0x50>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <_sbrk+0x50>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	466a      	mov	r2, sp
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d907      	bls.n	80050ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80050be:	f000 f86f 	bl	80051a0 <__errno>
 80050c2:	4602      	mov	r2, r0
 80050c4:	230c      	movs	r3, #12
 80050c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	e006      	b.n	80050dc <_sbrk+0x48>
	}

	heap_end += incr;
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <_sbrk+0x50>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <_sbrk+0x50>)
 80050d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000c1c 	.word	0x20000c1c
 80050e8:	20001780 	.word	0x20001780

080050ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <SystemInit+0x5c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <SystemInit+0x5c>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <SystemInit+0x5c>)
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4911      	ldr	r1, [pc, #68]	; (8005148 <SystemInit+0x5c>)
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <SystemInit+0x60>)
 8005104:	4013      	ands	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <SystemInit+0x5c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0e      	ldr	r2, [pc, #56]	; (8005148 <SystemInit+0x5c>)
 800510e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <SystemInit+0x5c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <SystemInit+0x5c>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005122:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <SystemInit+0x5c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <SystemInit+0x5c>)
 800512a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800512e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <SystemInit+0x5c>)
 8005132:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005136:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <SystemInit+0x64>)
 800513a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800513e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40021000 	.word	0x40021000
 800514c:	f8ff0000 	.word	0xf8ff0000
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005154:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005156:	e003      	b.n	8005160 <LoopCopyDataInit>

08005158 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800515a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800515c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800515e:	3104      	adds	r1, #4

08005160 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005160:	480a      	ldr	r0, [pc, #40]	; (800518c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005164:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005166:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005168:	d3f6      	bcc.n	8005158 <CopyDataInit>
  ldr r2, =_sbss
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800516c:	e002      	b.n	8005174 <LoopFillZerobss>

0800516e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800516e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005170:	f842 3b04 	str.w	r3, [r2], #4

08005174 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005176:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005178:	d3f9      	bcc.n	800516e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800517a:	f7ff ffb7 	bl	80050ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800517e:	f000 f815 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005182:	f7ff f9f1 	bl	8004568 <main>
  bx lr
 8005186:	4770      	bx	lr
  ldr r3, =_sidata
 8005188:	08005dac 	.word	0x08005dac
  ldr r0, =_sdata
 800518c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005190:	2000084c 	.word	0x2000084c
  ldr r2, =_sbss
 8005194:	2000084c 	.word	0x2000084c
  ldr r3, = _ebss
 8005198:	2000177c 	.word	0x2000177c

0800519c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800519c:	e7fe      	b.n	800519c <CAN1_RX1_IRQHandler>
	...

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000008 	.word	0x20000008

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4e0d      	ldr	r6, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4d0d      	ldr	r5, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b76      	subs	r6, r6, r5
 80051b4:	10b6      	asrs	r6, r6, #2
 80051b6:	d006      	beq.n	80051c6 <__libc_init_array+0x1a>
 80051b8:	2400      	movs	r4, #0
 80051ba:	3401      	adds	r4, #1
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d1f9      	bne.n	80051ba <__libc_init_array+0xe>
 80051c6:	4e09      	ldr	r6, [pc, #36]	; (80051ec <__libc_init_array+0x40>)
 80051c8:	4d09      	ldr	r5, [pc, #36]	; (80051f0 <__libc_init_array+0x44>)
 80051ca:	f000 fd47 	bl	8005c5c <_init>
 80051ce:	1b76      	subs	r6, r6, r5
 80051d0:	10b6      	asrs	r6, r6, #2
 80051d2:	d006      	beq.n	80051e2 <__libc_init_array+0x36>
 80051d4:	2400      	movs	r4, #0
 80051d6:	3401      	adds	r4, #1
 80051d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051dc:	4798      	blx	r3
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d1f9      	bne.n	80051d6 <__libc_init_array+0x2a>
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	08005da0 	.word	0x08005da0
 80051e8:	08005da0 	.word	0x08005da0
 80051ec:	08005da8 	.word	0x08005da8
 80051f0:	08005da0 	.word	0x08005da0

080051f4 <__itoa>:
 80051f4:	1e93      	subs	r3, r2, #2
 80051f6:	2b22      	cmp	r3, #34	; 0x22
 80051f8:	d816      	bhi.n	8005228 <__itoa+0x34>
 80051fa:	2a0a      	cmp	r2, #10
 80051fc:	b510      	push	{r4, lr}
 80051fe:	d006      	beq.n	800520e <__itoa+0x1a>
 8005200:	460b      	mov	r3, r1
 8005202:	460c      	mov	r4, r1
 8005204:	4619      	mov	r1, r3
 8005206:	f000 fb17 	bl	8005838 <__utoa>
 800520a:	4620      	mov	r0, r4
 800520c:	bd10      	pop	{r4, pc}
 800520e:	2800      	cmp	r0, #0
 8005210:	daf6      	bge.n	8005200 <__itoa+0xc>
 8005212:	460b      	mov	r3, r1
 8005214:	242d      	movs	r4, #45	; 0x2d
 8005216:	f803 4b01 	strb.w	r4, [r3], #1
 800521a:	460c      	mov	r4, r1
 800521c:	4240      	negs	r0, r0
 800521e:	4619      	mov	r1, r3
 8005220:	f000 fb0a 	bl	8005838 <__utoa>
 8005224:	4620      	mov	r0, r4
 8005226:	bd10      	pop	{r4, pc}
 8005228:	2000      	movs	r0, #0
 800522a:	7008      	strb	r0, [r1, #0]
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <itoa>:
 8005230:	f7ff bfe0 	b.w	80051f4 <__itoa>

08005234 <malloc>:
 8005234:	4b02      	ldr	r3, [pc, #8]	; (8005240 <malloc+0xc>)
 8005236:	4601      	mov	r1, r0
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f000 b803 	b.w	8005244 <_malloc_r>
 800523e:	bf00      	nop
 8005240:	20000008 	.word	0x20000008

08005244 <_malloc_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	f101 050b 	add.w	r5, r1, #11
 800524c:	2d16      	cmp	r5, #22
 800524e:	b083      	sub	sp, #12
 8005250:	4606      	mov	r6, r0
 8005252:	d823      	bhi.n	800529c <_malloc_r+0x58>
 8005254:	2910      	cmp	r1, #16
 8005256:	f200 80b6 	bhi.w	80053c6 <_malloc_r+0x182>
 800525a:	f000 facf 	bl	80057fc <__malloc_lock>
 800525e:	2510      	movs	r5, #16
 8005260:	2318      	movs	r3, #24
 8005262:	2002      	movs	r0, #2
 8005264:	4fcc      	ldr	r7, [pc, #816]	; (8005598 <_malloc_r+0x354>)
 8005266:	443b      	add	r3, r7
 8005268:	685c      	ldr	r4, [r3, #4]
 800526a:	f1a3 0208 	sub.w	r2, r3, #8
 800526e:	4294      	cmp	r4, r2
 8005270:	f000 8156 	beq.w	8005520 <_malloc_r+0x2dc>
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	68e1      	ldr	r1, [r4, #12]
 8005278:	f023 0303 	bic.w	r3, r3, #3
 800527c:	4423      	add	r3, r4
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68a5      	ldr	r5, [r4, #8]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	60e9      	str	r1, [r5, #12]
 8005288:	4630      	mov	r0, r6
 800528a:	608d      	str	r5, [r1, #8]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	f000 fabb 	bl	8005808 <__malloc_unlock>
 8005292:	3408      	adds	r4, #8
 8005294:	4620      	mov	r0, r4
 8005296:	b003      	add	sp, #12
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	f035 0507 	bics.w	r5, r5, #7
 80052a0:	f100 8091 	bmi.w	80053c6 <_malloc_r+0x182>
 80052a4:	42a9      	cmp	r1, r5
 80052a6:	f200 808e 	bhi.w	80053c6 <_malloc_r+0x182>
 80052aa:	f000 faa7 	bl	80057fc <__malloc_lock>
 80052ae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80052b2:	f0c0 8164 	bcc.w	800557e <_malloc_r+0x33a>
 80052b6:	0a6b      	lsrs	r3, r5, #9
 80052b8:	f000 808c 	beq.w	80053d4 <_malloc_r+0x190>
 80052bc:	2b04      	cmp	r3, #4
 80052be:	f200 8136 	bhi.w	800552e <_malloc_r+0x2ea>
 80052c2:	09ab      	lsrs	r3, r5, #6
 80052c4:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80052c8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80052cc:	00c1      	lsls	r1, r0, #3
 80052ce:	4fb2      	ldr	r7, [pc, #712]	; (8005598 <_malloc_r+0x354>)
 80052d0:	4439      	add	r1, r7
 80052d2:	684c      	ldr	r4, [r1, #4]
 80052d4:	3908      	subs	r1, #8
 80052d6:	42a1      	cmp	r1, r4
 80052d8:	d106      	bne.n	80052e8 <_malloc_r+0xa4>
 80052da:	e00c      	b.n	80052f6 <_malloc_r+0xb2>
 80052dc:	2a00      	cmp	r2, #0
 80052de:	f280 811b 	bge.w	8005518 <_malloc_r+0x2d4>
 80052e2:	68e4      	ldr	r4, [r4, #12]
 80052e4:	42a1      	cmp	r1, r4
 80052e6:	d006      	beq.n	80052f6 <_malloc_r+0xb2>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	1b5a      	subs	r2, r3, r5
 80052f0:	2a0f      	cmp	r2, #15
 80052f2:	ddf3      	ble.n	80052dc <_malloc_r+0x98>
 80052f4:	4660      	mov	r0, ip
 80052f6:	693c      	ldr	r4, [r7, #16]
 80052f8:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 80055ac <_malloc_r+0x368>
 80052fc:	4564      	cmp	r4, ip
 80052fe:	d06f      	beq.n	80053e0 <_malloc_r+0x19c>
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	1b5a      	subs	r2, r3, r5
 8005308:	2a0f      	cmp	r2, #15
 800530a:	f300 8126 	bgt.w	800555a <_malloc_r+0x316>
 800530e:	2a00      	cmp	r2, #0
 8005310:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8005314:	f280 8117 	bge.w	8005546 <_malloc_r+0x302>
 8005318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531c:	f080 8159 	bcs.w	80055d2 <_malloc_r+0x38e>
 8005320:	2201      	movs	r2, #1
 8005322:	08db      	lsrs	r3, r3, #3
 8005324:	1099      	asrs	r1, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	408a      	lsls	r2, r1
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8005330:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
 8005334:	430a      	orrs	r2, r1
 8005336:	f1a8 0108 	sub.w	r1, r8, #8
 800533a:	e9c4 e102 	strd	lr, r1, [r4, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 8005344:	f8ce 400c 	str.w	r4, [lr, #12]
 8005348:	2401      	movs	r4, #1
 800534a:	1083      	asrs	r3, r0, #2
 800534c:	409c      	lsls	r4, r3
 800534e:	4294      	cmp	r4, r2
 8005350:	d84c      	bhi.n	80053ec <_malloc_r+0x1a8>
 8005352:	4214      	tst	r4, r2
 8005354:	d106      	bne.n	8005364 <_malloc_r+0x120>
 8005356:	f020 0003 	bic.w	r0, r0, #3
 800535a:	0064      	lsls	r4, r4, #1
 800535c:	4214      	tst	r4, r2
 800535e:	f100 0004 	add.w	r0, r0, #4
 8005362:	d0fa      	beq.n	800535a <_malloc_r+0x116>
 8005364:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8005368:	46ce      	mov	lr, r9
 800536a:	4680      	mov	r8, r0
 800536c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005370:	459e      	cmp	lr, r3
 8005372:	d107      	bne.n	8005384 <_malloc_r+0x140>
 8005374:	e107      	b.n	8005586 <_malloc_r+0x342>
 8005376:	2a00      	cmp	r2, #0
 8005378:	f280 811c 	bge.w	80055b4 <_malloc_r+0x370>
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	459e      	cmp	lr, r3
 8005380:	f000 8101 	beq.w	8005586 <_malloc_r+0x342>
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	f021 0103 	bic.w	r1, r1, #3
 800538a:	1b4a      	subs	r2, r1, r5
 800538c:	2a0f      	cmp	r2, #15
 800538e:	ddf2      	ble.n	8005376 <_malloc_r+0x132>
 8005390:	f045 0801 	orr.w	r8, r5, #1
 8005394:	4630      	mov	r0, r6
 8005396:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
 800539a:	441d      	add	r5, r3
 800539c:	f042 0601 	orr.w	r6, r2, #1
 80053a0:	f8c3 8004 	str.w	r8, [r3, #4]
 80053a4:	f8ce 400c 	str.w	r4, [lr, #12]
 80053a8:	f8c4 e008 	str.w	lr, [r4, #8]
 80053ac:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80053b0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 80053b4:	606e      	str	r6, [r5, #4]
 80053b6:	505a      	str	r2, [r3, r1]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	f000 fa25 	bl	8005808 <__malloc_unlock>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	f103 0408 	add.w	r4, r3, #8
 80053c4:	e766      	b.n	8005294 <_malloc_r+0x50>
 80053c6:	2400      	movs	r4, #0
 80053c8:	230c      	movs	r3, #12
 80053ca:	4620      	mov	r0, r4
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	b003      	add	sp, #12
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053d8:	2040      	movs	r0, #64	; 0x40
 80053da:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80053de:	e776      	b.n	80052ce <_malloc_r+0x8a>
 80053e0:	2401      	movs	r4, #1
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	1083      	asrs	r3, r0, #2
 80053e6:	409c      	lsls	r4, r3
 80053e8:	4294      	cmp	r4, r2
 80053ea:	d9b2      	bls.n	8005352 <_malloc_r+0x10e>
 80053ec:	68bc      	ldr	r4, [r7, #8]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	f023 0903 	bic.w	r9, r3, #3
 80053f4:	45a9      	cmp	r9, r5
 80053f6:	d303      	bcc.n	8005400 <_malloc_r+0x1bc>
 80053f8:	eba9 0305 	sub.w	r3, r9, r5
 80053fc:	2b0f      	cmp	r3, #15
 80053fe:	dc7b      	bgt.n	80054f8 <_malloc_r+0x2b4>
 8005400:	4b66      	ldr	r3, [pc, #408]	; (800559c <_malloc_r+0x358>)
 8005402:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80055b0 <_malloc_r+0x36c>
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	f8da 3000 	ldr.w	r3, [sl]
 800540c:	eb05 0802 	add.w	r8, r5, r2
 8005410:	3301      	adds	r3, #1
 8005412:	f000 813a 	beq.w	800568a <_malloc_r+0x446>
 8005416:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800541a:	f108 080f 	add.w	r8, r8, #15
 800541e:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8005422:	f028 080f 	bic.w	r8, r8, #15
 8005426:	4641      	mov	r1, r8
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f9f3 	bl	8005814 <_sbrk_r>
 800542e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005432:	4683      	mov	fp, r0
 8005434:	f000 80f6 	beq.w	8005624 <_malloc_r+0x3e0>
 8005438:	eb04 0009 	add.w	r0, r4, r9
 800543c:	4558      	cmp	r0, fp
 800543e:	f200 80ef 	bhi.w	8005620 <_malloc_r+0x3dc>
 8005442:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <_malloc_r+0x35c>)
 8005444:	6813      	ldr	r3, [r2, #0]
 8005446:	4443      	add	r3, r8
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	f000 813f 	beq.w	80056cc <_malloc_r+0x488>
 800544e:	f8da 1000 	ldr.w	r1, [sl]
 8005452:	3101      	adds	r1, #1
 8005454:	bf1b      	ittet	ne
 8005456:	ebab 0000 	subne.w	r0, fp, r0
 800545a:	181b      	addne	r3, r3, r0
 800545c:	f8ca b000 	streq.w	fp, [sl]
 8005460:	6013      	strne	r3, [r2, #0]
 8005462:	f01b 0307 	ands.w	r3, fp, #7
 8005466:	f000 8126 	beq.w	80056b6 <_malloc_r+0x472>
 800546a:	f1c3 0108 	rsb	r1, r3, #8
 800546e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005472:	448b      	add	fp, r1
 8005474:	3308      	adds	r3, #8
 8005476:	44d8      	add	r8, fp
 8005478:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800547c:	eba3 0808 	sub.w	r8, r3, r8
 8005480:	4641      	mov	r1, r8
 8005482:	4630      	mov	r0, r6
 8005484:	9201      	str	r2, [sp, #4]
 8005486:	f000 f9c5 	bl	8005814 <_sbrk_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	9a01      	ldr	r2, [sp, #4]
 800548e:	f000 8138 	beq.w	8005702 <_malloc_r+0x4be>
 8005492:	eba0 010b 	sub.w	r1, r0, fp
 8005496:	4441      	add	r1, r8
 8005498:	f041 0101 	orr.w	r1, r1, #1
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	42bc      	cmp	r4, r7
 80054a0:	4443      	add	r3, r8
 80054a2:	f8c7 b008 	str.w	fp, [r7, #8]
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	f8cb 1004 	str.w	r1, [fp, #4]
 80054ac:	d015      	beq.n	80054da <_malloc_r+0x296>
 80054ae:	f1b9 0f0f 	cmp.w	r9, #15
 80054b2:	f240 8122 	bls.w	80056fa <_malloc_r+0x4b6>
 80054b6:	f04f 0e05 	mov.w	lr, #5
 80054ba:	6861      	ldr	r1, [r4, #4]
 80054bc:	f1a9 000c 	sub.w	r0, r9, #12
 80054c0:	f020 0007 	bic.w	r0, r0, #7
 80054c4:	f001 0101 	and.w	r1, r1, #1
 80054c8:	4301      	orrs	r1, r0
 80054ca:	eb04 0c00 	add.w	ip, r4, r0
 80054ce:	280f      	cmp	r0, #15
 80054d0:	6061      	str	r1, [r4, #4]
 80054d2:	e9cc ee01 	strd	lr, lr, [ip, #4]
 80054d6:	f200 812c 	bhi.w	8005732 <_malloc_r+0x4ee>
 80054da:	4a32      	ldr	r2, [pc, #200]	; (80055a4 <_malloc_r+0x360>)
 80054dc:	4832      	ldr	r0, [pc, #200]	; (80055a8 <_malloc_r+0x364>)
 80054de:	6811      	ldr	r1, [r2, #0]
 80054e0:	68bc      	ldr	r4, [r7, #8]
 80054e2:	428b      	cmp	r3, r1
 80054e4:	6801      	ldr	r1, [r0, #0]
 80054e6:	bf88      	it	hi
 80054e8:	6013      	strhi	r3, [r2, #0]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	428b      	cmp	r3, r1
 80054ee:	f022 0203 	bic.w	r2, r2, #3
 80054f2:	bf88      	it	hi
 80054f4:	6003      	strhi	r3, [r0, #0]
 80054f6:	e099      	b.n	800562c <_malloc_r+0x3e8>
 80054f8:	f045 0201 	orr.w	r2, r5, #1
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	4425      	add	r5, r4
 8005502:	6062      	str	r2, [r4, #4]
 8005504:	4630      	mov	r0, r6
 8005506:	60bd      	str	r5, [r7, #8]
 8005508:	3408      	adds	r4, #8
 800550a:	606b      	str	r3, [r5, #4]
 800550c:	f000 f97c 	bl	8005808 <__malloc_unlock>
 8005510:	4620      	mov	r0, r4
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	4423      	add	r3, r4
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68e1      	ldr	r1, [r4, #12]
 800551e:	e6af      	b.n	8005280 <_malloc_r+0x3c>
 8005520:	68dc      	ldr	r4, [r3, #12]
 8005522:	42a3      	cmp	r3, r4
 8005524:	bf08      	it	eq
 8005526:	3002      	addeq	r0, #2
 8005528:	f43f aee5 	beq.w	80052f6 <_malloc_r+0xb2>
 800552c:	e6a2      	b.n	8005274 <_malloc_r+0x30>
 800552e:	2b14      	cmp	r3, #20
 8005530:	d970      	bls.n	8005614 <_malloc_r+0x3d0>
 8005532:	2b54      	cmp	r3, #84	; 0x54
 8005534:	f200 80ac 	bhi.w	8005690 <_malloc_r+0x44c>
 8005538:	0b2b      	lsrs	r3, r5, #12
 800553a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800553e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8005542:	00c1      	lsls	r1, r0, #3
 8005544:	e6c3      	b.n	80052ce <_malloc_r+0x8a>
 8005546:	4423      	add	r3, r4
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4630      	mov	r0, r6
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	3408      	adds	r4, #8
 8005554:	f000 f958 	bl	8005808 <__malloc_unlock>
 8005558:	e69c      	b.n	8005294 <_malloc_r+0x50>
 800555a:	f045 0e01 	orr.w	lr, r5, #1
 800555e:	f042 0101 	orr.w	r1, r2, #1
 8005562:	4425      	add	r5, r4
 8005564:	f8c4 e004 	str.w	lr, [r4, #4]
 8005568:	4630      	mov	r0, r6
 800556a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800556e:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8005572:	6069      	str	r1, [r5, #4]
 8005574:	50e2      	str	r2, [r4, r3]
 8005576:	f000 f947 	bl	8005808 <__malloc_unlock>
 800557a:	3408      	adds	r4, #8
 800557c:	e68a      	b.n	8005294 <_malloc_r+0x50>
 800557e:	08e8      	lsrs	r0, r5, #3
 8005580:	f105 0308 	add.w	r3, r5, #8
 8005584:	e66e      	b.n	8005264 <_malloc_r+0x20>
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	f018 0f03 	tst.w	r8, #3
 800558e:	f10e 0e08 	add.w	lr, lr, #8
 8005592:	f47f aeeb 	bne.w	800536c <_malloc_r+0x128>
 8005596:	e060      	b.n	800565a <_malloc_r+0x416>
 8005598:	20000438 	.word	0x20000438
 800559c:	20000c50 	.word	0x20000c50
 80055a0:	20000c20 	.word	0x20000c20
 80055a4:	20000c48 	.word	0x20000c48
 80055a8:	20000c4c 	.word	0x20000c4c
 80055ac:	20000440 	.word	0x20000440
 80055b0:	20000840 	.word	0x20000840
 80055b4:	461c      	mov	r4, r3
 80055b6:	4419      	add	r1, r3
 80055b8:	684a      	ldr	r2, [r1, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	604a      	str	r2, [r1, #4]
 80055c6:	4630      	mov	r0, r6
 80055c8:	60eb      	str	r3, [r5, #12]
 80055ca:	609d      	str	r5, [r3, #8]
 80055cc:	f000 f91c 	bl	8005808 <__malloc_unlock>
 80055d0:	e660      	b.n	8005294 <_malloc_r+0x50>
 80055d2:	0a5a      	lsrs	r2, r3, #9
 80055d4:	2a04      	cmp	r2, #4
 80055d6:	d935      	bls.n	8005644 <_malloc_r+0x400>
 80055d8:	2a14      	cmp	r2, #20
 80055da:	d86f      	bhi.n	80056bc <_malloc_r+0x478>
 80055dc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80055e0:	00c9      	lsls	r1, r1, #3
 80055e2:	325b      	adds	r2, #91	; 0x5b
 80055e4:	eb07 0e01 	add.w	lr, r7, r1
 80055e8:	5879      	ldr	r1, [r7, r1]
 80055ea:	f1ae 0e08 	sub.w	lr, lr, #8
 80055ee:	458e      	cmp	lr, r1
 80055f0:	d058      	beq.n	80056a4 <_malloc_r+0x460>
 80055f2:	684a      	ldr	r2, [r1, #4]
 80055f4:	f022 0203 	bic.w	r2, r2, #3
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d902      	bls.n	8005602 <_malloc_r+0x3be>
 80055fc:	6889      	ldr	r1, [r1, #8]
 80055fe:	458e      	cmp	lr, r1
 8005600:	d1f7      	bne.n	80055f2 <_malloc_r+0x3ae>
 8005602:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800560c:	f8ce 4008 	str.w	r4, [lr, #8]
 8005610:	60cc      	str	r4, [r1, #12]
 8005612:	e699      	b.n	8005348 <_malloc_r+0x104>
 8005614:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8005618:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800561c:	00c1      	lsls	r1, r0, #3
 800561e:	e656      	b.n	80052ce <_malloc_r+0x8a>
 8005620:	42bc      	cmp	r4, r7
 8005622:	d072      	beq.n	800570a <_malloc_r+0x4c6>
 8005624:	68bc      	ldr	r4, [r7, #8]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	f022 0203 	bic.w	r2, r2, #3
 800562c:	4295      	cmp	r5, r2
 800562e:	eba2 0305 	sub.w	r3, r2, r5
 8005632:	d802      	bhi.n	800563a <_malloc_r+0x3f6>
 8005634:	2b0f      	cmp	r3, #15
 8005636:	f73f af5f 	bgt.w	80054f8 <_malloc_r+0x2b4>
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f8e4 	bl	8005808 <__malloc_unlock>
 8005640:	2400      	movs	r4, #0
 8005642:	e627      	b.n	8005294 <_malloc_r+0x50>
 8005644:	099a      	lsrs	r2, r3, #6
 8005646:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800564a:	00c9      	lsls	r1, r1, #3
 800564c:	3238      	adds	r2, #56	; 0x38
 800564e:	e7c9      	b.n	80055e4 <_malloc_r+0x3a0>
 8005650:	f8d9 9000 	ldr.w	r9, [r9]
 8005654:	4599      	cmp	r9, r3
 8005656:	f040 8083 	bne.w	8005760 <_malloc_r+0x51c>
 800565a:	f010 0f03 	tst.w	r0, #3
 800565e:	f1a9 0308 	sub.w	r3, r9, #8
 8005662:	f100 30ff 	add.w	r0, r0, #4294967295
 8005666:	d1f3      	bne.n	8005650 <_malloc_r+0x40c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	ea23 0304 	bic.w	r3, r3, r4
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	0064      	lsls	r4, r4, #1
 8005672:	429c      	cmp	r4, r3
 8005674:	f63f aeba 	bhi.w	80053ec <_malloc_r+0x1a8>
 8005678:	b91c      	cbnz	r4, 8005682 <_malloc_r+0x43e>
 800567a:	e6b7      	b.n	80053ec <_malloc_r+0x1a8>
 800567c:	0064      	lsls	r4, r4, #1
 800567e:	f108 0804 	add.w	r8, r8, #4
 8005682:	421c      	tst	r4, r3
 8005684:	d0fa      	beq.n	800567c <_malloc_r+0x438>
 8005686:	4640      	mov	r0, r8
 8005688:	e66c      	b.n	8005364 <_malloc_r+0x120>
 800568a:	f108 0810 	add.w	r8, r8, #16
 800568e:	e6ca      	b.n	8005426 <_malloc_r+0x1e2>
 8005690:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005694:	d826      	bhi.n	80056e4 <_malloc_r+0x4a0>
 8005696:	0beb      	lsrs	r3, r5, #15
 8005698:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800569c:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 80056a0:	00c1      	lsls	r1, r0, #3
 80056a2:	e614      	b.n	80052ce <_malloc_r+0x8a>
 80056a4:	f04f 0801 	mov.w	r8, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1092      	asrs	r2, r2, #2
 80056ac:	fa08 f202 	lsl.w	r2, r8, r2
 80056b0:	431a      	orrs	r2, r3
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	e7a8      	b.n	8005608 <_malloc_r+0x3c4>
 80056b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ba:	e6dc      	b.n	8005476 <_malloc_r+0x232>
 80056bc:	2a54      	cmp	r2, #84	; 0x54
 80056be:	d829      	bhi.n	8005714 <_malloc_r+0x4d0>
 80056c0:	0b1a      	lsrs	r2, r3, #12
 80056c2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80056c6:	00c9      	lsls	r1, r1, #3
 80056c8:	326e      	adds	r2, #110	; 0x6e
 80056ca:	e78b      	b.n	80055e4 <_malloc_r+0x3a0>
 80056cc:	f3c0 010b 	ubfx	r1, r0, #0, #12
 80056d0:	2900      	cmp	r1, #0
 80056d2:	f47f aebc 	bne.w	800544e <_malloc_r+0x20a>
 80056d6:	eb09 0208 	add.w	r2, r9, r8
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	604a      	str	r2, [r1, #4]
 80056e2:	e6fa      	b.n	80054da <_malloc_r+0x296>
 80056e4:	f240 5254 	movw	r2, #1364	; 0x554
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d81c      	bhi.n	8005726 <_malloc_r+0x4e2>
 80056ec:	0cab      	lsrs	r3, r5, #18
 80056ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80056f2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80056f6:	00c1      	lsls	r1, r0, #3
 80056f8:	e5e9      	b.n	80052ce <_malloc_r+0x8a>
 80056fa:	2301      	movs	r3, #1
 80056fc:	f8cb 3004 	str.w	r3, [fp, #4]
 8005700:	e79b      	b.n	800563a <_malloc_r+0x3f6>
 8005702:	2101      	movs	r1, #1
 8005704:	f04f 0800 	mov.w	r8, #0
 8005708:	e6c8      	b.n	800549c <_malloc_r+0x258>
 800570a:	4a16      	ldr	r2, [pc, #88]	; (8005764 <_malloc_r+0x520>)
 800570c:	6813      	ldr	r3, [r2, #0]
 800570e:	4443      	add	r3, r8
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e69c      	b.n	800544e <_malloc_r+0x20a>
 8005714:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005718:	d814      	bhi.n	8005744 <_malloc_r+0x500>
 800571a:	0bda      	lsrs	r2, r3, #15
 800571c:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8005720:	00c9      	lsls	r1, r1, #3
 8005722:	3277      	adds	r2, #119	; 0x77
 8005724:	e75e      	b.n	80055e4 <_malloc_r+0x3a0>
 8005726:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800572a:	207f      	movs	r0, #127	; 0x7f
 800572c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8005730:	e5cd      	b.n	80052ce <_malloc_r+0x8a>
 8005732:	f104 0108 	add.w	r1, r4, #8
 8005736:	4630      	mov	r0, r6
 8005738:	9201      	str	r2, [sp, #4]
 800573a:	f000 f937 	bl	80059ac <_free_r>
 800573e:	9a01      	ldr	r2, [sp, #4]
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	e6ca      	b.n	80054da <_malloc_r+0x296>
 8005744:	f240 5154 	movw	r1, #1364	; 0x554
 8005748:	428a      	cmp	r2, r1
 800574a:	d805      	bhi.n	8005758 <_malloc_r+0x514>
 800574c:	0c9a      	lsrs	r2, r3, #18
 800574e:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8005752:	00c9      	lsls	r1, r1, #3
 8005754:	327c      	adds	r2, #124	; 0x7c
 8005756:	e745      	b.n	80055e4 <_malloc_r+0x3a0>
 8005758:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800575c:	227e      	movs	r2, #126	; 0x7e
 800575e:	e741      	b.n	80055e4 <_malloc_r+0x3a0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	e785      	b.n	8005670 <_malloc_r+0x42c>
 8005764:	20000c20 	.word	0x20000c20

08005768 <memset>:
 8005768:	b4f0      	push	{r4, r5, r6, r7}
 800576a:	0786      	lsls	r6, r0, #30
 800576c:	d043      	beq.n	80057f6 <memset+0x8e>
 800576e:	1e54      	subs	r4, r2, #1
 8005770:	2a00      	cmp	r2, #0
 8005772:	d03e      	beq.n	80057f2 <memset+0x8a>
 8005774:	b2ca      	uxtb	r2, r1
 8005776:	4603      	mov	r3, r0
 8005778:	e002      	b.n	8005780 <memset+0x18>
 800577a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800577e:	d338      	bcc.n	80057f2 <memset+0x8a>
 8005780:	f803 2b01 	strb.w	r2, [r3], #1
 8005784:	079d      	lsls	r5, r3, #30
 8005786:	d1f8      	bne.n	800577a <memset+0x12>
 8005788:	2c03      	cmp	r4, #3
 800578a:	d92b      	bls.n	80057e4 <memset+0x7c>
 800578c:	b2cd      	uxtb	r5, r1
 800578e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005792:	2c0f      	cmp	r4, #15
 8005794:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005798:	d916      	bls.n	80057c8 <memset+0x60>
 800579a:	f1a4 0710 	sub.w	r7, r4, #16
 800579e:	093f      	lsrs	r7, r7, #4
 80057a0:	f103 0620 	add.w	r6, r3, #32
 80057a4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80057a8:	f103 0210 	add.w	r2, r3, #16
 80057ac:	e942 5504 	strd	r5, r5, [r2, #-16]
 80057b0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80057b4:	3210      	adds	r2, #16
 80057b6:	42b2      	cmp	r2, r6
 80057b8:	d1f8      	bne.n	80057ac <memset+0x44>
 80057ba:	f004 040f 	and.w	r4, r4, #15
 80057be:	3701      	adds	r7, #1
 80057c0:	2c03      	cmp	r4, #3
 80057c2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80057c6:	d90d      	bls.n	80057e4 <memset+0x7c>
 80057c8:	461e      	mov	r6, r3
 80057ca:	4622      	mov	r2, r4
 80057cc:	3a04      	subs	r2, #4
 80057ce:	2a03      	cmp	r2, #3
 80057d0:	f846 5b04 	str.w	r5, [r6], #4
 80057d4:	d8fa      	bhi.n	80057cc <memset+0x64>
 80057d6:	1f22      	subs	r2, r4, #4
 80057d8:	f022 0203 	bic.w	r2, r2, #3
 80057dc:	3204      	adds	r2, #4
 80057de:	4413      	add	r3, r2
 80057e0:	f004 0403 	and.w	r4, r4, #3
 80057e4:	b12c      	cbz	r4, 80057f2 <memset+0x8a>
 80057e6:	b2c9      	uxtb	r1, r1
 80057e8:	441c      	add	r4, r3
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d1fb      	bne.n	80057ea <memset+0x82>
 80057f2:	bcf0      	pop	{r4, r5, r6, r7}
 80057f4:	4770      	bx	lr
 80057f6:	4614      	mov	r4, r2
 80057f8:	4603      	mov	r3, r0
 80057fa:	e7c5      	b.n	8005788 <memset+0x20>

080057fc <__malloc_lock>:
 80057fc:	4801      	ldr	r0, [pc, #4]	; (8005804 <__malloc_lock+0x8>)
 80057fe:	f000 b9c9 	b.w	8005b94 <__retarget_lock_acquire_recursive>
 8005802:	bf00      	nop
 8005804:	20001764 	.word	0x20001764

08005808 <__malloc_unlock>:
 8005808:	4801      	ldr	r0, [pc, #4]	; (8005810 <__malloc_unlock+0x8>)
 800580a:	f000 b9c5 	b.w	8005b98 <__retarget_lock_release_recursive>
 800580e:	bf00      	nop
 8005810:	20001764 	.word	0x20001764

08005814 <_sbrk_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	2300      	movs	r3, #0
 8005818:	4c06      	ldr	r4, [pc, #24]	; (8005834 <_sbrk_r+0x20>)
 800581a:	4605      	mov	r5, r0
 800581c:	4608      	mov	r0, r1
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	f7ff fc38 	bl	8005094 <_sbrk>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d000      	beq.n	800582a <_sbrk_r+0x16>
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0fb      	beq.n	8005828 <_sbrk_r+0x14>
 8005830:	602b      	str	r3, [r5, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20001778 	.word	0x20001778

08005838 <__utoa>:
 8005838:	b4f0      	push	{r4, r5, r6, r7}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	466e      	mov	r6, sp
 800583e:	4617      	mov	r7, r2
 8005840:	f8df c070 	ldr.w	ip, [pc, #112]	; 80058b4 <__utoa+0x7c>
 8005844:	4604      	mov	r4, r0
 8005846:	460d      	mov	r5, r1
 8005848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800584c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800584e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005852:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005854:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8005858:	1ebb      	subs	r3, r7, #2
 800585a:	f846 0b04 	str.w	r0, [r6], #4
 800585e:	2b22      	cmp	r3, #34	; 0x22
 8005860:	7031      	strb	r1, [r6, #0]
 8005862:	d823      	bhi.n	80058ac <__utoa+0x74>
 8005864:	1e69      	subs	r1, r5, #1
 8005866:	4608      	mov	r0, r1
 8005868:	2200      	movs	r2, #0
 800586a:	e000      	b.n	800586e <__utoa+0x36>
 800586c:	461a      	mov	r2, r3
 800586e:	fbb4 f3f7 	udiv	r3, r4, r7
 8005872:	fb07 4413 	mls	r4, r7, r3, r4
 8005876:	ae0a      	add	r6, sp, #40	; 0x28
 8005878:	4434      	add	r4, r6
 800587a:	f814 6c28 	ldrb.w	r6, [r4, #-40]
 800587e:	461c      	mov	r4, r3
 8005880:	f800 6f01 	strb.w	r6, [r0, #1]!
 8005884:	1c53      	adds	r3, r2, #1
 8005886:	2c00      	cmp	r4, #0
 8005888:	d1f0      	bne.n	800586c <__utoa+0x34>
 800588a:	54ec      	strb	r4, [r5, r3]
 800588c:	b152      	cbz	r2, 80058a4 <__utoa+0x6c>
 800588e:	442b      	add	r3, r5
 8005890:	3401      	adds	r4, #1
 8005892:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8005896:	f813 7d01 	ldrb.w	r7, [r3, #-1]!
 800589a:	1b10      	subs	r0, r2, r4
 800589c:	4284      	cmp	r4, r0
 800589e:	700f      	strb	r7, [r1, #0]
 80058a0:	701e      	strb	r6, [r3, #0]
 80058a2:	dbf5      	blt.n	8005890 <__utoa+0x58>
 80058a4:	4628      	mov	r0, r5
 80058a6:	b00a      	add	sp, #40	; 0x28
 80058a8:	bcf0      	pop	{r4, r5, r6, r7}
 80058aa:	4770      	bx	lr
 80058ac:	2000      	movs	r0, #0
 80058ae:	7028      	strb	r0, [r5, #0]
 80058b0:	e7f9      	b.n	80058a6 <__utoa+0x6e>
 80058b2:	bf00      	nop
 80058b4:	08005d78 	.word	0x08005d78

080058b8 <register_fini>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <register_fini+0xc>)
 80058ba:	b113      	cbz	r3, 80058c2 <register_fini+0xa>
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <register_fini+0x10>)
 80058be:	f000 b805 	b.w	80058cc <atexit>
 80058c2:	4770      	bx	lr
 80058c4:	00000000 	.word	0x00000000
 80058c8:	080058d9 	.word	0x080058d9

080058cc <atexit>:
 80058cc:	2300      	movs	r3, #0
 80058ce:	4601      	mov	r1, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 b962 	b.w	8005b9c <__register_exitproc>

080058d8 <__libc_fini_array>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4c0a      	ldr	r4, [pc, #40]	; (8005904 <__libc_fini_array+0x2c>)
 80058dc:	4d0a      	ldr	r5, [pc, #40]	; (8005908 <__libc_fini_array+0x30>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	d00a      	beq.n	80058fa <__libc_fini_array+0x22>
 80058e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80058e8:	3b01      	subs	r3, #1
 80058ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80058ee:	3c01      	subs	r4, #1
 80058f0:	f855 3904 	ldr.w	r3, [r5], #-4
 80058f4:	4798      	blx	r3
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d1f9      	bne.n	80058ee <__libc_fini_array+0x16>
 80058fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058fe:	f000 b9b3 	b.w	8005c68 <_fini>
 8005902:	bf00      	nop
 8005904:	08005dac 	.word	0x08005dac
 8005908:	08005da8 	.word	0x08005da8

0800590c <_malloc_trim_r>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	460c      	mov	r4, r1
 8005910:	4f23      	ldr	r7, [pc, #140]	; (80059a0 <_malloc_trim_r+0x94>)
 8005912:	4606      	mov	r6, r0
 8005914:	f7ff ff72 	bl	80057fc <__malloc_lock>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800591e:	685d      	ldr	r5, [r3, #4]
 8005920:	310f      	adds	r1, #15
 8005922:	f025 0503 	bic.w	r5, r5, #3
 8005926:	4429      	add	r1, r5
 8005928:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800592c:	f021 010f 	bic.w	r1, r1, #15
 8005930:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8005934:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005938:	db07      	blt.n	800594a <_malloc_trim_r+0x3e>
 800593a:	2100      	movs	r1, #0
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff ff69 	bl	8005814 <_sbrk_r>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	442b      	add	r3, r5
 8005946:	4298      	cmp	r0, r3
 8005948:	d004      	beq.n	8005954 <_malloc_trim_r+0x48>
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff ff5c 	bl	8005808 <__malloc_unlock>
 8005950:	2000      	movs	r0, #0
 8005952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005954:	4261      	negs	r1, r4
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ff5c 	bl	8005814 <_sbrk_r>
 800595c:	3001      	adds	r0, #1
 800595e:	d00d      	beq.n	800597c <_malloc_trim_r+0x70>
 8005960:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <_malloc_trim_r+0x98>)
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	1b2d      	subs	r5, r5, r4
 8005968:	f045 0501 	orr.w	r5, r5, #1
 800596c:	4630      	mov	r0, r6
 800596e:	1b09      	subs	r1, r1, r4
 8005970:	6055      	str	r5, [r2, #4]
 8005972:	6019      	str	r1, [r3, #0]
 8005974:	f7ff ff48 	bl	8005808 <__malloc_unlock>
 8005978:	2001      	movs	r0, #1
 800597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597c:	2100      	movs	r1, #0
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ff48 	bl	8005814 <_sbrk_r>
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	1a83      	subs	r3, r0, r2
 8005988:	2b0f      	cmp	r3, #15
 800598a:	ddde      	ble.n	800594a <_malloc_trim_r+0x3e>
 800598c:	4906      	ldr	r1, [pc, #24]	; (80059a8 <_malloc_trim_r+0x9c>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	680c      	ldr	r4, [r1, #0]
 8005994:	4903      	ldr	r1, [pc, #12]	; (80059a4 <_malloc_trim_r+0x98>)
 8005996:	1b00      	subs	r0, r0, r4
 8005998:	6053      	str	r3, [r2, #4]
 800599a:	6008      	str	r0, [r1, #0]
 800599c:	e7d5      	b.n	800594a <_malloc_trim_r+0x3e>
 800599e:	bf00      	nop
 80059a0:	20000438 	.word	0x20000438
 80059a4:	20000c20 	.word	0x20000c20
 80059a8:	20000840 	.word	0x20000840

080059ac <_free_r>:
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d053      	beq.n	8005a58 <_free_r+0xac>
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	460d      	mov	r5, r1
 80059b4:	4606      	mov	r6, r0
 80059b6:	f7ff ff21 	bl	80057fc <__malloc_lock>
 80059ba:	f855 cc04 	ldr.w	ip, [r5, #-4]
 80059be:	4f71      	ldr	r7, [pc, #452]	; (8005b84 <_free_r+0x1d8>)
 80059c0:	f1a5 0108 	sub.w	r1, r5, #8
 80059c4:	f02c 0301 	bic.w	r3, ip, #1
 80059c8:	18ca      	adds	r2, r1, r3
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	6854      	ldr	r4, [r2, #4]
 80059ce:	4290      	cmp	r0, r2
 80059d0:	f024 0403 	bic.w	r4, r4, #3
 80059d4:	d053      	beq.n	8005a7e <_free_r+0xd2>
 80059d6:	f01c 0f01 	tst.w	ip, #1
 80059da:	6054      	str	r4, [r2, #4]
 80059dc:	eb02 0004 	add.w	r0, r2, r4
 80059e0:	d13b      	bne.n	8005a5a <_free_r+0xae>
 80059e2:	f855 cc08 	ldr.w	ip, [r5, #-8]
 80059e6:	6840      	ldr	r0, [r0, #4]
 80059e8:	eba1 010c 	sub.w	r1, r1, ip
 80059ec:	688d      	ldr	r5, [r1, #8]
 80059ee:	f107 0e08 	add.w	lr, r7, #8
 80059f2:	4575      	cmp	r5, lr
 80059f4:	4463      	add	r3, ip
 80059f6:	f000 0001 	and.w	r0, r0, #1
 80059fa:	d075      	beq.n	8005ae8 <_free_r+0x13c>
 80059fc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005a00:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005a04:	f8cc 5008 	str.w	r5, [ip, #8]
 8005a08:	b360      	cbz	r0, 8005a64 <_free_r+0xb8>
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	604a      	str	r2, [r1, #4]
 8005a10:	50cb      	str	r3, [r1, r3]
 8005a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a16:	d350      	bcc.n	8005aba <_free_r+0x10e>
 8005a18:	0a5a      	lsrs	r2, r3, #9
 8005a1a:	2a04      	cmp	r2, #4
 8005a1c:	d870      	bhi.n	8005b00 <_free_r+0x154>
 8005a1e:	099a      	lsrs	r2, r3, #6
 8005a20:	f102 0539 	add.w	r5, r2, #57	; 0x39
 8005a24:	00ed      	lsls	r5, r5, #3
 8005a26:	f102 0038 	add.w	r0, r2, #56	; 0x38
 8005a2a:	197c      	adds	r4, r7, r5
 8005a2c:	597a      	ldr	r2, [r7, r5]
 8005a2e:	3c08      	subs	r4, #8
 8005a30:	4294      	cmp	r4, r2
 8005a32:	d078      	beq.n	8005b26 <_free_r+0x17a>
 8005a34:	6850      	ldr	r0, [r2, #4]
 8005a36:	f020 0003 	bic.w	r0, r0, #3
 8005a3a:	4298      	cmp	r0, r3
 8005a3c:	d971      	bls.n	8005b22 <_free_r+0x176>
 8005a3e:	6892      	ldr	r2, [r2, #8]
 8005a40:	4294      	cmp	r4, r2
 8005a42:	d1f7      	bne.n	8005a34 <_free_r+0x88>
 8005a44:	68e3      	ldr	r3, [r4, #12]
 8005a46:	e9c1 4302 	strd	r4, r3, [r1, #8]
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	6099      	str	r1, [r3, #8]
 8005a4e:	60e1      	str	r1, [r4, #12]
 8005a50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a54:	f7ff bed8 	b.w	8005808 <__malloc_unlock>
 8005a58:	4770      	bx	lr
 8005a5a:	6840      	ldr	r0, [r0, #4]
 8005a5c:	f000 0001 	and.w	r0, r0, #1
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1d2      	bne.n	8005a0a <_free_r+0x5e>
 8005a64:	6890      	ldr	r0, [r2, #8]
 8005a66:	4d48      	ldr	r5, [pc, #288]	; (8005b88 <_free_r+0x1dc>)
 8005a68:	4423      	add	r3, r4
 8005a6a:	42a8      	cmp	r0, r5
 8005a6c:	f043 0401 	orr.w	r4, r3, #1
 8005a70:	d062      	beq.n	8005b38 <_free_r+0x18c>
 8005a72:	68d2      	ldr	r2, [r2, #12]
 8005a74:	60c2      	str	r2, [r0, #12]
 8005a76:	6090      	str	r0, [r2, #8]
 8005a78:	604c      	str	r4, [r1, #4]
 8005a7a:	50cb      	str	r3, [r1, r3]
 8005a7c:	e7c9      	b.n	8005a12 <_free_r+0x66>
 8005a7e:	f01c 0f01 	tst.w	ip, #1
 8005a82:	4423      	add	r3, r4
 8005a84:	d107      	bne.n	8005a96 <_free_r+0xea>
 8005a86:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8005a8a:	1b09      	subs	r1, r1, r4
 8005a8c:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
 8005a90:	4423      	add	r3, r4
 8005a92:	60c2      	str	r2, [r0, #12]
 8005a94:	6090      	str	r0, [r2, #8]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	; (8005b8c <_free_r+0x1e0>)
 8005a98:	f043 0001 	orr.w	r0, r3, #1
 8005a9c:	6812      	ldr	r2, [r2, #0]
 8005a9e:	6048      	str	r0, [r1, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	d804      	bhi.n	8005ab0 <_free_r+0x104>
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <_free_r+0x1e4>)
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	f7ff ff2e 	bl	800590c <_malloc_trim_r>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ab6:	f7ff bea7 	b.w	8005808 <__malloc_unlock>
 8005aba:	2201      	movs	r2, #1
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	687c      	ldr	r4, [r7, #4]
 8005ac0:	1098      	asrs	r0, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4082      	lsls	r2, r0
 8005ac6:	4322      	orrs	r2, r4
 8005ac8:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
 8005acc:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8005ad0:	3808      	subs	r0, #8
 8005ad2:	e9c1 4002 	strd	r4, r0, [r1, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
 8005ade:	60e1      	str	r1, [r4, #12]
 8005ae0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ae4:	f7ff be90 	b.w	8005808 <__malloc_unlock>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d145      	bne.n	8005b78 <_free_r+0x1cc>
 8005aec:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
 8005af0:	4423      	add	r3, r4
 8005af2:	f043 0401 	orr.w	r4, r3, #1
 8005af6:	60c2      	str	r2, [r0, #12]
 8005af8:	6090      	str	r0, [r2, #8]
 8005afa:	604c      	str	r4, [r1, #4]
 8005afc:	50cb      	str	r3, [r1, r3]
 8005afe:	e7d7      	b.n	8005ab0 <_free_r+0x104>
 8005b00:	2a14      	cmp	r2, #20
 8005b02:	d908      	bls.n	8005b16 <_free_r+0x16a>
 8005b04:	2a54      	cmp	r2, #84	; 0x54
 8005b06:	d81e      	bhi.n	8005b46 <_free_r+0x19a>
 8005b08:	0b1a      	lsrs	r2, r3, #12
 8005b0a:	f102 056f 	add.w	r5, r2, #111	; 0x6f
 8005b0e:	00ed      	lsls	r5, r5, #3
 8005b10:	f102 006e 	add.w	r0, r2, #110	; 0x6e
 8005b14:	e789      	b.n	8005a2a <_free_r+0x7e>
 8005b16:	f102 055c 	add.w	r5, r2, #92	; 0x5c
 8005b1a:	00ed      	lsls	r5, r5, #3
 8005b1c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005b20:	e783      	b.n	8005a2a <_free_r+0x7e>
 8005b22:	4614      	mov	r4, r2
 8005b24:	e78e      	b.n	8005a44 <_free_r+0x98>
 8005b26:	2301      	movs	r3, #1
 8005b28:	1082      	asrs	r2, r0, #2
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	fa03 f202 	lsl.w	r2, r3, r2
 8005b30:	4302      	orrs	r2, r0
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	4623      	mov	r3, r4
 8005b36:	e786      	b.n	8005a46 <_free_r+0x9a>
 8005b38:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8005b3c:	e9c1 0002 	strd	r0, r0, [r1, #8]
 8005b40:	604c      	str	r4, [r1, #4]
 8005b42:	50cb      	str	r3, [r1, r3]
 8005b44:	e7b4      	b.n	8005ab0 <_free_r+0x104>
 8005b46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005b4a:	d806      	bhi.n	8005b5a <_free_r+0x1ae>
 8005b4c:	0bda      	lsrs	r2, r3, #15
 8005b4e:	f102 0578 	add.w	r5, r2, #120	; 0x78
 8005b52:	00ed      	lsls	r5, r5, #3
 8005b54:	f102 0077 	add.w	r0, r2, #119	; 0x77
 8005b58:	e767      	b.n	8005a2a <_free_r+0x7e>
 8005b5a:	f240 5054 	movw	r0, #1364	; 0x554
 8005b5e:	4282      	cmp	r2, r0
 8005b60:	d806      	bhi.n	8005b70 <_free_r+0x1c4>
 8005b62:	0c9a      	lsrs	r2, r3, #18
 8005b64:	f102 057d 	add.w	r5, r2, #125	; 0x7d
 8005b68:	00ed      	lsls	r5, r5, #3
 8005b6a:	f102 007c 	add.w	r0, r2, #124	; 0x7c
 8005b6e:	e75c      	b.n	8005a2a <_free_r+0x7e>
 8005b70:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 8005b74:	207e      	movs	r0, #126	; 0x7e
 8005b76:	e758      	b.n	8005a2a <_free_r+0x7e>
 8005b78:	f043 0001 	orr.w	r0, r3, #1
 8005b7c:	6048      	str	r0, [r1, #4]
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e796      	b.n	8005ab0 <_free_r+0x104>
 8005b82:	bf00      	nop
 8005b84:	20000438 	.word	0x20000438
 8005b88:	20000440 	.word	0x20000440
 8005b8c:	20000844 	.word	0x20000844
 8005b90:	20000c50 	.word	0x20000c50

08005b94 <__retarget_lock_acquire_recursive>:
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <__retarget_lock_release_recursive>:
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__register_exitproc>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	4d2b      	ldr	r5, [pc, #172]	; (8005c50 <__register_exitproc+0xb4>)
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	6828      	ldr	r0, [r5, #0]
 8005ba6:	4698      	mov	r8, r3
 8005ba8:	460f      	mov	r7, r1
 8005baa:	4691      	mov	r9, r2
 8005bac:	f7ff fff2 	bl	8005b94 <__retarget_lock_acquire_recursive>
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <__register_exitproc+0xb8>)
 8005bb2:	681c      	ldr	r4, [r3, #0]
 8005bb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d03d      	beq.n	8005c38 <__register_exitproc+0x9c>
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	2a1f      	cmp	r2, #31
 8005bc0:	dc0d      	bgt.n	8005bde <__register_exitproc+0x42>
 8005bc2:	f102 0c01 	add.w	ip, r2, #1
 8005bc6:	bb16      	cbnz	r6, 8005c0e <__register_exitproc+0x72>
 8005bc8:	3202      	adds	r2, #2
 8005bca:	f8c3 c004 	str.w	ip, [r3, #4]
 8005bce:	6828      	ldr	r0, [r5, #0]
 8005bd0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005bd4:	f7ff ffe0 	bl	8005b98 <__retarget_lock_release_recursive>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <__register_exitproc+0xbc>)
 8005be0:	b37b      	cbz	r3, 8005c42 <__register_exitproc+0xa6>
 8005be2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005be6:	f7ff fb25 	bl	8005234 <malloc>
 8005bea:	4603      	mov	r3, r0
 8005bec:	b348      	cbz	r0, 8005c42 <__register_exitproc+0xa6>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8005bf4:	f04f 0c01 	mov.w	ip, #1
 8005bf8:	e9c3 1000 	strd	r1, r0, [r3]
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8005c02:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8005c06:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	d0dc      	beq.n	8005bc8 <__register_exitproc+0x2c>
 8005c0e:	2101      	movs	r1, #1
 8005c10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c14:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8005c18:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8005c1c:	4091      	lsls	r1, r2
 8005c1e:	4308      	orrs	r0, r1
 8005c20:	2e02      	cmp	r6, #2
 8005c22:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8005c26:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8005c2a:	d1cd      	bne.n	8005bc8 <__register_exitproc+0x2c>
 8005c2c:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 8005c30:	4301      	orrs	r1, r0
 8005c32:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8005c36:	e7c7      	b.n	8005bc8 <__register_exitproc+0x2c>
 8005c38:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8005c3c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8005c40:	e7bc      	b.n	8005bbc <__register_exitproc+0x20>
 8005c42:	6828      	ldr	r0, [r5, #0]
 8005c44:	f7ff ffa8 	bl	8005b98 <__retarget_lock_release_recursive>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	e7c5      	b.n	8005bda <__register_exitproc+0x3e>
 8005c4e:	bf00      	nop
 8005c50:	20000848 	.word	0x20000848
 8005c54:	08005d74 	.word	0x08005d74
 8005c58:	08005235 	.word	0x08005235

08005c5c <_init>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr

08005c68 <_fini>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr
