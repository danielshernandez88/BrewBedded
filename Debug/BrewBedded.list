
BrewBedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  0002084c  2**0
                  CONTENTS
  4 .ARM          00000000  080054c8  080054c8  0002084c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c8  080054c8  0002084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000084c  20000000  080054d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  2000084c  08005d20  0002084c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016f4  08005d20  000216f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7aa  00000000  00000000  00020875  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fd2  00000000  00000000  0003e01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  00041ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  00043318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b10e  00000000  00000000  000444b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005f33  00000000  00000000  0004f5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007f  00000000  00000000  000554f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052a4  00000000  00000000  00055570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000084c 	.word	0x2000084c
 800012c:	00000000 	.word	0x00000000
 8000130:	080053d8 	.word	0x080053d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000850 	.word	0x20000850
 800014c:	080053d8 	.word	0x080053d8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_Init+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_Init+0x28>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 fb9b 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000622:	2000      	movs	r0, #0
 8000624:	f004 f8c8 	bl	80047b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f003 ff76 	bl	8004518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e0be      	b.n	80007d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	2b00      	cmp	r3, #0
 8000666:	d109      	bne.n	800067c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f003 ff86 	bl	8004588 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fa81 	bl	8000b84 <ADC_ConversionStop_Disable>
 8000682:	4603      	mov	r3, r0
 8000684:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	2b00      	cmp	r3, #0
 8000690:	f040 8099 	bne.w	80007c6 <HAL_ADC_Init+0x18e>
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b00      	cmp	r3, #0
 8000698:	f040 8095 	bne.w	80007c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006a4:	f023 0302 	bic.w	r3, r3, #2
 80006a8:	f043 0202 	orr.w	r2, r3, #2
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006d0:	d003      	beq.n	80006da <HAL_ADC_Init+0xa2>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <HAL_ADC_Init+0xa8>
 80006da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006de:	e000      	b.n	80006e2 <HAL_ADC_Init+0xaa>
 80006e0:	2300      	movs	r3, #0
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d119      	bne.n	8000724 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d109      	bne.n	800070c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	035a      	lsls	r2, r3, #13
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4313      	orrs	r3, r2
 8000704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	e00b      	b.n	8000724 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000710:	f043 0220 	orr.w	r2, r3, #32
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071c:	f043 0201 	orr.w	r2, r3, #1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	430a      	orrs	r2, r1
 8000736:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <HAL_ADC_Init+0x1a8>)
 8000740:	4013      	ands	r3, r2
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	430b      	orrs	r3, r1
 800074a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000754:	d003      	beq.n	800075e <HAL_ADC_Init+0x126>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d104      	bne.n	8000768 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	3b01      	subs	r3, #1
 8000764:	051b      	lsls	r3, r3, #20
 8000766:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	430a      	orrs	r2, r1
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_ADC_Init+0x1ac>)
 8000784:	4013      	ands	r3, r2
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	429a      	cmp	r2, r3
 800078a:	d10b      	bne.n	80007a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000796:	f023 0303 	bic.w	r3, r3, #3
 800079a:	f043 0201 	orr.w	r2, r3, #1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007a2:	e018      	b.n	80007d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	f023 0312 	bic.w	r3, r3, #18
 80007ac:	f043 0210 	orr.w	r2, r3, #16
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	f043 0201 	orr.w	r2, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007c4:	e007      	b.n	80007d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	f043 0210 	orr.w	r2, r3, #16
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	ffe1f7fd 	.word	0xffe1f7fd
 80007e4:	ff1f0efe 	.word	0xff1f0efe

080007e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	2b20      	cmp	r3, #32
 80007fc:	d140      	bne.n	8000880 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	2b02      	cmp	r3, #2
 800080a:	d139      	bne.n	8000880 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800082e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000832:	d11d      	bne.n	8000870 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000838:	2b00      	cmp	r3, #0
 800083a:	d119      	bne.n	8000870 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0220 	bic.w	r2, r2, #32
 800084a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d105      	bne.n	8000870 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000868:	f043 0201 	orr.w	r2, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f87c 	bl	800096e <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f06f 0212 	mvn.w	r2, #18
 800087e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	2b80      	cmp	r3, #128	; 0x80
 800088c:	d14f      	bne.n	800092e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	2b04      	cmp	r3, #4
 800089a:	d148      	bne.n	800092e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80008be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80008c2:	d012      	beq.n	80008ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d125      	bne.n	800091e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80008dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80008e0:	d11d      	bne.n	800091e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d119      	bne.n	800091e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090e:	2b00      	cmp	r3, #0
 8000910:	d105      	bne.n	800091e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	f043 0201 	orr.w	r2, r3, #1
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 f96a 	bl	8000bf8 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f06f 020c 	mvn.w	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	2b40      	cmp	r3, #64	; 0x40
 800093a:	d114      	bne.n	8000966 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b01      	cmp	r3, #1
 8000948:	d10d      	bne.n	8000966 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f812 	bl	8000980 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f06f 0201 	mvn.w	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
	...

08000994 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d101      	bne.n	80009b4 <HAL_ADC_ConfigChannel+0x20>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e0dc      	b.n	8000b6e <HAL_ADC_ConfigChannel+0x1da>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b06      	cmp	r3, #6
 80009c2:	d81c      	bhi.n	80009fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	3b05      	subs	r3, #5
 80009d6:	221f      	movs	r2, #31
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	4019      	ands	r1, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	3b05      	subs	r3, #5
 80009f0:	fa00 f203 	lsl.w	r2, r0, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
 80009fc:	e03c      	b.n	8000a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d81c      	bhi.n	8000a40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	3b23      	subs	r3, #35	; 0x23
 8000a18:	221f      	movs	r2, #31
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	4019      	ands	r1, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	3b23      	subs	r3, #35	; 0x23
 8000a32:	fa00 f203 	lsl.w	r2, r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3e:	e01b      	b.n	8000a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b41      	subs	r3, #65	; 0x41
 8000a52:	221f      	movs	r2, #31
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4019      	ands	r1, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	3b41      	subs	r3, #65	; 0x41
 8000a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	d91c      	bls.n	8000aba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68d9      	ldr	r1, [r3, #12]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	3b1e      	subs	r3, #30
 8000a92:	2207      	movs	r2, #7
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4019      	ands	r1, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	6898      	ldr	r0, [r3, #8]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3b1e      	subs	r3, #30
 8000aac:	fa00 f203 	lsl.w	r2, r0, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	e019      	b.n	8000aee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6919      	ldr	r1, [r3, #16]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	2207      	movs	r2, #7
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4019      	ands	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6898      	ldr	r0, [r3, #8]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d003      	beq.n	8000afe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000afa:	2b11      	cmp	r3, #17
 8000afc:	d132      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d125      	bne.n	8000b54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d126      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b24:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d11a      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	0c9a      	lsrs	r2, r3, #18
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b44:	e002      	b.n	8000b4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f9      	bne.n	8000b46 <HAL_ADC_ConfigChannel+0x1b2>
 8000b52:	e007      	b.n	8000b64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	f043 0220 	orr.w	r2, r3, #32
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40012400 	.word	0x40012400
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	431bde83 	.word	0x431bde83

08000b84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d127      	bne.n	8000bee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bae:	f001 fe27 	bl	8002800 <HAL_GetTick>
 8000bb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bb4:	e014      	b.n	8000be0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bb6:	f001 fe23 	bl	8002800 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d90d      	bls.n	8000be0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e007      	b.n	8000bf0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d0e3      	beq.n	8000bb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4906      	ldr	r1, [pc, #24]	; (8000c9c <NVIC_EnableIRQ+0x2c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da0b      	bge.n	8000ccc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <NVIC_SetPriority+0x4c>)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	3b04      	subs	r3, #4
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cca:	e009      	b.n	8000ce0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <NVIC_SetPriority+0x50>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff53 	bl	8000c0c <NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff68 	bl	8000c54 <NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff81 	bl	8000ca0 <NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5b 	bl	8000c70 <NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b08b      	sub	sp, #44	; 0x2c
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
 8000de6:	e127      	b.n	8001038 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8116 	bne.w	8001032 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d034      	beq.n	8000e78 <HAL_GPIO_Init+0xb4>
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d80d      	bhi.n	8000e2e <HAL_GPIO_Init+0x6a>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d02b      	beq.n	8000e6e <HAL_GPIO_Init+0xaa>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d804      	bhi.n	8000e24 <HAL_GPIO_Init+0x60>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d031      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d01c      	beq.n	8000e5c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e22:	e048      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d043      	beq.n	8000eb0 <HAL_GPIO_Init+0xec>
 8000e28:	2b11      	cmp	r3, #17
 8000e2a:	d01b      	beq.n	8000e64 <HAL_GPIO_Init+0xa0>
          break;
 8000e2c:	e043      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e2e:	4a87      	ldr	r2, [pc, #540]	; (800104c <HAL_GPIO_Init+0x288>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d026      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
 8000e34:	4a85      	ldr	r2, [pc, #532]	; (800104c <HAL_GPIO_Init+0x288>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d806      	bhi.n	8000e48 <HAL_GPIO_Init+0x84>
 8000e3a:	4a85      	ldr	r2, [pc, #532]	; (8001050 <HAL_GPIO_Init+0x28c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d020      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
 8000e40:	4a84      	ldr	r2, [pc, #528]	; (8001054 <HAL_GPIO_Init+0x290>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01d      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
          break;
 8000e46:	e036      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000e48:	4a83      	ldr	r2, [pc, #524]	; (8001058 <HAL_GPIO_Init+0x294>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
 8000e4e:	4a83      	ldr	r2, [pc, #524]	; (800105c <HAL_GPIO_Init+0x298>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d016      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
 8000e54:	4a82      	ldr	r2, [pc, #520]	; (8001060 <HAL_GPIO_Init+0x29c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0xbe>
          break;
 8000e5a:	e02c      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	623b      	str	r3, [r7, #32]
          break;
 8000e62:	e028      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e023      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	3308      	adds	r3, #8
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e01e      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	330c      	adds	r3, #12
 8000e7e:	623b      	str	r3, [r7, #32]
          break;
 8000e80:	e019      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e012      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	611a      	str	r2, [r3, #16]
          break;
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	615a      	str	r2, [r3, #20]
          break;
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	2bff      	cmp	r3, #255	; 0xff
 8000eba:	d801      	bhi.n	8000ec0 <HAL_GPIO_Init+0xfc>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	e001      	b.n	8000ec4 <HAL_GPIO_Init+0x100>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2bff      	cmp	r3, #255	; 0xff
 8000eca:	d802      	bhi.n	8000ed2 <HAL_GPIO_Init+0x10e>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x114>
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3b08      	subs	r3, #8
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	210f      	movs	r1, #15
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	6a39      	ldr	r1, [r7, #32]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 8096 	beq.w	8001032 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_GPIO_Init+0x2a0>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a56      	ldr	r2, [pc, #344]	; (8001064 <HAL_GPIO_Init+0x2a0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <HAL_GPIO_Init+0x2a0>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000f1e:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_GPIO_Init+0x2a4>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a49      	ldr	r2, [pc, #292]	; (800106c <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1ae>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_GPIO_Init+0x2ac>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1aa>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_GPIO_Init+0x2b0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1a6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a46      	ldr	r2, [pc, #280]	; (8001078 <HAL_GPIO_Init+0x2b4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1a2>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x1b0>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x1b0>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x1b0>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x1b0>
 8000f72:	2300      	movs	r3, #0
 8000f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f84:	4938      	ldr	r1, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x2a4>)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4936      	ldr	r1, [pc, #216]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4931      	ldr	r1, [pc, #196]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	604b      	str	r3, [r1, #4]
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4927      	ldr	r1, [pc, #156]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	608b      	str	r3, [r1, #8]
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	491d      	ldr	r1, [pc, #116]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001006:	4013      	ands	r3, r2
 8001008:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	4918      	ldr	r1, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2b8>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	60cb      	str	r3, [r1, #12]
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4913      	ldr	r1, [pc, #76]	; (800107c <HAL_GPIO_Init+0x2b8>)
 800102e:	4013      	ands	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3301      	adds	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f aed4 	bls.w	8000de8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	; 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	10210000 	.word	0x10210000
 8001050:	10110000 	.word	0x10110000
 8001054:	10120000 	.word	0x10120000
 8001058:	10310000 	.word	0x10310000
 800105c:	10320000 	.word	0x10320000
 8001060:	10220000 	.word	0x10220000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
 80010ba:	4613      	mov	r3, r2
 80010bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ca:	e003      	b.n	80010d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0e7      	b.n	80012ca <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f003 fa7e 	bl	8004610 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	; 0x24
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800112c:	f000 fcb8 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8001130:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a67      	ldr	r2, [pc, #412]	; (80012d4 <HAL_I2C_Init+0x1f4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d807      	bhi.n	800114c <HAL_I2C_Init+0x6c>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4a66      	ldr	r2, [pc, #408]	; (80012d8 <HAL_I2C_Init+0x1f8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	bf94      	ite	ls
 8001144:	2301      	movls	r3, #1
 8001146:	2300      	movhi	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e006      	b.n	800115a <HAL_I2C_Init+0x7a>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_I2C_Init+0x1fc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	bf94      	ite	ls
 8001154:	2301      	movls	r3, #1
 8001156:	2300      	movhi	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0b3      	b.n	80012ca <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_I2C_Init+0x200>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_I2C_Init+0x1f4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d802      	bhi.n	8001186 <HAL_I2C_Init+0xa6>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	e009      	b.n	800119a <HAL_I2C_Init+0xba>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <HAL_I2C_Init+0x204>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	099b      	lsrs	r3, r3, #6
 8001198:	3301      	adds	r3, #1
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_I2C_Init+0x1f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d80d      	bhi.n	80011c6 <HAL_I2C_Init+0xe6>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf38      	it	cc
 80011c2:	2304      	movcc	r3, #4
 80011c4:	e04f      	b.n	8001266 <HAL_I2C_Init+0x186>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d111      	bne.n	80011f2 <HAL_I2C_Init+0x112>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1e59      	subs	r1, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	e012      	b.n	8001218 <HAL_I2C_Init+0x138>
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1e59      	subs	r1, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	fbb1 f3f3 	udiv	r3, r1, r3
 8001208:	3301      	adds	r3, #1
 800120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf0c      	ite	eq
 8001212:	2301      	moveq	r3, #1
 8001214:	2300      	movne	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_Init+0x140>
 800121c:	2301      	movs	r3, #1
 800121e:	e022      	b.n	8001266 <HAL_I2C_Init+0x186>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10e      	bne.n	8001246 <HAL_I2C_Init+0x166>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1e59      	subs	r1, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	fbb1 f3f3 	udiv	r3, r1, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001244:	e00f      	b.n	8001266 <HAL_I2C_Init+0x186>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1e59      	subs	r1, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009a      	lsls	r2, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	fbb1 f3f3 	udiv	r3, r1, r3
 800125c:	3301      	adds	r3, #1
 800125e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69d9      	ldr	r1, [r3, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6919      	ldr	r1, [r3, #16]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6959      	ldr	r1, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699a      	ldr	r2, [r3, #24]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	000186a0 	.word	0x000186a0
 80012d8:	001e847f 	.word	0x001e847f
 80012dc:	003d08ff 	.word	0x003d08ff
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	10624dd3 	.word	0x10624dd3

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8087 	beq.w	8001410 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001302:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b04      	cmp	r3, #4
 800130c:	d00c      	beq.n	8001328 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d112      	bne.n	8001340 <HAL_RCC_OscConfig+0x58>
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d06c      	beq.n	800140e <HAL_RCC_OscConfig+0x126>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d168      	bne.n	800140e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e22d      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x70>
 800134a:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e02e      	b.n	80013b6 <HAL_RCC_OscConfig+0xce>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x92>
 8001360:	4b7a      	ldr	r3, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b77      	ldr	r3, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a76      	ldr	r2, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e01d      	b.n	80013b6 <HAL_RCC_OscConfig+0xce>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0xb6>
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a70      	ldr	r2, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b6e      	ldr	r3, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6d      	ldr	r2, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0xce>
 800139e:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d013      	beq.n	80013e6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f001 fa1f 	bl	8002800 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f001 fa1b 	bl	8002800 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1e1      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xde>
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f001 fa0b 	bl	8002800 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f001 fa07 	bl	8002800 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1cd      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x106>
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d063      	beq.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001428:	4b48      	ldr	r3, [pc, #288]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d11c      	bne.n	800146e <HAL_RCC_OscConfig+0x186>
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x170>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e1a1      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146c:	e03a      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d020      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x268>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f001 f9c0 	bl	8002800 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f001 f9bc 	bl	8002800 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e182      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x264>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4926      	ldr	r1, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x268>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f001 f99f 	bl	8002800 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f001 f99b 	bl	8002800 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e161      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x264>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d039      	beq.n	8001564 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d019      	beq.n	800152c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f001 f97f 	bl	8002800 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f001 f97b 	bl	8002800 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e141      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x264>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fb13 	bl	8001b50 <RCC_Delay>
 800152a:	e01b      	b.n	8001564 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f001 f965 	bl	8002800 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	e00e      	b.n	8001558 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153a:	f001 f961 	bl	8002800 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d907      	bls.n	8001558 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e127      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ea      	bne.n	800153a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x4c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x4c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x4c0>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f001 f923 	bl	8002800 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f001 f91f 	bl	8002800 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0e5      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x4c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x30a>
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x366>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x32c>
 80015fa:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x366>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x34e>
 800161c:	4b61      	ldr	r3, [pc, #388]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a60      	ldr	r2, [pc, #384]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x366>
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f001 f8d3 	bl	8002800 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f001 f8cf 	bl	8002800 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e093      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x376>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f001 f8bd 	bl	8002800 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f001 f8b9 	bl	8002800 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e07d      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d069      	beq.n	800179a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d061      	beq.n	8001796 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d146      	bne.n	8001768 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f001 f88e 	bl	8002800 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f001 f88a 	bl	8002800 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e050      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d108      	bne.n	8001722 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4921      	ldr	r1, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a19      	ldr	r1, [r3, #32]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	430b      	orrs	r3, r1
 8001734:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f001 f85e 	bl	8002800 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f001 f85a 	bl	8002800 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e020      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x460>
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x4c4>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f001 f847 	bl	8002800 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001776:	f001 f843 	bl	8002800 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e009      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_OscConfig+0x4bc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x48e>
 8001794:	e001      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420060 	.word	0x42420060

080017b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017be:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d910      	bls.n	80017ee <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017cc:	4b7a      	ldr	r3, [pc, #488]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 0207 	bic.w	r2, r3, #7
 80017d4:	4978      	ldr	r1, [pc, #480]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017dc:	4b76      	ldr	r3, [pc, #472]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0e0      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a6c      	ldr	r2, [pc, #432]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800180c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001810:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001824:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001828:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4961      	ldr	r1, [pc, #388]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d06a      	beq.n	800191e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001850:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d115      	bne.n	8001888 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0a7      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d107      	bne.n	8001878 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e09b      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e093      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001888:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 0203 	bic.w	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4949      	ldr	r1, [pc, #292]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189a:	f000 ffb1 	bl	8002800 <HAL_GetTick>
 800189e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f000 ffa9 	bl	8002800 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e077      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c0:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_ClockConfig+0xfa>
 80018cc:	e027      	b.n	800191e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d11d      	bne.n	8001912 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f000 ff92 	bl	8002800 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e060      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x128>
 80018fa:	e010      	b.n	800191e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f000 ff80 	bl	8002800 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e04e      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d210      	bcs.n	800194e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	4920      	ldr	r1, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_RCC_ClockConfig+0x208>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e030      	b.n	80019b0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4915      	ldr	r1, [pc, #84]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198c:	f000 f81c 	bl	80019c8 <HAL_RCC_GetSysClockFreq>
 8001990:	4601      	mov	r1, r0
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_ClockConfig+0x20c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_RCC_ClockConfig+0x210>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	fa21 f303 	lsr.w	r3, r1, r3
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_RCC_ClockConfig+0x214>)
 80019a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 ff05 	bl	80047b8 <HAL_InitTick>
  
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	080054ac 	.word	0x080054ac
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c8:	b490      	push	{r4, r7}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d0:	1d3c      	adds	r4, r7, #4
 80019d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x40>
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x46>
 8001a06:	e02d      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a0a:	623b      	str	r3, [r7, #32]
      break;
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c5b      	lsrs	r3, r3, #17
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a40:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a46:	fb02 f203 	mul.w	r2, r2, r3
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e004      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	623b      	str	r3, [r7, #32]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc90      	pop	{r4, r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	080053f0 	.word	0x080053f0
 8001a7c:	08005400 	.word	0x08005400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	007a1200 	.word	0x007a1200
 8001a88:	003d0900 	.word	0x003d0900

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff2 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080054bc 	.word	0x080054bc

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0adb      	lsrs	r3, r3, #11
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080054bc 	.word	0x080054bc

08001af0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_GetClockConfig+0x58>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_GetClockConfig+0x58>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_GetClockConfig+0x58>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_GetClockConfig+0x58>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40022000 	.word	0x40022000

08001b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <RCC_Delay+0x34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <RCC_Delay+0x38>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b6c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <RCC_Delay+0x1c>
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000004 	.word	0x20000004
 8001b88:	10624dd3 	.word	0x10624dd3

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d07d      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f000 fe08 	bl	8002800 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f000 fe04 	bl	8002800 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06d      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02e      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d027      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d014      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f000 fdd3 	bl	8002800 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f000 fdcf 	bl	8002800 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e036      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4917      	ldr	r1, [pc, #92]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	490b      	ldr	r1, [pc, #44]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4904      	ldr	r1, [pc, #16]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420440 	.word	0x42420440

08001cf8 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e01d      	b.n	8001d46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f815 	bl	8001d4e <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 fa4a 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e01d      	b.n	8001de2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f002 fc78 	bl	80046b0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9fc 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d122      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d11b      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f06f 0202 	mvn.w	r2, #2
 8001e16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f9b4 	bl	800219a <HAL_TIM_IC_CaptureCallback>
 8001e32:	e005      	b.n	8001e40 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f9a7 	bl	8002188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f9b6 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d122      	bne.n	8001e9a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d11b      	bne.n	8001e9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0204 	mvn.w	r2, #4
 8001e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f98a 	bl	800219a <HAL_TIM_IC_CaptureCallback>
 8001e86:	e005      	b.n	8001e94 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f97d 	bl	8002188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f98c 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d122      	bne.n	8001eee <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d11b      	bne.n	8001eee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0208 	mvn.w	r2, #8
 8001ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f960 	bl	800219a <HAL_TIM_IC_CaptureCallback>
 8001eda:	e005      	b.n	8001ee8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f953 	bl	8002188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f962 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d122      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d11b      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0210 	mvn.w	r2, #16
 8001f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2208      	movs	r2, #8
 8001f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f936 	bl	800219a <HAL_TIM_IC_CaptureCallback>
 8001f2e:	e005      	b.n	8001f3c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f929 	bl	8002188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f938 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10e      	bne.n	8001f6e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0201 	mvn.w	r2, #1
 8001f66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f002 fabd 	bl	80044e8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d10e      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d107      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fb6e 	bl	8002676 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d107      	bne.n	8001fc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fbe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8fc 	bl	80021be <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d107      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 0220 	mvn.w	r2, #32
 8001fea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fb39 	bl	8002664 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002012:	2302      	movs	r3, #2
 8002014:	e0b4      	b.n	8002180 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	f200 809f 	bhi.w	800216c <HAL_TIM_PWM_ConfigChannel+0x170>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002069 	.word	0x08002069
 8002038:	0800216d 	.word	0x0800216d
 800203c:	0800216d 	.word	0x0800216d
 8002040:	0800216d 	.word	0x0800216d
 8002044:	080020a9 	.word	0x080020a9
 8002048:	0800216d 	.word	0x0800216d
 800204c:	0800216d 	.word	0x0800216d
 8002050:	0800216d 	.word	0x0800216d
 8002054:	080020eb 	.word	0x080020eb
 8002058:	0800216d 	.word	0x0800216d
 800205c:	0800216d 	.word	0x0800216d
 8002060:	0800216d 	.word	0x0800216d
 8002064:	0800212b 	.word	0x0800212b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f914 	bl	800229c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0204 	bic.w	r2, r2, #4
 8002092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	619a      	str	r2, [r3, #24]
    }
    break;
 80020a6:	e062      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f960 	bl	8002374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6999      	ldr	r1, [r3, #24]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	021a      	lsls	r2, r3, #8
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	619a      	str	r2, [r3, #24]
    }
    break;
 80020e8:	e041      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f9af 	bl	8002454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0208 	orr.w	r2, r2, #8
 8002104:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0204 	bic.w	r2, r2, #4
 8002114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	61da      	str	r2, [r3, #28]
    }
    break;
 8002128:	e021      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f9ff 	bl	8002534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002144:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69d9      	ldr	r1, [r3, #28]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	61da      	str	r2, [r3, #28]
    }
    break;
 800216a:	e000      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 800216c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <TIM_Base_SetConfig+0xc0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0x34>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0x34>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a27      	ldr	r2, [pc, #156]	; (8002294 <TIM_Base_SetConfig+0xc4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0x34>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <TIM_Base_SetConfig+0xc8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <TIM_Base_SetConfig+0xc0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_Base_SetConfig+0x66>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d007      	beq.n	8002236 <TIM_Base_SetConfig+0x66>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <TIM_Base_SetConfig+0xc4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_Base_SetConfig+0x66>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <TIM_Base_SetConfig+0xc8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <TIM_Base_SetConfig+0xc0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40000400 	.word	0x40000400
 8002298:	40000800 	.word	0x40000800

0800229c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0201 	bic.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <TIM_OC1_SetConfig+0xd4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10c      	bne.n	800231e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0308 	bic.w	r3, r3, #8
 800230a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a13      	ldr	r2, [pc, #76]	; (8002370 <TIM_OC1_SetConfig+0xd4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	621a      	str	r2, [r3, #32]
}
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40012c00 	.word	0x40012c00

08002374 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f023 0210 	bic.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0320 	bic.w	r3, r3, #32
 80023ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <TIM_OC2_SetConfig+0xdc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10d      	bne.n	80023fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023fa:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <TIM_OC2_SetConfig+0xdc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d113      	bne.n	800242c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800240a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	621a      	str	r2, [r3, #32]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40012c00 	.word	0x40012c00

08002454 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <TIM_OC3_SetConfig+0xdc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10d      	bne.n	80024da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <TIM_OC3_SetConfig+0xdc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00

08002534 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800256e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002576:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800258a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	031b      	lsls	r3, r3, #12
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <TIM_OC4_SetConfig+0xa4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d109      	bne.n	80025b4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00

080025dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e032      	b.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002612:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002634:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <TM_DELAY_Init+0x58>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <TM_DELAY_Init+0x58>)
 8002694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002698:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <TM_DELAY_Init+0x58>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <TM_DELAY_Init+0x58>)
 80026a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a4:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 80026ca:	bf00      	nop
	__ASM volatile ("NOP");
 80026cc:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <TM_DELAY_Init+0x5c>)
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	e000edf0 	.word	0xe000edf0
 80026e4:	e0001000 	.word	0xe0001000

080026e8 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80026fa:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_IncTick+0x100>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_IncTick+0x100>)
 8002702:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8002704:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <HAL_IncTick+0x104>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_IncTick+0x22>
		TM_Time2--;
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_IncTick+0x104>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3b01      	subs	r3, #1
 8002712:	4a39      	ldr	r2, [pc, #228]	; (80027f8 <HAL_IncTick+0x104>)
 8002714:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	e05f      	b.n	80027dc <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4a37      	ldr	r2, [pc, #220]	; (80027fc <HAL_IncTick+0x108>)
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	685b      	ldr	r3, [r3, #4]
		if (
 8002726:	2b00      	cmp	r3, #0
 8002728:	d055      	beq.n	80027d6 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4a33      	ldr	r2, [pc, #204]	; (80027fc <HAL_IncTick+0x108>)
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d04a      	beq.n	80027d6 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4a2e      	ldr	r2, [pc, #184]	; (80027fc <HAL_IncTick+0x108>)
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_IncTick+0x108>)
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	3a01      	subs	r2, #1
 800275e:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_IncTick+0x108>)
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d132      	bne.n	80027d6 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_IncTick+0x108>)
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	491f      	ldr	r1, [pc, #124]	; (80027fc <HAL_IncTick+0x108>)
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	6858      	ldr	r0, [r3, #4]
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	491c      	ldr	r1, [pc, #112]	; (80027fc <HAL_IncTick+0x108>)
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4619      	mov	r1, r3
 8002794:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_IncTick+0x108>)
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_IncTick+0x108>)
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	6852      	ldr	r2, [r2, #4]
 80027ac:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_IncTick+0x108>)
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <HAL_IncTick+0x108>)
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	7813      	ldrb	r3, [r2, #0]
 80027d0:	f36f 0341 	bfc	r3, #1, #1
 80027d4:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	3301      	adds	r3, #1
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_IncTick+0x108>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d39a      	bcc.n	800271c <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80027e6:	f7ff ff7f 	bl	80026e8 <TM_DELAY_1msHandler>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000086c 	.word	0x2000086c
 80027f8:	20000868 	.word	0x20000868
 80027fc:	20000870 	.word	0x20000870

08002800 <HAL_GetTick>:
			}
		}
	}
}

uint32_t HAL_GetTick(void) {
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <HAL_GetTick+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	2000086c 	.word	0x2000086c

08002814 <TM_DS18B20_StartAll>:
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
	
	return 1;
}

void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	TM_OneWire_Reset(OneWire);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fa05 	bl	8002c2c <TM_OneWire_Reset>
	/* Skip rom */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002822:	21cc      	movs	r1, #204	; 0xcc
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa87 	bl	8002d38 <TM_OneWire_WriteByte>
	/* Start conversion on all connected devices */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800282a:	2144      	movs	r1, #68	; 0x44
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fa83 	bl	8002d38 <TM_OneWire_WriteByte>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <TM_DS18B20_Read>:

uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b08b      	sub	sp, #44	; 0x2c
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!TM_DS18B20_Is(ROM)) {
 8002852:	68b8      	ldr	r0, [r7, #8]
 8002854:	f000 f966 	bl	8002b24 <TM_DS18B20_Is>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <TM_DS18B20_Read+0x26>
		return 0;
 800285e:	2300      	movs	r3, #0
 8002860:	e0d2      	b.n	8002a08 <TM_DS18B20_Read+0x1cc>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!TM_OneWire_ReadBit(OneWire)) {
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa3e 	bl	8002ce4 <TM_OneWire_ReadBit>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <TM_DS18B20_Read+0x36>
		/* Conversion is not finished yet */
		return 0; 
 800286e:	2300      	movs	r3, #0
 8002870:	e0ca      	b.n	8002a08 <TM_DS18B20_Read+0x1cc>
	}

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f9da 	bl	8002c2c <TM_OneWire_Reset>
	/* Select ROM number */
	//TM_OneWire_SelectWithPointer(OneWire, ROM);
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002878:	21cc      	movs	r1, #204	; 0xcc
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa5c 	bl	8002d38 <TM_OneWire_WriteByte>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002880:	21be      	movs	r1, #190	; 0xbe
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa58 	bl	8002d38 <TM_OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) {
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e00d      	b.n	80028aa <TM_DS18B20_Read+0x6e>
		/* Read byte by byte */
		data[i] = TM_OneWire_ReadByte(OneWire);
 800288e:	7ffc      	ldrb	r4, [r7, #31]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa6e 	bl	8002d72 <TM_OneWire_ReadByte>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289e:	4423      	add	r3, r4
 80028a0:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	3301      	adds	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]
 80028aa:	7ffb      	ldrb	r3, [r7, #31]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d9ee      	bls.n	800288e <TM_DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = TM_OneWire_CRC8(data, 8);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2108      	movs	r1, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fb9d 	bl	8002ff6 <TM_OneWire_CRC8>
 80028bc:	4603      	mov	r3, r0
 80028be:	77bb      	strb	r3, [r7, #30]
		/* CRC invalid */
		//return 0;
	//}
	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80028c0:	7d3b      	ldrb	r3, [r7, #20]
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	7d7b      	ldrb	r3, [r7, #21]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9ab 	bl	8002c2c <TM_OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 80028d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da05      	bge.n	80028ea <TM_DS18B20_Read+0xae>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80028de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028e0:	425b      	negs	r3, r3
 80028e2:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80028ea:	7e3b      	ldrb	r3, [r7, #24]
 80028ec:	115b      	asrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3309      	adds	r3, #9
 80028f8:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80028fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	b25b      	sxtb	r3, r3
 800290e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002912:	b25a      	sxtb	r2, r3
 8002914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002918:	4313      	orrs	r3, r2
 800291a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) {
 800291e:	7f7b      	ldrb	r3, [r7, #29]
 8002920:	3b09      	subs	r3, #9
 8002922:	2b03      	cmp	r3, #3
 8002924:	d850      	bhi.n	80029c8 <TM_DS18B20_Read+0x18c>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <TM_DS18B20_Read+0xf0>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002961 	.word	0x08002961
 8002934:	08002985 	.word	0x08002985
 8002938:	080029a9 	.word	0x080029a9
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 800293c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	b29b      	uxth	r3, r3
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fcbc 	bl	80002c4 <__aeabi_i2f>
 800294c:	4603      	mov	r3, r0
 800294e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002950:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002954:	6a38      	ldr	r0, [r7, #32]
 8002956:	f7fd fd09 	bl	800036c <__aeabi_fmul>
 800295a:	4603      	mov	r3, r0
 800295c:	623b      	str	r3, [r7, #32]
		} break;
 800295e:	e038      	b.n	80029d2 <TM_DS18B20_Read+0x196>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 8002960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	b29b      	uxth	r3, r3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fcaa 	bl	80002c4 <__aeabi_i2f>
 8002970:	4603      	mov	r3, r0
 8002972:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002974:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002978:	6a38      	ldr	r0, [r7, #32]
 800297a:	f7fd fcf7 	bl	800036c <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	623b      	str	r3, [r7, #32]
		} break;
 8002982:	e026      	b.n	80029d2 <TM_DS18B20_Read+0x196>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 8002984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fc98 	bl	80002c4 <__aeabi_i2f>
 8002994:	4603      	mov	r3, r0
 8002996:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002998:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800299c:	6a38      	ldr	r0, [r7, #32]
 800299e:	f7fd fce5 	bl	800036c <__aeabi_fmul>
 80029a2:	4603      	mov	r3, r0
 80029a4:	623b      	str	r3, [r7, #32]
		} break;
 80029a6:	e014      	b.n	80029d2 <TM_DS18B20_Read+0x196>
		case 12: {
			decimal = temperature & 0x0F;
 80029a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fc88 	bl	80002c4 <__aeabi_i2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80029b8:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80029bc:	6a38      	ldr	r0, [r7, #32]
 80029be:	f7fd fcd5 	bl	800036c <__aeabi_fmul>
 80029c2:	4603      	mov	r3, r0
 80029c4:	623b      	str	r3, [r7, #32]
		} break;
 80029c6:	e004      	b.n	80029d2 <TM_DS18B20_Read+0x196>
		default: {
			decimal = 0xFF;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <TM_DS18B20_Read+0x1d4>)
 80029ca:	623b      	str	r3, [r7, #32]
			digit = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80029d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fc74 	bl	80002c4 <__aeabi_i2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	6a38      	ldr	r0, [r7, #32]
 80029e2:	f7fd fbbb 	bl	800015c <__addsf3>
 80029e6:	4603      	mov	r3, r0
 80029e8:	623b      	str	r3, [r7, #32]
	if (minus) {
 80029ea:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <TM_DS18B20_Read+0x1c4>
		decimal = 0 - decimal;
 80029f2:	6a39      	ldr	r1, [r7, #32]
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f7fd fbae 	bl	8000158 <__aeabi_fsub>
 80029fc:	4603      	mov	r3, r0
 80029fe:	623b      	str	r3, [r7, #32]
	}
	
	/* Set to pointer */
	*destination = decimal;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return 1;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	372c      	adds	r7, #44	; 0x2c
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	437f0000 	.word	0x437f0000

08002a14 <TM_DS18B20_SetResolution>:
	
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!TM_DS18B20_Is(ROM)) {
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f000 f87e 	bl	8002b24 <TM_DS18B20_Is>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <TM_DS18B20_SetResolution+0x1e>
		return 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e074      	b.n	8002b1c <TM_DS18B20_SetResolution+0x108>
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8fa 	bl	8002c2c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 faa2 	bl	8002f84 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002a40:	21be      	movs	r1, #190	; 0xbe
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f978 	bl	8002d38 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f992 	bl	8002d72 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f98f 	bl	8002d72 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f98c 	bl	8002d72 <TM_OneWire_ReadByte>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75bb      	strb	r3, [r7, #22]
	tl = TM_OneWire_ReadByte(OneWire);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f987 	bl	8002d72 <TM_OneWire_ReadByte>
 8002a64:	4603      	mov	r3, r0
 8002a66:	757b      	strb	r3, [r7, #21]
	conf = TM_OneWire_ReadByte(OneWire);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f982 	bl	8002d72 <TM_OneWire_ReadByte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d108      	bne.n	8002a8a <TM_DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	75fb      	strb	r3, [r7, #23]
 8002a88:	e022      	b.n	8002ad0 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d108      	bne.n	8002aa2 <TM_DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a96:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	75fb      	strb	r3, [r7, #23]
 8002aa0:	e016      	b.n	8002ad0 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	2b0b      	cmp	r3, #11
 8002aa6:	d108      	bne.n	8002aba <TM_DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aae:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	f023 0320 	bic.w	r3, r3, #32
 8002ab6:	75fb      	strb	r3, [r7, #23]
 8002ab8:	e00a      	b.n	8002ad0 <TM_DS18B20_SetResolution+0xbc>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d107      	bne.n	8002ad0 <TM_DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f8ab 	bl	8002c2c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa53 	bl	8002f84 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002ade:	214e      	movs	r1, #78	; 0x4e
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f929 	bl	8002d38 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002ae6:	7dbb      	ldrb	r3, [r7, #22]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f924 	bl	8002d38 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002af0:	7d7b      	ldrb	r3, [r7, #21]
 8002af2:	4619      	mov	r1, r3
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f91f 	bl	8002d38 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	4619      	mov	r1, r3
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f91a 	bl	8002d38 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f891 	bl	8002c2c <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fa39 	bl	8002f84 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002b12:	2148      	movs	r1, #72	; 0x48
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f90f 	bl	8002d38 <TM_OneWire_WriteByte>
	
	return 1;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <TM_DS18B20_Is>:

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b28      	cmp	r3, #40	; 0x28
 8002b32:	d101      	bne.n	8002b38 <TM_DS18B20_Is+0x14>
		return 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <TM_DS18B20_Is+0x16>
	}
	return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <TM_DS18B20_AllDone>:
uint8_t TM_DS18B20_AlarmSearch(TM_OneWire_t* OneWire) {
	/* Start alarm search */
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8c9 	bl	8002ce4 <TM_OneWire_ReadBit>
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <Delay+0x3c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002b6a:	f7fe ff8f 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <Delay+0x40>)
 8002b72:	fba3 2302 	umull	r2, r3, r3, r2
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002b80:	bf00      	nop
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <Delay+0x3c>)
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d3f8      	bcc.n	8002b82 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	e0001000 	.word	0xe0001000
 8002b9c:	431bde83 	.word	0x431bde83

08002ba0 <gpio_ds18b20_outputMode>:
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_onewire.h"

void gpio_ds18b20_outputMode(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DS18B20_OutputStruct;

	GPIO_DS18B20_OutputStruct.Pin = ds18b20_data_Pin;
 8002ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002baa:	603b      	str	r3, [r7, #0]
	GPIO_DS18B20_OutputStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	607b      	str	r3, [r7, #4]
	GPIO_DS18B20_OutputStruct.Pull = GPIO_PULLUP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
	GPIO_DS18B20_OutputStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_DS18B20_OutputStruct);
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <gpio_ds18b20_outputMode+0x2c>)
 8002bbe:	f7fe f901 	bl	8000dc4 <HAL_GPIO_Init>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40010800 	.word	0x40010800

08002bd0 <gpio_ds18b20_inputMode>:


void gpio_ds18b20_inputMode(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DS18B20_InputStruct;

	GPIO_DS18B20_InputStruct.Pin = ds18b20_data_Pin;
 8002bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bda:	603b      	str	r3, [r7, #0]
	GPIO_DS18B20_InputStruct.Mode = GPIO_MODE_INPUT;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
	GPIO_DS18B20_InputStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
	GPIO_DS18B20_InputStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002be4:	2301      	movs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_DS18B20_InputStruct);
 8002be8:	463b      	mov	r3, r7
 8002bea:	4619      	mov	r1, r3
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <gpio_ds18b20_inputMode+0x2c>)
 8002bee:	f7fe f8e9 	bl	8000dc4 <HAL_GPIO_Init>
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40010800 	.word	0x40010800

08002c00 <TM_OneWire_Init>:

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8002c0e:	f7ff fd3b 	bl	8002688 <TM_DELAY_Init>

	/* Init GPIO pin */
	//TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
	gpio_ds18b20_outputMode();
 8002c12:	f7ff ffc5 	bl	8002ba0 <gpio_ds18b20_outputMode>

	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	809a      	strh	r2, [r3, #4]
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW();
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c3a:	480f      	ldr	r0, [pc, #60]	; (8002c78 <TM_OneWire_Reset+0x4c>)
 8002c3c:	f7fe fa37 	bl	80010ae <HAL_GPIO_WritePin>
	ONEWIRE_OUTPUT();
 8002c40:	f7ff ffae 	bl	8002ba0 <gpio_ds18b20_outputMode>
	ONEWIRE_DELAY(480);
 8002c44:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002c48:	f7ff ff88 	bl	8002b5c <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT();
 8002c4c:	f7ff ffc0 	bl	8002bd0 <gpio_ds18b20_inputMode>
	ONEWIRE_DELAY(70);
 8002c50:	2046      	movs	r0, #70	; 0x46
 8002c52:	f7ff ff83 	bl	8002b5c <Delay>
	
	/* Check bit value */
	i = HAL_GPIO_ReadPin(ds18b20_data_GPIO_Port,ds18b20_data_Pin);
 8002c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <TM_OneWire_Reset+0x4c>)
 8002c5c:	f7fe fa10 	bl	8001080 <HAL_GPIO_ReadPin>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8002c64:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002c68:	f7ff ff78 	bl	8002b5c <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40010800 	.word	0x40010800

08002c7c <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <TM_OneWire_WriteBit+0x38>
		/* Set line low */
		ONEWIRE_LOW();
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c94:	4812      	ldr	r0, [pc, #72]	; (8002ce0 <TM_OneWire_WriteBit+0x64>)
 8002c96:	f7fe fa0a 	bl	80010ae <HAL_GPIO_WritePin>
		ONEWIRE_OUTPUT();
 8002c9a:	f7ff ff81 	bl	8002ba0 <gpio_ds18b20_outputMode>
		ONEWIRE_DELAY(10);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f7ff ff5c 	bl	8002b5c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT();
 8002ca4:	f7ff ff94 	bl	8002bd0 <gpio_ds18b20_inputMode>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8002ca8:	2037      	movs	r0, #55	; 0x37
 8002caa:	f7ff ff57 	bl	8002b5c <Delay>
		ONEWIRE_INPUT();
 8002cae:	f7ff ff8f 	bl	8002bd0 <gpio_ds18b20_inputMode>
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT();
	}
}
 8002cb2:	e011      	b.n	8002cd8 <TM_OneWire_WriteBit+0x5c>
		ONEWIRE_LOW();
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cba:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <TM_OneWire_WriteBit+0x64>)
 8002cbc:	f7fe f9f7 	bl	80010ae <HAL_GPIO_WritePin>
		ONEWIRE_OUTPUT();
 8002cc0:	f7ff ff6e 	bl	8002ba0 <gpio_ds18b20_outputMode>
		ONEWIRE_DELAY(65);
 8002cc4:	2041      	movs	r0, #65	; 0x41
 8002cc6:	f7ff ff49 	bl	8002b5c <Delay>
		ONEWIRE_INPUT();
 8002cca:	f7ff ff81 	bl	8002bd0 <gpio_ds18b20_inputMode>
		ONEWIRE_DELAY(5);
 8002cce:	2005      	movs	r0, #5
 8002cd0:	f7ff ff44 	bl	8002b5c <Delay>
		ONEWIRE_INPUT();
 8002cd4:	f7ff ff7c 	bl	8002bd0 <gpio_ds18b20_inputMode>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40010800 	.word	0x40010800

08002ce4 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW();
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf6:	480f      	ldr	r0, [pc, #60]	; (8002d34 <TM_OneWire_ReadBit+0x50>)
 8002cf8:	f7fe f9d9 	bl	80010ae <HAL_GPIO_WritePin>
	ONEWIRE_OUTPUT();
 8002cfc:	f7ff ff50 	bl	8002ba0 <gpio_ds18b20_outputMode>
	ONEWIRE_DELAY(6); /*3*/
 8002d00:	2006      	movs	r0, #6
 8002d02:	f7ff ff2b 	bl	8002b5c <Delay>
	
	/* Release line */
	ONEWIRE_INPUT();
 8002d06:	f7ff ff63 	bl	8002bd0 <gpio_ds18b20_inputMode>
	ONEWIRE_DELAY(10); /*10*/
 8002d0a:	200a      	movs	r0, #10
 8002d0c:	f7ff ff26 	bl	8002b5c <Delay>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(ds18b20_data_GPIO_Port,ds18b20_data_Pin)) {
 8002d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <TM_OneWire_ReadBit+0x50>)
 8002d16:	f7fe f9b3 	bl	8001080 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <TM_OneWire_ReadBit+0x40>
		/* Bit is HIGH */
		bit = 1;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(100); /*50*/
 8002d24:	2064      	movs	r0, #100	; 0x64
 8002d26:	f7ff ff19 	bl	8002b5c <Delay>
	
	/* Return bit value */
	return bit;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40010800 	.word	0x40010800

08002d38 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002d44:	2308      	movs	r3, #8
 8002d46:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8002d48:	e00a      	b.n	8002d60 <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff91 	bl	8002c7c <TM_OneWire_WriteBit>
		byte >>= 1;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	73fa      	strb	r2, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ef      	bne.n	8002d4a <TM_OneWire_WriteByte+0x12>
	}
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002d82:	e00d      	b.n	8002da0 <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 8002d84:	7bbb      	ldrb	r3, [r7, #14]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffaa 	bl	8002ce4 <TM_OneWire_ReadBit>
 8002d90:	4603      	mov	r3, r0
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	b25a      	sxtb	r2, r3
 8002d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	73fa      	strb	r2, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ec      	bne.n	8002d84 <TM_OneWire_ReadByte+0x12>
	}
	
	return byte;
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t* OneWireStruct) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f809 	bl	8002dd4 <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002dc2:	21f0      	movs	r1, #240	; 0xf0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f817 	bl	8002df8 <TM_OneWire_Search>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <TM_OneWire_ResetSearch>:
uint8_t TM_OneWire_Next(TM_OneWire_t* OneWireStruct) {
   /* Leave the search state alone */
   return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
}

void TM_OneWire_ResetSearch(TM_OneWire_t* OneWireStruct) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	71da      	strb	r2, [r3, #7]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	733b      	strb	r3, [r7, #12]

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7a1b      	ldrb	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 809a 	bne.w	8002f56 <TM_OneWire_Search+0x15e>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff02 	bl	8002c2c <TM_OneWire_Reset>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	71da      	strb	r2, [r3, #7]
			return 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e09b      	b.n	8002f7c <TM_OneWire_Search+0x184>
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff75 	bl	8002d38 <TM_OneWire_WriteByte>

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ff48 	bl	8002ce4 <TM_OneWire_ReadBit>
 8002e54:	4603      	mov	r3, r0
 8002e56:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff43 	bl	8002ce4 <TM_OneWire_ReadBit>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	723b      	strb	r3, [r7, #8]

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8002e62:	7a7b      	ldrb	r3, [r7, #9]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <TM_OneWire_Search+0x76>
 8002e68:	7a3b      	ldrb	r3, [r7, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d064      	beq.n	8002f38 <TM_OneWire_Search+0x140>
				break;
			} else {
				/* All devices coupled have 0 or 1 */
				if (id_bit != cmp_id_bit) {
 8002e6e:	7a7a      	ldrb	r2, [r7, #9]
 8002e70:	7a3b      	ldrb	r3, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d002      	beq.n	8002e7c <TM_OneWire_Search+0x84>
					/* Bit write value for search */
					search_direction = id_bit;
 8002e76:	7a7b      	ldrb	r3, [r7, #9]
 8002e78:	72bb      	strb	r3, [r7, #10]
 8002e7a:	e026      	b.n	8002eca <TM_OneWire_Search+0xd2>
				} else {
					/* If this discrepancy is before the Last Discrepancy on a previous next then pick the same as last time */
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	799b      	ldrb	r3, [r3, #6]
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20d      	bcs.n	8002ea2 <TM_OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002e86:	7b7b      	ldrb	r3, [r7, #13]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	7a5a      	ldrb	r2, [r3, #9]
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	4013      	ands	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	72bb      	strb	r3, [r7, #10]
 8002ea0:	e008      	b.n	8002eb4 <TM_OneWire_Search+0xbc>
					} else {
						/* If equal to last pick 1, if not then pick 0 */
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	799b      	ldrb	r3, [r3, #6]
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	72bb      	strb	r3, [r7, #10]
					}
					
					/* If 0 was picked then record its position in LastZero */
					if (search_direction == 0) {
 8002eb4:	7abb      	ldrb	r3, [r7, #10]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	73bb      	strb	r3, [r7, #14]

						/* Check for Last discrepancy in family */
						if (last_zero < 9) {
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d802      	bhi.n	8002eca <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7bba      	ldrb	r2, [r7, #14]
 8002ec8:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				/* Set or clear the bit in the ROM byte rom_byte_number with mask rom_byte_mask */
				if (search_direction == 1) {
 8002eca:	7abb      	ldrb	r3, [r7, #10]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10c      	bne.n	8002eea <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002ed0:	7b7b      	ldrb	r3, [r7, #13]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	7a59      	ldrb	r1, [r3, #9]
 8002ed8:	7b7b      	ldrb	r3, [r7, #13]
 8002eda:	7afa      	ldrb	r2, [r7, #11]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	b2d1      	uxtb	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	725a      	strb	r2, [r3, #9]
 8002ee8:	e010      	b.n	8002f0c <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002eea:	7b7b      	ldrb	r3, [r7, #13]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	7a5b      	ldrb	r3, [r3, #9]
 8002ef2:	b25a      	sxtb	r2, r3
 8002ef4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	4013      	ands	r3, r2
 8002efe:	b25a      	sxtb	r2, r3
 8002f00:	7b7b      	ldrb	r3, [r7, #13]
 8002f02:	b2d1      	uxtb	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	460a      	mov	r2, r1
 8002f0a:	725a      	strb	r2, [r3, #9]
				}
				
				/* Serial number search direction write bit */
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8002f0c:	7abb      	ldrb	r3, [r7, #10]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff feb3 	bl	8002c7c <TM_OneWire_WriteBit>

				/* Increment the byte counter id_bit_number and shift the mask rom_byte_mask */
				id_bit_number++;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	72fb      	strb	r3, [r7, #11]

				/* If the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask */
				if (rom_byte_mask == 0) {
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <TM_OneWire_Search+0x13a>
					rom_byte_number++;
 8002f28:	7b7b      	ldrb	r3, [r7, #13]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	72fb      	strb	r3, [r7, #11]
				}
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);
 8002f32:	7b7b      	ldrb	r3, [r7, #13]
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d98a      	bls.n	8002e4e <TM_OneWire_Search+0x56>

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d90b      	bls.n	8002f56 <TM_OneWire_Search+0x15e>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7bba      	ldrb	r2, [r7, #14]
 8002f42:	719a      	strb	r2, [r3, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	733b      	strb	r3, [r7, #12]
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8002f56:	7b3b      	ldrb	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <TM_OneWire_Search+0x16c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7a5b      	ldrb	r3, [r3, #9]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8002f7a:	7b3b      	ldrb	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8002f8e:	2155      	movs	r1, #85	; 0x55
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fed1 	bl	8002d38 <TM_OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e00a      	b.n	8002fb2 <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fec6 	bl	8002d38 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d9f1      	bls.n	8002f9c <TM_OneWire_SelectWithPointer+0x18>
	}	
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e00a      	b.n	8002fe6 <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	440b      	add	r3, r1
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	440a      	add	r2, r1
 8002fdc:	7a52      	ldrb	r2, [r2, #9]
 8002fde:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d9f1      	bls.n	8002fd0 <TM_OneWire_GetFullROM+0x10>
	}
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8003006:	e022      	b.n	800304e <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003012:	2308      	movs	r3, #8
 8003014:	737b      	strb	r3, [r7, #13]
 8003016:	e017      	b.n	8003048 <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	7bbb      	ldrb	r3, [r7, #14]
 800301c:	4053      	eors	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 800302c:	7b3b      	ldrb	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d004      	beq.n	800303c <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003038:	43db      	mvns	r3, r3
 800303a:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 800303c:	7bbb      	ldrb	r3, [r7, #14]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003042:	7b7b      	ldrb	r3, [r7, #13]
 8003044:	3b01      	subs	r3, #1
 8003046:	737b      	strb	r3, [r7, #13]
 8003048:	7b7b      	ldrb	r3, [r7, #13]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e4      	bne.n	8003018 <TM_OneWire_CRC8+0x22>
	while (len--) {
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	70fa      	strb	r2, [r7, #3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1d7      	bne.n	8003008 <TM_OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003076:	2b84      	cmp	r3, #132	; 0x84
 8003078:	d005      	beq.n	8003086 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800307a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	3303      	adds	r3, #3
 8003084:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003096:	f000 fa7f 	bl	8003598 <vTaskStartScheduler>
  
  return osOK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}

080030a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685c      	ldr	r4, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681d      	ldr	r5, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691e      	ldr	r6, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ffd1 	bl	8003064 <makeFreeRtosPriority>
 80030c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	9100      	str	r1, [sp, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4632      	mov	r2, r6
 80030d6:	4629      	mov	r1, r5
 80030d8:	4620      	mov	r0, r4
 80030da:	f000 f8b5 	bl	8003248 <xTaskCreateStatic>
 80030de:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f103 0208 	add.w	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003102:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f103 0208 	add.w	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f103 0208 	add.w	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e00c      	b.n	80031c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3308      	adds	r3, #8
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e002      	b.n	80031b4 <vListInsert+0x2e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d2f6      	bcs.n	80031ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	601a      	str	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6852      	ldr	r2, [r2, #4]
 8003216:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d103      	bne.n	800322a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af04      	add	r7, sp, #16
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e7fe      	b.n	800326e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <xTaskCreateStatic+0x42>
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e7fe      	b.n	8003288 <xTaskCreateStatic+0x40>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01a      	beq.n	80032c6 <xTaskCreateStatic+0x7e>
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d017      	beq.n	80032c6 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032a0:	2300      	movs	r3, #0
 80032a2:	9303      	str	r3, [sp, #12]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	f107 0310 	add.w	r3, r7, #16
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f80b 	bl	80032d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032be:	69f8      	ldr	r0, [r7, #28]
 80032c0:	f000 f886 	bl	80033d0 <prvAddNewTaskToReadyList>
 80032c4:	e001      	b.n	80032ca <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80032ca:	693b      	ldr	r3, [r7, #16]
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	3b01      	subs	r3, #1
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <prvInitialiseNewTask+0x46>
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e7fe      	b.n	8003318 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e012      	b.n	8003346 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	7819      	ldrb	r1, [r3, #0]
 8003328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	3334      	adds	r3, #52	; 0x34
 8003330:	460a      	mov	r2, r1
 8003332:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3301      	adds	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	2b0f      	cmp	r3, #15
 800334a:	d9e9      	bls.n	8003320 <prvInitialiseNewTask+0x4c>
 800334c:	e000      	b.n	8003350 <prvInitialiseNewTask+0x7c>
		{
			break;
 800334e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	2b06      	cmp	r3, #6
 800335c:	d901      	bls.n	8003362 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800335e:	2306      	movs	r3, #6
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2200      	movs	r2, #0
 8003372:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	3304      	adds	r3, #4
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fed5 	bl	8003128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	3318      	adds	r3, #24
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fed0 	bl	8003128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	f1c3 0207 	rsb	r2, r3, #7
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	69b8      	ldr	r0, [r7, #24]
 80033b2:	f000 fc45 	bl	8003c40 <pxPortInitialiseStack>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c8:	bf00      	nop
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033d8:	f000 fd04 	bl	8003de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <prvAddNewTaskToReadyList+0xb8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d110      	bne.n	800341e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033fc:	f000 fb10 	bl	8003a20 <prvInitialiseTaskLists>
 8003400:	e00d      	b.n	800341e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <prvAddNewTaskToReadyList+0xc0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d802      	bhi.n	800341e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <prvAddNewTaskToReadyList+0xc4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <prvAddNewTaskToReadyList+0xc4>)
 8003426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <prvAddNewTaskToReadyList+0xc8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <prvAddNewTaskToReadyList+0xc8>)
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <prvAddNewTaskToReadyList+0xcc>)
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f7ff fe75 	bl	8003140 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003456:	f000 fcf3 	bl	8003e40 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <prvAddNewTaskToReadyList+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <prvAddNewTaskToReadyList+0xbc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	429a      	cmp	r2, r3
 800346e:	d207      	bcs.n	8003480 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <prvAddNewTaskToReadyList+0xd0>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000988 	.word	0x20000988
 800348c:	20000888 	.word	0x20000888
 8003490:	20000994 	.word	0x20000994
 8003494:	200009a4 	.word	0x200009a4
 8003498:	20000990 	.word	0x20000990
 800349c:	2000088c 	.word	0x2000088c
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <vTaskDelayUntil+0x28>
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e7fe      	b.n	80034ca <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <vTaskDelayUntil+0x42>
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e7fe      	b.n	80034e4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80034e6:	4b29      	ldr	r3, [pc, #164]	; (800358c <vTaskDelayUntil+0xe8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <vTaskDelayUntil+0x5e>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e7fe      	b.n	8003500 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8003502:	f000 f8a7 	bl	8003654 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <vTaskDelayUntil+0xec>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4413      	add	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d20b      	bcs.n	8003538 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	429a      	cmp	r2, r3
 8003528:	d211      	bcs.n	800354e <vTaskDelayUntil+0xaa>
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90d      	bls.n	800354e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e00a      	b.n	800354e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	429a      	cmp	r2, r3
 8003540:	d303      	bcc.n	800354a <vTaskDelayUntil+0xa6>
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	429a      	cmp	r2, r3
 8003548:	d901      	bls.n	800354e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb06 	bl	8003b74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003568:	f000 f882 	bl	8003670 <xTaskResumeAll>
 800356c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <vTaskDelayUntil+0xf0>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003584:	bf00      	nop
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200009b0 	.word	0x200009b0
 8003590:	2000098c 	.word	0x2000098c
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035a6:	463a      	mov	r2, r7
 80035a8:	1d39      	adds	r1, r7, #4
 80035aa:	f107 0308 	add.w	r3, r7, #8
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fccc 	bl	8003f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035b4:	6839      	ldr	r1, [r7, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	9202      	str	r2, [sp, #8]
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2300      	movs	r3, #0
 80035c4:	460a      	mov	r2, r1
 80035c6:	491d      	ldr	r1, [pc, #116]	; (800363c <vTaskStartScheduler+0xa4>)
 80035c8:	481d      	ldr	r0, [pc, #116]	; (8003640 <vTaskStartScheduler+0xa8>)
 80035ca:	f7ff fe3d 	bl	8003248 <xTaskCreateStatic>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <vTaskStartScheduler+0xac>)
 80035d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <vTaskStartScheduler+0xac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035dc:	2301      	movs	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e001      	b.n	80035e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d115      	bne.n	8003618 <vTaskStartScheduler+0x80>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <vTaskStartScheduler+0xb0>)
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <vTaskStartScheduler+0xb4>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <vTaskStartScheduler+0xb8>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003612:	f000 fb89 	bl	8003d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003616:	e00d      	b.n	8003634 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d109      	bne.n	8003634 <vTaskStartScheduler+0x9c>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e7fe      	b.n	8003632 <vTaskStartScheduler+0x9a>
}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	08005404 	.word	0x08005404
 8003640:	080039f1 	.word	0x080039f1
 8003644:	200009ac 	.word	0x200009ac
 8003648:	200009a8 	.word	0x200009a8
 800364c:	20000994 	.word	0x20000994
 8003650:	2000098c 	.word	0x2000098c

08003654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <vTaskSuspendAll+0x18>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a03      	ldr	r2, [pc, #12]	; (800366c <vTaskSuspendAll+0x18>)
 8003660:	6013      	str	r3, [r2, #0]
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200009b0 	.word	0x200009b0

08003670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <xTaskResumeAll+0x114>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <xTaskResumeAll+0x2a>
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	e7fe      	b.n	8003698 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800369a:	f000 fba3 	bl	8003de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800369e:	4b39      	ldr	r3, [pc, #228]	; (8003784 <xTaskResumeAll+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	4a37      	ldr	r2, [pc, #220]	; (8003784 <xTaskResumeAll+0x114>)
 80036a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a8:	4b36      	ldr	r3, [pc, #216]	; (8003784 <xTaskResumeAll+0x114>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d161      	bne.n	8003774 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <xTaskResumeAll+0x118>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d05d      	beq.n	8003774 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b8:	e02e      	b.n	8003718 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036ba:	4b34      	ldr	r3, [pc, #208]	; (800378c <xTaskResumeAll+0x11c>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3318      	adds	r3, #24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fd95 	bl	80031f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fd90 	bl	80031f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	2201      	movs	r2, #1
 80036dc:	409a      	lsls	r2, r3
 80036de:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <xTaskResumeAll+0x120>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <xTaskResumeAll+0x120>)
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <xTaskResumeAll+0x124>)
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7ff fd1e 	bl	8003140 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4b23      	ldr	r3, [pc, #140]	; (8003798 <xTaskResumeAll+0x128>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <xTaskResumeAll+0x12c>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <xTaskResumeAll+0x11c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1cc      	bne.n	80036ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003726:	f000 fa01 	bl	8003b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <xTaskResumeAll+0x130>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003736:	f000 f845 	bl	80037c4 <xTaskIncrementTick>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <xTaskResumeAll+0x12c>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3b01      	subs	r3, #1
 800374a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f1      	bne.n	8003736 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <xTaskResumeAll+0x130>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <xTaskResumeAll+0x12c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <xTaskResumeAll+0x134>)
 8003766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003774:	f000 fb64 	bl	8003e40 <vPortExitCritical>

	return xAlreadyYielded;
 8003778:	68bb      	ldr	r3, [r7, #8]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200009b0 	.word	0x200009b0
 8003788:	20000988 	.word	0x20000988
 800378c:	20000948 	.word	0x20000948
 8003790:	20000990 	.word	0x20000990
 8003794:	2000088c 	.word	0x2000088c
 8003798:	20000888 	.word	0x20000888
 800379c:	2000099c 	.word	0x2000099c
 80037a0:	20000998 	.word	0x20000998
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <xTaskGetTickCount+0x18>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	2000098c 	.word	0x2000098c

080037c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <xTaskIncrementTick+0x14c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 808c 	bne.w	80038f0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <xTaskIncrementTick+0x150>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037e0:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <xTaskIncrementTick+0x150>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11f      	bne.n	800382c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037ec:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <xTaskIncrementTick+0x154>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <xTaskIncrementTick+0x46>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	e7fe      	b.n	8003808 <xTaskIncrementTick+0x44>
 800380a:	4b43      	ldr	r3, [pc, #268]	; (8003918 <xTaskIncrementTick+0x154>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	4b42      	ldr	r3, [pc, #264]	; (800391c <xTaskIncrementTick+0x158>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a40      	ldr	r2, [pc, #256]	; (8003918 <xTaskIncrementTick+0x154>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4a40      	ldr	r2, [pc, #256]	; (800391c <xTaskIncrementTick+0x158>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	f000 f980 	bl	8003b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <xTaskIncrementTick+0x160>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d34d      	bcc.n	80038d2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003836:	4b38      	ldr	r3, [pc, #224]	; (8003918 <xTaskIncrementTick+0x154>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <xTaskIncrementTick+0x80>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <xTaskIncrementTick+0x82>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <xTaskIncrementTick+0x160>)
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	601a      	str	r2, [r3, #0]
					break;
 8003852:	e03e      	b.n	80038d2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003854:	4b30      	ldr	r3, [pc, #192]	; (8003918 <xTaskIncrementTick+0x154>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d203      	bcs.n	8003874 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <xTaskIncrementTick+0x160>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6013      	str	r3, [r2, #0]
						break;
 8003872:	e02e      	b.n	80038d2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fcbc 	bl	80031f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3318      	adds	r3, #24
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fcb3 	bl	80031f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b23      	ldr	r3, [pc, #140]	; (8003928 <xTaskIncrementTick+0x164>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <xTaskIncrementTick+0x164>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <xTaskIncrementTick+0x168>)
 80038b0:	441a      	add	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff fc41 	bl	8003140 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <xTaskIncrementTick+0x16c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3b4      	bcc.n	8003836 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d0:	e7b1      	b.n	8003836 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <xTaskIncrementTick+0x16c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4914      	ldr	r1, [pc, #80]	; (800392c <xTaskIncrementTick+0x168>)
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d907      	bls.n	80038fa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e004      	b.n	80038fa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <xTaskIncrementTick+0x170>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <xTaskIncrementTick+0x170>)
 80038f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <xTaskIncrementTick+0x174>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003902:	2301      	movs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003906:	697b      	ldr	r3, [r7, #20]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200009b0 	.word	0x200009b0
 8003914:	2000098c 	.word	0x2000098c
 8003918:	20000940 	.word	0x20000940
 800391c:	20000944 	.word	0x20000944
 8003920:	200009a0 	.word	0x200009a0
 8003924:	200009a8 	.word	0x200009a8
 8003928:	20000990 	.word	0x20000990
 800392c:	2000088c 	.word	0x2000088c
 8003930:	20000888 	.word	0x20000888
 8003934:	20000998 	.word	0x20000998
 8003938:	2000099c 	.word	0x2000099c

0800393c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <vTaskSwitchContext+0xa0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <vTaskSwitchContext+0xa4>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003950:	e03e      	b.n	80039d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003952:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <vTaskSwitchContext+0xa4>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <vTaskSwitchContext+0xa8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f1c3 031f 	rsb	r3, r3, #31
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	491e      	ldr	r1, [pc, #120]	; (80039e8 <vTaskSwitchContext+0xac>)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	e7fe      	b.n	8003994 <vTaskSwitchContext+0x58>
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <vTaskSwitchContext+0xac>)
 80039a2:	4413      	add	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3308      	adds	r3, #8
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d104      	bne.n	80039c6 <vTaskSwitchContext+0x8a>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a07      	ldr	r2, [pc, #28]	; (80039ec <vTaskSwitchContext+0xb0>)
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200009b0 	.word	0x200009b0
 80039e0:	2000099c 	.word	0x2000099c
 80039e4:	20000990 	.word	0x20000990
 80039e8:	2000088c 	.word	0x2000088c
 80039ec:	20000888 	.word	0x20000888

080039f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039f8:	f000 f852 	bl	8003aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <prvIdleTask+0x28>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d9f9      	bls.n	80039f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <prvIdleTask+0x2c>)
 8003a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a14:	e7f0      	b.n	80039f8 <prvIdleTask+0x8>
 8003a16:	bf00      	nop
 8003a18:	2000088c 	.word	0x2000088c
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e00c      	b.n	8003a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <prvInitialiseTaskLists+0x60>)
 8003a38:	4413      	add	r3, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fb55 	bl	80030ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3301      	adds	r3, #1
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d9ef      	bls.n	8003a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a4c:	480d      	ldr	r0, [pc, #52]	; (8003a84 <prvInitialiseTaskLists+0x64>)
 8003a4e:	f7ff fb4c 	bl	80030ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a52:	480d      	ldr	r0, [pc, #52]	; (8003a88 <prvInitialiseTaskLists+0x68>)
 8003a54:	f7ff fb49 	bl	80030ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <prvInitialiseTaskLists+0x6c>)
 8003a5a:	f7ff fb46 	bl	80030ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a5e:	480c      	ldr	r0, [pc, #48]	; (8003a90 <prvInitialiseTaskLists+0x70>)
 8003a60:	f7ff fb43 	bl	80030ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a64:	480b      	ldr	r0, [pc, #44]	; (8003a94 <prvInitialiseTaskLists+0x74>)
 8003a66:	f7ff fb40 	bl	80030ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <prvInitialiseTaskLists+0x78>)
 8003a6c:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <prvInitialiseTaskLists+0x64>)
 8003a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <prvInitialiseTaskLists+0x7c>)
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <prvInitialiseTaskLists+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000088c 	.word	0x2000088c
 8003a84:	20000918 	.word	0x20000918
 8003a88:	2000092c 	.word	0x2000092c
 8003a8c:	20000948 	.word	0x20000948
 8003a90:	2000095c 	.word	0x2000095c
 8003a94:	20000974 	.word	0x20000974
 8003a98:	20000940 	.word	0x20000940
 8003a9c:	20000944 	.word	0x20000944

08003aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa6:	e028      	b.n	8003afa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003aa8:	f7ff fdd4 	bl	8003654 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <prvCheckTasksWaitingTermination+0x6c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003abc:	f7ff fdd8 	bl	8003670 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003ac6:	f000 f98d 	bl	8003de4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <prvCheckTasksWaitingTermination+0x6c>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fb8d 	bl	80031f6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <prvCheckTasksWaitingTermination+0x70>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <prvCheckTasksWaitingTermination+0x70>)
 8003ae4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <prvCheckTasksWaitingTermination+0x74>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <prvCheckTasksWaitingTermination+0x74>)
 8003aee:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003af0:	f000 f9a6 	bl	8003e40 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f000 f80f 	bl	8003b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <prvCheckTasksWaitingTermination+0x74>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d2      	bne.n	8003aa8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000095c 	.word	0x2000095c
 8003b10:	20000988 	.word	0x20000988
 8003b14:	20000970 	.word	0x20000970

08003b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <prvResetNextTaskUnblockTime+0x40>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <prvResetNextTaskUnblockTime+0x14>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <prvResetNextTaskUnblockTime+0x16>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <prvResetNextTaskUnblockTime+0x44>)
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b4e:	e008      	b.n	8003b62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <prvResetNextTaskUnblockTime+0x40>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <prvResetNextTaskUnblockTime+0x44>)
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	20000940 	.word	0x20000940
 8003b70:	200009a8 	.word	0x200009a8

08003b74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fb33 	bl	80031f6 <uxListRemove>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d10a      	bne.n	8003bcc <prvAddCurrentTaskToDelayedList+0x58>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	481a      	ldr	r0, [pc, #104]	; (8003c30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bc6:	f7ff fabb 	bl	8003140 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bca:	e026      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d209      	bcs.n	8003bf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7ff fac8 	bl	8003186 <vListInsert>
}
 8003bf6:	e010      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff fabe 	bl	8003186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d202      	bcs.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6013      	str	r3, [r2, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	2000098c 	.word	0x2000098c
 8003c28:	20000888 	.word	0x20000888
 8003c2c:	20000990 	.word	0x20000990
 8003c30:	20000974 	.word	0x20000974
 8003c34:	20000944 	.word	0x20000944
 8003c38:	20000940 	.word	0x20000940
 8003c3c:	200009a8 	.word	0x200009a8

08003c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b04      	subs	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0201 	bic.w	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c70:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <pxPortInitialiseStack+0x54>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b14      	subs	r3, #20
 8003c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b20      	subs	r3, #32
 8003c86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c88:	68fb      	ldr	r3, [r7, #12]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	08003c99 	.word	0x08003c99

08003c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <prvTaskExitError+0x38>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d009      	beq.n	8003cbc <prvTaskExitError+0x24>
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	e7fe      	b.n	8003cba <prvTaskExitError+0x22>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003cce:	e7fe      	b.n	8003cce <prvTaskExitError+0x36>
 8003cd0:	20000000 	.word	0x20000000
	...

08003ce0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <pxCurrentTCBConst2>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cea:	f380 8809 	msr	PSP, r0
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003cfe:	4770      	bx	lr

08003d00 <pxCurrentTCBConst2>:
 8003d00:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop

08003d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d08:	4806      	ldr	r0, [pc, #24]	; (8003d24 <prvPortStartFirstTask+0x1c>)
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	6800      	ldr	r0, [r0, #0]
 8003d0e:	f380 8808 	msr	MSP, r0
 8003d12:	b662      	cpsie	i
 8003d14:	b661      	cpsie	f
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	df00      	svc	0
 8003d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d22:	bf00      	nop
 8003d24:	e000ed08 	.word	0xe000ed08

08003d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <xPortStartScheduler+0xa8>)
 8003d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <xPortStartScheduler+0xac>)
 8003d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5c:	e009      	b.n	8003d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d0ef      	beq.n	8003d5e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d90:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <xPortStartScheduler+0xb0>)
 8003d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xPortStartScheduler+0xb4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <xPortStartScheduler+0xb4>)
 8003da2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <xPortStartScheduler+0xb4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <xPortStartScheduler+0xb4>)
 8003dae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003db4:	f000 f8b0 	bl	8003f18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <xPortStartScheduler+0xb8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dbe:	f7ff ffa3 	bl	8003d08 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003dc2:	f7ff ff69 	bl	8003c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000e400 	.word	0xe000e400
 8003dd4:	200009b4 	.word	0x200009b4
 8003dd8:	200009b8 	.word	0x200009b8
 8003ddc:	e000ed20 	.word	0xe000ed20
 8003de0:	20000000 	.word	0x20000000

08003de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <vPortEnterCritical+0x54>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <vPortEnterCritical+0x54>)
 8003e04:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <vPortEnterCritical+0x54>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10e      	bne.n	8003e2c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <vPortEnterCritical+0x58>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <vPortEnterCritical+0x48>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	e7fe      	b.n	8003e2a <vPortEnterCritical+0x46>
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <vPortExitCritical+0x48>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <vPortExitCritical+0x22>
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e7fe      	b.n	8003e60 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <vPortExitCritical+0x48>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <vPortExitCritical+0x48>)
 8003e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <vPortExitCritical+0x48>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <vPortExitCritical+0x3e>
 8003e74:	2300      	movs	r3, #0
 8003e76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	00000000 	.word	0x00000000

08003e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ea0:	6010      	str	r0, [r2, #0]
 8003ea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eaa:	f380 8811 	msr	BASEPRI, r0
 8003eae:	f7ff fd45 	bl	800393c <vTaskSwitchContext>
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ebe:	6819      	ldr	r1, [r3, #0]
 8003ec0:	6808      	ldr	r0, [r1, #0]
 8003ec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ec6:	f380 8809 	msr	PSP, r0
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	4770      	bx	lr

08003ed0 <pxCurrentTCBConst>:
 8003ed0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop

08003ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ef0:	f7ff fc68 	bl	80037c4 <xTaskIncrementTick>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <SysTick_Handler+0x3c>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <vPortSetupTimerInterrupt+0x24>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <vPortSetupTimerInterrupt+0x28>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <vPortSetupTimerInterrupt+0x2c>)
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <vPortSetupTimerInterrupt+0x30>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	20000004 	.word	0x20000004
 8003f40:	10624dd3 	.word	0x10624dd3
 8003f44:	e000e014 	.word	0xe000e014
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <vApplicationGetIdleTaskMemory+0x28>)
 8003f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	200009bc 	.word	0x200009bc
 8003f78:	20000a10 	.word	0x20000a10

08003f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f7c:	b5b0      	push	{r4, r5, r7, lr}
 8003f7e:	b09c      	sub	sp, #112	; 0x70
 8003f80:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f82:	f7fc fb43 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f86:	f000 f899 	bl	80040bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f8a:	f000 f9c1 	bl	8004310 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003f8e:	f000 f8f1 	bl	8004174 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003f92:	f000 f92d 	bl	80041f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003f96:	f000 f959 	bl	800424c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TM_OneWire_Init(&oneWireDS18B20, ds18b20_data_GPIO_Port, ds18b20_data_Pin);
 8003f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f9e:	493b      	ldr	r1, [pc, #236]	; (800408c <main+0x110>)
 8003fa0:	483b      	ldr	r0, [pc, #236]	; (8004090 <main+0x114>)
 8003fa2:	f7fe fe2d 	bl	8002c00 <TM_OneWire_Init>

  if (TM_OneWire_First(&oneWireDS18B20))
 8003fa6:	483a      	ldr	r0, [pc, #232]	; (8004090 <main+0x114>)
 8003fa8:	f7fe ff04 	bl	8002db4 <TM_OneWire_First>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <main+0x4c>
  {
  	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fb8:	4836      	ldr	r0, [pc, #216]	; (8004094 <main+0x118>)
 8003fba:	f7fd f878 	bl	80010ae <HAL_GPIO_WritePin>

  	/* Read ROM number */
  	TM_OneWire_GetFullROM(&oneWireDS18B20, DS_ROM);
 8003fbe:	4936      	ldr	r1, [pc, #216]	; (8004098 <main+0x11c>)
 8003fc0:	4833      	ldr	r0, [pc, #204]	; (8004090 <main+0x114>)
 8003fc2:	f7fe fffd 	bl	8002fc0 <TM_OneWire_GetFullROM>
 8003fc6:	e005      	b.n	8003fd4 <main+0x58>
  }
  else
  {
  	/* Bad Initialization */
  	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fce:	4831      	ldr	r0, [pc, #196]	; (8004094 <main+0x118>)
 8003fd0:	f7fd f86d 	bl	80010ae <HAL_GPIO_WritePin>
  }


  if (TM_DS18B20_Is(DS_ROM)) {
 8003fd4:	4830      	ldr	r0, [pc, #192]	; (8004098 <main+0x11c>)
 8003fd6:	f7fe fda5 	bl	8002b24 <TM_DS18B20_Is>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <main+0x74>
  	/* Set resolution */
  	TM_DS18B20_SetResolution(&oneWireDS18B20, DS_ROM, TM_DS18B20_Resolution_12bits);
 8003fe0:	220c      	movs	r2, #12
 8003fe2:	492d      	ldr	r1, [pc, #180]	; (8004098 <main+0x11c>)
 8003fe4:	482a      	ldr	r0, [pc, #168]	; (8004090 <main+0x114>)
 8003fe6:	f7fe fd15 	bl	8002a14 <TM_DS18B20_SetResolution>

  	/* Start conversion on all sensors */
  	TM_DS18B20_StartAll(&oneWireDS18B20);
 8003fea:	4829      	ldr	r0, [pc, #164]	; (8004090 <main+0x114>)
 8003fec:	f7fe fc12 	bl	8002814 <TM_DS18B20_StartAll>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of IdleTask */
  osThreadStaticDef(IdleTask, StartIdleTask, osPriorityIdle, 0, 128, defaultIdleTaskBuffer, &defaultIdleTaskControlBlock);
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <main+0x120>)
 8003ff2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ffc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004000:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IdleTaskHandle = osThreadCreate(osThread(IdleTask), NULL);
 8004004:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f848 	bl	80030a0 <osThreadCreate>
 8004010:	4602      	mov	r2, r0
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <main+0x124>)
 8004014:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_2ms */
  osThreadStaticDef(Task_2ms, StartTask2ms, osPriorityIdle, 0, 128, myTask2msBuffer, &myTask2msControlBlock);
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <main+0x128>)
 8004018:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800401c:	461d      	mov	r5, r3
 800401e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_2msHandle = osThreadCreate(osThread(Task_2ms), NULL);
 800402a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f835 	bl	80030a0 <osThreadCreate>
 8004036:	4602      	mov	r2, r0
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <main+0x12c>)
 800403a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_5ms */
  osThreadStaticDef(Task_5ms, StartTask5ms, osPriorityIdle, 0, 128, myTask5msBuffer, &myTask5msControlBlock);
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <main+0x130>)
 800403e:	f107 041c 	add.w	r4, r7, #28
 8004042:	461d      	mov	r5, r3
 8004044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800404c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8004050:	f107 031c 	add.w	r3, r7, #28
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f822 	bl	80030a0 <osThreadCreate>
 800405c:	4602      	mov	r2, r0
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <main+0x134>)
 8004060:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task_10ms */
  osThreadStaticDef(Task_10ms, StartTask10ms, osPriorityIdle, 0, 128, myTask10msBuffer, &myTask10msControlBlock);
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <main+0x138>)
 8004064:	463c      	mov	r4, r7
 8004066:	461d      	mov	r5, r3
 8004068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800406a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800406c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8004074:	463b      	mov	r3, r7
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f811 	bl	80030a0 <osThreadCreate>
 800407e:	4602      	mov	r2, r0
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <main+0x13c>)
 8004082:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004084:	f7ff f805 	bl	8003092 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004088:	e7fe      	b.n	8004088 <main+0x10c>
 800408a:	bf00      	nop
 800408c:	40010800 	.word	0x40010800
 8004090:	20000d04 	.word	0x20000d04
 8004094:	40011000 	.word	0x40011000
 8004098:	20000c4c 	.word	0x20000c4c
 800409c:	08005418 	.word	0x08005418
 80040a0:	20000d00 	.word	0x20000d00
 80040a4:	08005440 	.word	0x08005440
 80040a8:	200011a0 	.word	0x200011a0
 80040ac:	08005468 	.word	0x08005468
 80040b0:	20000c48 	.word	0x20000c48
 80040b4:	08005490 	.word	0x08005490
 80040b8:	20000c54 	.word	0x20000c54

080040bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b094      	sub	sp, #80	; 0x50
 80040c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040c6:	2228      	movs	r2, #40	; 0x28
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff4a 	bl	8004f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80040f6:	2300      	movs	r3, #0
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040fa:	2301      	movs	r3, #1
 80040fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040fe:	2302      	movs	r3, #2
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004108:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800410c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800410e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd f8e8 	bl	80012e8 <HAL_RCC_OscConfig>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800411e:	f000 f9f5 	bl	800450c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004122:	230f      	movs	r3, #15
 8004124:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004126:	2302      	movs	r3, #2
 8004128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800412e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004132:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fb36 	bl	80017b0 <HAL_RCC_ClockConfig>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800414a:	f000 f9df 	bl	800450c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800414e:	2302      	movs	r3, #2
 8004150:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd fd16 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004166:	f000 f9d1 	bl	800450c <Error_Handler>
  }
}
 800416a:	bf00      	nop
 800416c:	3750      	adds	r7, #80	; 0x50
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <MX_ADC1_Init+0x74>)
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <MX_ADC1_Init+0x78>)
 8004188:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MX_ADC1_Init+0x74>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <MX_ADC1_Init+0x74>)
 8004192:	2201      	movs	r2, #1
 8004194:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <MX_ADC1_Init+0x74>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <MX_ADC1_Init+0x74>)
 800419e:	2200      	movs	r2, #0
 80041a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <MX_ADC1_Init+0x74>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <MX_ADC1_Init+0x74>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ae:	480e      	ldr	r0, [pc, #56]	; (80041e8 <MX_ADC1_Init+0x74>)
 80041b0:	f7fc fa42 	bl	8000638 <HAL_ADC_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80041ba:	f000 f9a7 	bl	800450c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4806      	ldr	r0, [pc, #24]	; (80041e8 <MX_ADC1_Init+0x74>)
 80041d0:	f7fc fbe0 	bl	8000994 <HAL_ADC_ConfigChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 80041da:	f000 f997 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000f70 	.word	0x20000f70
 80041ec:	40012400 	.word	0x40012400

080041f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <MX_I2C1_Init+0x50>)
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <MX_I2C1_Init+0x54>)
 80041f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <MX_I2C1_Init+0x50>)
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <MX_I2C1_Init+0x58>)
 80041fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <MX_I2C1_Init+0x50>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <MX_I2C1_Init+0x50>)
 8004208:	2200      	movs	r2, #0
 800420a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <MX_I2C1_Init+0x50>)
 800420e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <MX_I2C1_Init+0x50>)
 8004216:	2200      	movs	r2, #0
 8004218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <MX_I2C1_Init+0x50>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <MX_I2C1_Init+0x50>)
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <MX_I2C1_Init+0x50>)
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800422c:	4804      	ldr	r0, [pc, #16]	; (8004240 <MX_I2C1_Init+0x50>)
 800422e:	f7fc ff57 	bl	80010e0 <HAL_I2C_Init>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004238:	f000 f968 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000cac 	.word	0x20000cac
 8004244:	40005400 	.word	0x40005400
 8004248:	000186a0 	.word	0x000186a0

0800424c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004252:	f107 0320 	add.w	r3, r7, #32
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	615a      	str	r2, [r3, #20]
 800426c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800426e:	4b27      	ldr	r3, [pc, #156]	; (800430c <MX_TIM2_Init+0xc0>)
 8004270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004274:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004276:	4b25      	ldr	r3, [pc, #148]	; (800430c <MX_TIM2_Init+0xc0>)
 8004278:	2200      	movs	r2, #0
 800427a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427c:	4b23      	ldr	r3, [pc, #140]	; (800430c <MX_TIM2_Init+0xc0>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <MX_TIM2_Init+0xc0>)
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <MX_TIM2_Init+0xc0>)
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <MX_TIM2_Init+0xc0>)
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004294:	481d      	ldr	r0, [pc, #116]	; (800430c <MX_TIM2_Init+0xc0>)
 8004296:	f7fd fd7d 	bl	8001d94 <HAL_TIM_PWM_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80042a0:	f000 f934 	bl	800450c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042ac:	f107 0320 	add.w	r3, r7, #32
 80042b0:	4619      	mov	r1, r3
 80042b2:	4816      	ldr	r0, [pc, #88]	; (800430c <MX_TIM2_Init+0xc0>)
 80042b4:	f7fe f992 	bl	80025dc <HAL_TIMEx_MasterConfigSynchronization>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80042be:	f000 f925 	bl	800450c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c2:	2360      	movs	r3, #96	; 0x60
 80042c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	4619      	mov	r1, r3
 80042d8:	480c      	ldr	r0, [pc, #48]	; (800430c <MX_TIM2_Init+0xc0>)
 80042da:	f7fd fe8f 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80042e4:	f000 f912 	bl	800450c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	2204      	movs	r2, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4807      	ldr	r0, [pc, #28]	; (800430c <MX_TIM2_Init+0xc0>)
 80042f0:	f7fd fe84 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80042fa:	f000 f907 	bl	800450c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042fe:	4803      	ldr	r0, [pc, #12]	; (800430c <MX_TIM2_Init+0xc0>)
 8004300:	f000 f9fa 	bl	80046f8 <HAL_TIM_MspPostInit>

}
 8004304:	bf00      	nop
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200011a4 	.word	0x200011a4

08004310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004316:	f107 0310 	add.w	r3, r7, #16
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004324:	4b39      	ldr	r3, [pc, #228]	; (800440c <MX_GPIO_Init+0xfc>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <MX_GPIO_Init+0xfc>)
 800432a:	f043 0310 	orr.w	r3, r3, #16
 800432e:	6193      	str	r3, [r2, #24]
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <MX_GPIO_Init+0xfc>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <MX_GPIO_Init+0xfc>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <MX_GPIO_Init+0xfc>)
 8004342:	f043 0320 	orr.w	r3, r3, #32
 8004346:	6193      	str	r3, [r2, #24]
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <MX_GPIO_Init+0xfc>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <MX_GPIO_Init+0xfc>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <MX_GPIO_Init+0xfc>)
 800435a:	f043 0304 	orr.w	r3, r3, #4
 800435e:	6193      	str	r3, [r2, #24]
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <MX_GPIO_Init+0xfc>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <MX_GPIO_Init+0xfc>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <MX_GPIO_Init+0xfc>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	6193      	str	r3, [r2, #24]
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <MX_GPIO_Init+0xfc>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800438a:	4821      	ldr	r0, [pc, #132]	; (8004410 <MX_GPIO_Init+0x100>)
 800438c:	f7fc fe8f 	bl	80010ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 8004390:	2200      	movs	r2, #0
 8004392:	f64f 4130 	movw	r1, #64560	; 0xfc30
 8004396:	481f      	ldr	r0, [pc, #124]	; (8004414 <MX_GPIO_Init+0x104>)
 8004398:	f7fc fe89 	bl	80010ae <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|Fan_Peltier_Pin|Water_Pump_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ds18b20_data_GPIO_Port, ds18b20_data_Pin, GPIO_PIN_SET);
 800439c:	2201      	movs	r2, #1
 800439e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043a2:	481d      	ldr	r0, [pc, #116]	; (8004418 <MX_GPIO_Init+0x108>)
 80043a4:	f7fc fe83 	bl	80010ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80043a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ae:	2301      	movs	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2302      	movs	r3, #2
 80043b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	4619      	mov	r1, r3
 80043c0:	4813      	ldr	r0, [pc, #76]	; (8004410 <MX_GPIO_Init+0x100>)
 80043c2:	f7fc fcff 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin Fan_Peltier_Pin Water_Pump_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin 
 80043c6:	f64f 4330 	movw	r3, #64560	; 0xfc30
 80043ca:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|Fan_Peltier_Pin|Water_Pump_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043cc:	2301      	movs	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	2302      	movs	r3, #2
 80043d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4619      	mov	r1, r3
 80043de:	480d      	ldr	r0, [pc, #52]	; (8004414 <MX_GPIO_Init+0x104>)
 80043e0:	f7fc fcf0 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ds18b20_data_Pin */
  GPIO_InitStruct.Pin = ds18b20_data_Pin;
 80043e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043ea:	2311      	movs	r3, #17
 80043ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ds18b20_data_GPIO_Port, &GPIO_InitStruct);
 80043f6:	f107 0310 	add.w	r3, r7, #16
 80043fa:	4619      	mov	r1, r3
 80043fc:	4806      	ldr	r0, [pc, #24]	; (8004418 <MX_GPIO_Init+0x108>)
 80043fe:	f7fc fce1 	bl	8000dc4 <HAL_GPIO_Init>

}
 8004402:	bf00      	nop
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	40011000 	.word	0x40011000
 8004414:	40010c00 	.word	0x40010c00
 8004418:	40010800 	.word	0x40010800

0800441c <StartIdleTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void const * argument)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8004424:	e7fe      	b.n	8004424 <StartIdleTask+0x8>

08004426 <StartTask2ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2ms */
void StartTask2ms(void const * argument)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800442e:	2302      	movs	r3, #2
 8004430:	60fb      	str	r3, [r7, #12]

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004432:	f7ff f9b9 	bl	80037a8 <xTaskGetTickCount>
 8004436:	4603      	mov	r3, r0
 8004438:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f82f 	bl	80034a4 <vTaskDelayUntil>
 8004446:	e7f8      	b.n	800443a <StartTask2ms+0x14>

08004448 <StartTask5ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5ms */
void StartTask5ms(void const * argument)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask5ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5;
 8004450:	2305      	movs	r3, #5
 8004452:	60fb      	str	r3, [r7, #12]

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004454:	f7ff f9a8 	bl	80037a8 <xTaskGetTickCount>
 8004458:	4603      	mov	r3, r0
 800445a:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f81e 	bl	80034a4 <vTaskDelayUntil>
 8004468:	e7f8      	b.n	800445c <StartTask5ms+0x14>
	...

0800446c <StartTask10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask10ms */
void StartTask10ms(void const * argument)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask10ms */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8004474:	230a      	movs	r3, #10
 8004476:	60fb      	str	r3, [r7, #12]

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8004478:	f7ff f996 	bl	80037a8 <xTaskGetTickCount>
 800447c:	4603      	mov	r3, r0
 800447e:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		// Wait for the next cycle.
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f80c 	bl	80034a4 <vTaskDelayUntil>

		if (TM_DS18B20_Is(DS_ROM))
 800448c:	4812      	ldr	r0, [pc, #72]	; (80044d8 <StartTask10ms+0x6c>)
 800448e:	f7fe fb49 	bl	8002b24 <TM_DS18B20_Is>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f3      	beq.n	8004480 <StartTask10ms+0x14>
		{
			/* Everything is done */
			if (TM_DS18B20_AllDone(&oneWireDS18B20))
 8004498:	4810      	ldr	r0, [pc, #64]	; (80044dc <StartTask10ms+0x70>)
 800449a:	f7fe fb53 	bl	8002b44 <TM_DS18B20_AllDone>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ed      	beq.n	8004480 <StartTask10ms+0x14>
			{
				/* Read temperature from device */
				if (TM_DS18B20_Read(&oneWireDS18B20, DS_ROM, &temp))
 80044a4:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <StartTask10ms+0x74>)
 80044a6:	490c      	ldr	r1, [pc, #48]	; (80044d8 <StartTask10ms+0x6c>)
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <StartTask10ms+0x70>)
 80044aa:	f7fe f9c7 	bl	800283c <TM_DS18B20_Read>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <StartTask10ms+0x5c>
				{
					/* Temp read OK, CRC is OK */
					HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 80044b4:	2201      	movs	r2, #1
 80044b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ba:	480a      	ldr	r0, [pc, #40]	; (80044e4 <StartTask10ms+0x78>)
 80044bc:	f7fc fdf7 	bl	80010ae <HAL_GPIO_WritePin>
					/* Start again on all sensors */
					TM_DS18B20_StartAll(&oneWireDS18B20);
 80044c0:	4806      	ldr	r0, [pc, #24]	; (80044dc <StartTask10ms+0x70>)
 80044c2:	f7fe f9a7 	bl	8002814 <TM_DS18B20_StartAll>
 80044c6:	e7db      	b.n	8004480 <StartTask10ms+0x14>

				}
				else
				{
					/* CRC failed, hardware problems on data line */
					HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ce:	4805      	ldr	r0, [pc, #20]	; (80044e4 <StartTask10ms+0x78>)
 80044d0:	f7fc fded 	bl	80010ae <HAL_GPIO_WritePin>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80044d4:	e7d4      	b.n	8004480 <StartTask10ms+0x14>
 80044d6:	bf00      	nop
 80044d8:	20000c4c 	.word	0x20000c4c
 80044dc:	20000d04 	.word	0x20000d04
 80044e0:	20000f18 	.word	0x20000f18
 80044e4:	40011000 	.word	0x40011000

080044e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044fa:	f7fe f8fb 	bl	80026f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00

0800450c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_MspInit+0x68>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <HAL_MspInit+0x68>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6193      	str	r3, [r2, #24]
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_MspInit+0x68>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_MspInit+0x68>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <HAL_MspInit+0x68>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	61d3      	str	r3, [r2, #28]
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_MspInit+0x68>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	210f      	movs	r1, #15
 8004552:	f06f 0001 	mvn.w	r0, #1
 8004556:	f7fc fc0a 	bl	8000d6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_MspInit+0x6c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_MspInit+0x6c>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	40010000 	.word	0x40010000

08004588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_ADC_MspInit+0x7c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d129      	bne.n	80045fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4a16      	ldr	r2, [pc, #88]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b2:	6193      	str	r3, [r2, #24]
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_ADC_MspInit+0x80>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = Crrnt_Peltier1_Pin|Crrnt_Peltier2_Pin|Cooler_Temp_Pin;
 80045d8:	2307      	movs	r3, #7
 80045da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045dc:	2303      	movs	r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e0:	f107 0310 	add.w	r3, r7, #16
 80045e4:	4619      	mov	r1, r3
 80045e6:	4809      	ldr	r0, [pc, #36]	; (800460c <HAL_ADC_MspInit+0x84>)
 80045e8:	f7fc fbec 	bl	8000dc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80045ec:	2200      	movs	r2, #0
 80045ee:	2105      	movs	r1, #5
 80045f0:	2012      	movs	r0, #18
 80045f2:	f7fc fbbc 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80045f6:	2012      	movs	r0, #18
 80045f8:	f7fc fbd5 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045fc:	bf00      	nop
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40012400 	.word	0x40012400
 8004608:	40021000 	.word	0x40021000
 800460c:	40010800 	.word	0x40010800

08004610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_I2C_MspInit+0x90>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d132      	bne.n	8004696 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 8004636:	f043 0308 	orr.w	r3, r3, #8
 800463a:	6193      	str	r3, [r2, #24]
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_Beagle_SCL_Pin|I2C_Beagle_SDA_Pin;
 8004648:	f44f 7340 	mov.w	r3, #768	; 0x300
 800464c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800464e:	2312      	movs	r3, #18
 8004650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004652:	2303      	movs	r3, #3
 8004654:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	4619      	mov	r1, r3
 800465c:	4812      	ldr	r0, [pc, #72]	; (80046a8 <HAL_I2C_MspInit+0x98>)
 800465e:	f7fc fbb1 	bl	8000dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_I2C_MspInit+0x9c>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <HAL_I2C_MspInit+0x9c>)
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 8004684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004688:	61d3      	str	r3, [r2, #28]
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_I2C_MspInit+0x94>)
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004696:	bf00      	nop
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40005400 	.word	0x40005400
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40010c00 	.word	0x40010c00
 80046ac:	40010000 	.word	0x40010000

080046b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d113      	bne.n	80046ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_TIM_PWM_MspInit+0x44>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <HAL_TIM_PWM_MspInit+0x44>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	61d3      	str	r3, [r2, #28]
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_TIM_PWM_MspInit+0x44>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	2105      	movs	r1, #5
 80046de:	201c      	movs	r0, #28
 80046e0:	f7fc fb45 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046e4:	201c      	movs	r0, #28
 80046e6:	f7fc fb5e 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d142      	bne.n	800479e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 800471e:	f043 0304 	orr.w	r3, r3, #4
 8004722:	6193      	str	r3, [r2, #24]
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 8004736:	f043 0308 	orr.w	r3, r3, #8
 800473a:	6193      	str	r3, [r2, #24]
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <HAL_TIM_MspPostInit+0xb0>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = PWM_Peltier2_Pin;
 8004748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004752:	2302      	movs	r3, #2
 8004754:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWM_Peltier2_GPIO_Port, &GPIO_InitStruct);
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4619      	mov	r1, r3
 800475c:	4813      	ldr	r0, [pc, #76]	; (80047ac <HAL_TIM_MspPostInit+0xb4>)
 800475e:	f7fc fb31 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Peltier1_Pin;
 8004762:	2308      	movs	r3, #8
 8004764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476a:	2302      	movs	r3, #2
 800476c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWM_Peltier1_GPIO_Port, &GPIO_InitStruct);
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	4619      	mov	r1, r3
 8004774:	480e      	ldr	r0, [pc, #56]	; (80047b0 <HAL_TIM_MspPostInit+0xb8>)
 8004776:	f7fc fb25 	bl	8000dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_TIM_MspPostInit+0xbc>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <HAL_TIM_MspPostInit+0xbc>)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800479e:	bf00      	nop
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40010c00 	.word	0x40010c00
 80047b4:	40010000 	.word	0x40010000

080047b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80047c8:	2200      	movs	r2, #0
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	2019      	movs	r0, #25
 80047ce:	f7fc face 	bl	8000d6e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80047d2:	2019      	movs	r0, #25
 80047d4:	f7fc fae7 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80047d8:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_InitTick+0x9c>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_InitTick+0x9c>)
 80047de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_InitTick+0x9c>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047f0:	f107 0210 	add.w	r2, r7, #16
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd f978 	bl	8001af0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fd f962 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8004804:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_InitTick+0xa0>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0c9b      	lsrs	r3, r3, #18
 8004810:	3b01      	subs	r3, #1
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_InitTick+0xa4>)
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <HAL_InitTick+0xa8>)
 8004818:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_InitTick+0xa4>)
 800481c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004820:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <HAL_InitTick+0xa4>)
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_InitTick+0xa4>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_InitTick+0xa4>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004834:	4809      	ldr	r0, [pc, #36]	; (800485c <HAL_InitTick+0xa4>)
 8004836:	f7fd fa5f 	bl	8001cf8 <HAL_TIM_Base_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004840:	4806      	ldr	r0, [pc, #24]	; (800485c <HAL_InitTick+0xa4>)
 8004842:	f7fd fa8d 	bl	8001d60 <HAL_TIM_Base_Start_IT>
 8004846:	4603      	mov	r3, r0
 8004848:	e000      	b.n	800484c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
}
 800484c:	4618      	mov	r0, r3
 800484e:	3730      	adds	r7, #48	; 0x30
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	431bde83 	.word	0x431bde83
 800485c:	2000168c 	.word	0x2000168c
 8004860:	40012c00 	.word	0x40012c00

08004864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004874:	e7fe      	b.n	8004874 <HardFault_Handler+0x4>

08004876 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800487a:	e7fe      	b.n	800487a <MemManage_Handler+0x4>

0800487c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004880:	e7fe      	b.n	8004880 <BusFault_Handler+0x4>

08004882 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004886:	e7fe      	b.n	8004886 <UsageFault_Handler+0x4>

08004888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <ADC1_2_IRQHandler+0x10>)
 800489a:	f7fb ffa5 	bl	80007e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000f70 	.word	0x20000f70

080048a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <TIM1_UP_IRQHandler+0x10>)
 80048ae:	f7fd fa9c 	bl	8001dea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2000168c 	.word	0x2000168c

080048bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM2_IRQHandler+0x10>)
 80048c2:	f7fd fa92 	bl	8001dea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200011a4 	.word	0x200011a4

080048d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <_sbrk+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <_sbrk+0x16>
		heap_end = &end;
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <_sbrk+0x50>)
 80048e2:	4a10      	ldr	r2, [pc, #64]	; (8004924 <_sbrk+0x54>)
 80048e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <_sbrk+0x50>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <_sbrk+0x50>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4413      	add	r3, r2
 80048f4:	466a      	mov	r2, sp
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d907      	bls.n	800490a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80048fa:	f000 f86f 	bl	80049dc <__errno>
 80048fe:	4602      	mov	r2, r0
 8004900:	230c      	movs	r3, #12
 8004902:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
 8004908:	e006      	b.n	8004918 <_sbrk+0x48>
	}

	heap_end += incr;
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <_sbrk+0x50>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <_sbrk+0x50>)
 8004914:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000c10 	.word	0x20000c10
 8004924:	200016f8 	.word	0x200016f8

08004928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <SystemInit+0x5c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <SystemInit+0x5c>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <SystemInit+0x5c>)
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4911      	ldr	r1, [pc, #68]	; (8004984 <SystemInit+0x5c>)
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <SystemInit+0x60>)
 8004940:	4013      	ands	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <SystemInit+0x5c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <SystemInit+0x5c>)
 800494a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <SystemInit+0x5c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <SystemInit+0x5c>)
 800495a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <SystemInit+0x5c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a07      	ldr	r2, [pc, #28]	; (8004984 <SystemInit+0x5c>)
 8004966:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800496a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <SystemInit+0x5c>)
 800496e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004972:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <SystemInit+0x64>)
 8004976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800497a:	609a      	str	r2, [r3, #8]
#endif 
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40021000 	.word	0x40021000
 8004988:	f8ff0000 	.word	0xf8ff0000
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004990:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004992:	e003      	b.n	800499c <LoopCopyDataInit>

08004994 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004996:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004998:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800499a:	3104      	adds	r1, #4

0800499c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80049a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80049a4:	d3f6      	bcc.n	8004994 <CopyDataInit>
  ldr r2, =_sbss
 80049a6:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80049a8:	e002      	b.n	80049b0 <LoopFillZerobss>

080049aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80049aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80049ac:	f842 3b04 	str.w	r3, [r2], #4

080049b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80049b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80049b4:	d3f9      	bcc.n	80049aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049b6:	f7ff ffb7 	bl	8004928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ba:	f000 f815 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049be:	f7ff fadd 	bl	8003f7c <main>
  bx lr
 80049c2:	4770      	bx	lr
  ldr r3, =_sidata
 80049c4:	080054d4 	.word	0x080054d4
  ldr r0, =_sdata
 80049c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80049cc:	2000084c 	.word	0x2000084c
  ldr r2, =_sbss
 80049d0:	2000084c 	.word	0x2000084c
  ldr r3, = _ebss
 80049d4:	200016f4 	.word	0x200016f4

080049d8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049d8:	e7fe      	b.n	80049d8 <CAN1_RX1_IRQHandler>
	...

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000008 	.word	0x20000008

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4e0d      	ldr	r6, [pc, #52]	; (8004a20 <__libc_init_array+0x38>)
 80049ec:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b76      	subs	r6, r6, r5
 80049f0:	10b6      	asrs	r6, r6, #2
 80049f2:	d006      	beq.n	8004a02 <__libc_init_array+0x1a>
 80049f4:	2400      	movs	r4, #0
 80049f6:	3401      	adds	r4, #1
 80049f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fc:	4798      	blx	r3
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d1f9      	bne.n	80049f6 <__libc_init_array+0xe>
 8004a02:	4e09      	ldr	r6, [pc, #36]	; (8004a28 <__libc_init_array+0x40>)
 8004a04:	4d09      	ldr	r5, [pc, #36]	; (8004a2c <__libc_init_array+0x44>)
 8004a06:	f000 fce7 	bl	80053d8 <_init>
 8004a0a:	1b76      	subs	r6, r6, r5
 8004a0c:	10b6      	asrs	r6, r6, #2
 8004a0e:	d006      	beq.n	8004a1e <__libc_init_array+0x36>
 8004a10:	2400      	movs	r4, #0
 8004a12:	3401      	adds	r4, #1
 8004a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a18:	4798      	blx	r3
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d1f9      	bne.n	8004a12 <__libc_init_array+0x2a>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	080054c8 	.word	0x080054c8
 8004a24:	080054c8 	.word	0x080054c8
 8004a28:	080054d0 	.word	0x080054d0
 8004a2c:	080054c8 	.word	0x080054c8

08004a30 <malloc>:
 8004a30:	4b02      	ldr	r3, [pc, #8]	; (8004a3c <malloc+0xc>)
 8004a32:	4601      	mov	r1, r0
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f000 b803 	b.w	8004a40 <_malloc_r>
 8004a3a:	bf00      	nop
 8004a3c:	20000008 	.word	0x20000008

08004a40 <_malloc_r>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	f101 050b 	add.w	r5, r1, #11
 8004a48:	2d16      	cmp	r5, #22
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	d823      	bhi.n	8004a98 <_malloc_r+0x58>
 8004a50:	2910      	cmp	r1, #16
 8004a52:	f200 80b6 	bhi.w	8004bc2 <_malloc_r+0x182>
 8004a56:	f000 facf 	bl	8004ff8 <__malloc_lock>
 8004a5a:	2510      	movs	r5, #16
 8004a5c:	2318      	movs	r3, #24
 8004a5e:	2002      	movs	r0, #2
 8004a60:	4fcc      	ldr	r7, [pc, #816]	; (8004d94 <_malloc_r+0x354>)
 8004a62:	443b      	add	r3, r7
 8004a64:	685c      	ldr	r4, [r3, #4]
 8004a66:	f1a3 0208 	sub.w	r2, r3, #8
 8004a6a:	4294      	cmp	r4, r2
 8004a6c:	f000 8156 	beq.w	8004d1c <_malloc_r+0x2dc>
 8004a70:	6863      	ldr	r3, [r4, #4]
 8004a72:	68e1      	ldr	r1, [r4, #12]
 8004a74:	f023 0303 	bic.w	r3, r3, #3
 8004a78:	4423      	add	r3, r4
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68a5      	ldr	r5, [r4, #8]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60e9      	str	r1, [r5, #12]
 8004a84:	4630      	mov	r0, r6
 8004a86:	608d      	str	r5, [r1, #8]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	f000 fabb 	bl	8005004 <__malloc_unlock>
 8004a8e:	3408      	adds	r4, #8
 8004a90:	4620      	mov	r0, r4
 8004a92:	b003      	add	sp, #12
 8004a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a98:	f035 0507 	bics.w	r5, r5, #7
 8004a9c:	f100 8091 	bmi.w	8004bc2 <_malloc_r+0x182>
 8004aa0:	42a9      	cmp	r1, r5
 8004aa2:	f200 808e 	bhi.w	8004bc2 <_malloc_r+0x182>
 8004aa6:	f000 faa7 	bl	8004ff8 <__malloc_lock>
 8004aaa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004aae:	f0c0 8164 	bcc.w	8004d7a <_malloc_r+0x33a>
 8004ab2:	0a6b      	lsrs	r3, r5, #9
 8004ab4:	f000 808c 	beq.w	8004bd0 <_malloc_r+0x190>
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	f200 8136 	bhi.w	8004d2a <_malloc_r+0x2ea>
 8004abe:	09ab      	lsrs	r3, r5, #6
 8004ac0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004ac4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8004ac8:	00c1      	lsls	r1, r0, #3
 8004aca:	4fb2      	ldr	r7, [pc, #712]	; (8004d94 <_malloc_r+0x354>)
 8004acc:	4439      	add	r1, r7
 8004ace:	684c      	ldr	r4, [r1, #4]
 8004ad0:	3908      	subs	r1, #8
 8004ad2:	42a1      	cmp	r1, r4
 8004ad4:	d106      	bne.n	8004ae4 <_malloc_r+0xa4>
 8004ad6:	e00c      	b.n	8004af2 <_malloc_r+0xb2>
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	f280 811b 	bge.w	8004d14 <_malloc_r+0x2d4>
 8004ade:	68e4      	ldr	r4, [r4, #12]
 8004ae0:	42a1      	cmp	r1, r4
 8004ae2:	d006      	beq.n	8004af2 <_malloc_r+0xb2>
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	1b5a      	subs	r2, r3, r5
 8004aec:	2a0f      	cmp	r2, #15
 8004aee:	ddf3      	ble.n	8004ad8 <_malloc_r+0x98>
 8004af0:	4660      	mov	r0, ip
 8004af2:	693c      	ldr	r4, [r7, #16]
 8004af4:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8004da8 <_malloc_r+0x368>
 8004af8:	4564      	cmp	r4, ip
 8004afa:	d06f      	beq.n	8004bdc <_malloc_r+0x19c>
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	1b5a      	subs	r2, r3, r5
 8004b04:	2a0f      	cmp	r2, #15
 8004b06:	f300 8126 	bgt.w	8004d56 <_malloc_r+0x316>
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8004b10:	f280 8117 	bge.w	8004d42 <_malloc_r+0x302>
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b18:	f080 8159 	bcs.w	8004dce <_malloc_r+0x38e>
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	08db      	lsrs	r3, r3, #3
 8004b20:	1099      	asrs	r1, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	408a      	lsls	r2, r1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8004b2c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
 8004b30:	430a      	orrs	r2, r1
 8004b32:	f1a8 0108 	sub.w	r1, r8, #8
 8004b36:	e9c4 e102 	strd	lr, r1, [r4, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
 8004b40:	f8ce 400c 	str.w	r4, [lr, #12]
 8004b44:	2401      	movs	r4, #1
 8004b46:	1083      	asrs	r3, r0, #2
 8004b48:	409c      	lsls	r4, r3
 8004b4a:	4294      	cmp	r4, r2
 8004b4c:	d84c      	bhi.n	8004be8 <_malloc_r+0x1a8>
 8004b4e:	4214      	tst	r4, r2
 8004b50:	d106      	bne.n	8004b60 <_malloc_r+0x120>
 8004b52:	f020 0003 	bic.w	r0, r0, #3
 8004b56:	0064      	lsls	r4, r4, #1
 8004b58:	4214      	tst	r4, r2
 8004b5a:	f100 0004 	add.w	r0, r0, #4
 8004b5e:	d0fa      	beq.n	8004b56 <_malloc_r+0x116>
 8004b60:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8004b64:	46ce      	mov	lr, r9
 8004b66:	4680      	mov	r8, r0
 8004b68:	f8de 300c 	ldr.w	r3, [lr, #12]
 8004b6c:	459e      	cmp	lr, r3
 8004b6e:	d107      	bne.n	8004b80 <_malloc_r+0x140>
 8004b70:	e107      	b.n	8004d82 <_malloc_r+0x342>
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	f280 811c 	bge.w	8004db0 <_malloc_r+0x370>
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	459e      	cmp	lr, r3
 8004b7c:	f000 8101 	beq.w	8004d82 <_malloc_r+0x342>
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	f021 0103 	bic.w	r1, r1, #3
 8004b86:	1b4a      	subs	r2, r1, r5
 8004b88:	2a0f      	cmp	r2, #15
 8004b8a:	ddf2      	ble.n	8004b72 <_malloc_r+0x132>
 8004b8c:	f045 0801 	orr.w	r8, r5, #1
 8004b90:	4630      	mov	r0, r6
 8004b92:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
 8004b96:	441d      	add	r5, r3
 8004b98:	f042 0601 	orr.w	r6, r2, #1
 8004b9c:	f8c3 8004 	str.w	r8, [r3, #4]
 8004ba0:	f8ce 400c 	str.w	r4, [lr, #12]
 8004ba4:	f8c4 e008 	str.w	lr, [r4, #8]
 8004ba8:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8004bac:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8004bb0:	606e      	str	r6, [r5, #4]
 8004bb2:	505a      	str	r2, [r3, r1]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	f000 fa25 	bl	8005004 <__malloc_unlock>
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	f103 0408 	add.w	r4, r3, #8
 8004bc0:	e766      	b.n	8004a90 <_malloc_r+0x50>
 8004bc2:	2400      	movs	r4, #0
 8004bc4:	230c      	movs	r3, #12
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	b003      	add	sp, #12
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd4:	2040      	movs	r0, #64	; 0x40
 8004bd6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8004bda:	e776      	b.n	8004aca <_malloc_r+0x8a>
 8004bdc:	2401      	movs	r4, #1
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	1083      	asrs	r3, r0, #2
 8004be2:	409c      	lsls	r4, r3
 8004be4:	4294      	cmp	r4, r2
 8004be6:	d9b2      	bls.n	8004b4e <_malloc_r+0x10e>
 8004be8:	68bc      	ldr	r4, [r7, #8]
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	f023 0903 	bic.w	r9, r3, #3
 8004bf0:	45a9      	cmp	r9, r5
 8004bf2:	d303      	bcc.n	8004bfc <_malloc_r+0x1bc>
 8004bf4:	eba9 0305 	sub.w	r3, r9, r5
 8004bf8:	2b0f      	cmp	r3, #15
 8004bfa:	dc7b      	bgt.n	8004cf4 <_malloc_r+0x2b4>
 8004bfc:	4b66      	ldr	r3, [pc, #408]	; (8004d98 <_malloc_r+0x358>)
 8004bfe:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004dac <_malloc_r+0x36c>
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f8da 3000 	ldr.w	r3, [sl]
 8004c08:	eb05 0802 	add.w	r8, r5, r2
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f000 813a 	beq.w	8004e86 <_malloc_r+0x446>
 8004c12:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8004c16:	f108 080f 	add.w	r8, r8, #15
 8004c1a:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8004c1e:	f028 080f 	bic.w	r8, r8, #15
 8004c22:	4641      	mov	r1, r8
 8004c24:	4630      	mov	r0, r6
 8004c26:	f000 f9f3 	bl	8005010 <_sbrk_r>
 8004c2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c2e:	4683      	mov	fp, r0
 8004c30:	f000 80f6 	beq.w	8004e20 <_malloc_r+0x3e0>
 8004c34:	eb04 0009 	add.w	r0, r4, r9
 8004c38:	4558      	cmp	r0, fp
 8004c3a:	f200 80ef 	bhi.w	8004e1c <_malloc_r+0x3dc>
 8004c3e:	4a57      	ldr	r2, [pc, #348]	; (8004d9c <_malloc_r+0x35c>)
 8004c40:	6813      	ldr	r3, [r2, #0]
 8004c42:	4443      	add	r3, r8
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	f000 813f 	beq.w	8004ec8 <_malloc_r+0x488>
 8004c4a:	f8da 1000 	ldr.w	r1, [sl]
 8004c4e:	3101      	adds	r1, #1
 8004c50:	bf1b      	ittet	ne
 8004c52:	ebab 0000 	subne.w	r0, fp, r0
 8004c56:	181b      	addne	r3, r3, r0
 8004c58:	f8ca b000 	streq.w	fp, [sl]
 8004c5c:	6013      	strne	r3, [r2, #0]
 8004c5e:	f01b 0307 	ands.w	r3, fp, #7
 8004c62:	f000 8126 	beq.w	8004eb2 <_malloc_r+0x472>
 8004c66:	f1c3 0108 	rsb	r1, r3, #8
 8004c6a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004c6e:	448b      	add	fp, r1
 8004c70:	3308      	adds	r3, #8
 8004c72:	44d8      	add	r8, fp
 8004c74:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8004c78:	eba3 0808 	sub.w	r8, r3, r8
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	4630      	mov	r0, r6
 8004c80:	9201      	str	r2, [sp, #4]
 8004c82:	f000 f9c5 	bl	8005010 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	9a01      	ldr	r2, [sp, #4]
 8004c8a:	f000 8138 	beq.w	8004efe <_malloc_r+0x4be>
 8004c8e:	eba0 010b 	sub.w	r1, r0, fp
 8004c92:	4441      	add	r1, r8
 8004c94:	f041 0101 	orr.w	r1, r1, #1
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	42bc      	cmp	r4, r7
 8004c9c:	4443      	add	r3, r8
 8004c9e:	f8c7 b008 	str.w	fp, [r7, #8]
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	f8cb 1004 	str.w	r1, [fp, #4]
 8004ca8:	d015      	beq.n	8004cd6 <_malloc_r+0x296>
 8004caa:	f1b9 0f0f 	cmp.w	r9, #15
 8004cae:	f240 8122 	bls.w	8004ef6 <_malloc_r+0x4b6>
 8004cb2:	f04f 0e05 	mov.w	lr, #5
 8004cb6:	6861      	ldr	r1, [r4, #4]
 8004cb8:	f1a9 000c 	sub.w	r0, r9, #12
 8004cbc:	f020 0007 	bic.w	r0, r0, #7
 8004cc0:	f001 0101 	and.w	r1, r1, #1
 8004cc4:	4301      	orrs	r1, r0
 8004cc6:	eb04 0c00 	add.w	ip, r4, r0
 8004cca:	280f      	cmp	r0, #15
 8004ccc:	6061      	str	r1, [r4, #4]
 8004cce:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8004cd2:	f200 812c 	bhi.w	8004f2e <_malloc_r+0x4ee>
 8004cd6:	4a32      	ldr	r2, [pc, #200]	; (8004da0 <_malloc_r+0x360>)
 8004cd8:	4832      	ldr	r0, [pc, #200]	; (8004da4 <_malloc_r+0x364>)
 8004cda:	6811      	ldr	r1, [r2, #0]
 8004cdc:	68bc      	ldr	r4, [r7, #8]
 8004cde:	428b      	cmp	r3, r1
 8004ce0:	6801      	ldr	r1, [r0, #0]
 8004ce2:	bf88      	it	hi
 8004ce4:	6013      	strhi	r3, [r2, #0]
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	f022 0203 	bic.w	r2, r2, #3
 8004cee:	bf88      	it	hi
 8004cf0:	6003      	strhi	r3, [r0, #0]
 8004cf2:	e099      	b.n	8004e28 <_malloc_r+0x3e8>
 8004cf4:	f045 0201 	orr.w	r2, r5, #1
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	4425      	add	r5, r4
 8004cfe:	6062      	str	r2, [r4, #4]
 8004d00:	4630      	mov	r0, r6
 8004d02:	60bd      	str	r5, [r7, #8]
 8004d04:	3408      	adds	r4, #8
 8004d06:	606b      	str	r3, [r5, #4]
 8004d08:	f000 f97c 	bl	8005004 <__malloc_unlock>
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	4423      	add	r3, r4
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	68e1      	ldr	r1, [r4, #12]
 8004d1a:	e6af      	b.n	8004a7c <_malloc_r+0x3c>
 8004d1c:	68dc      	ldr	r4, [r3, #12]
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	bf08      	it	eq
 8004d22:	3002      	addeq	r0, #2
 8004d24:	f43f aee5 	beq.w	8004af2 <_malloc_r+0xb2>
 8004d28:	e6a2      	b.n	8004a70 <_malloc_r+0x30>
 8004d2a:	2b14      	cmp	r3, #20
 8004d2c:	d970      	bls.n	8004e10 <_malloc_r+0x3d0>
 8004d2e:	2b54      	cmp	r3, #84	; 0x54
 8004d30:	f200 80ac 	bhi.w	8004e8c <_malloc_r+0x44c>
 8004d34:	0b2b      	lsrs	r3, r5, #12
 8004d36:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004d3a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8004d3e:	00c1      	lsls	r1, r0, #3
 8004d40:	e6c3      	b.n	8004aca <_malloc_r+0x8a>
 8004d42:	4423      	add	r3, r4
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	4630      	mov	r0, r6
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	3408      	adds	r4, #8
 8004d50:	f000 f958 	bl	8005004 <__malloc_unlock>
 8004d54:	e69c      	b.n	8004a90 <_malloc_r+0x50>
 8004d56:	f045 0e01 	orr.w	lr, r5, #1
 8004d5a:	f042 0101 	orr.w	r1, r2, #1
 8004d5e:	4425      	add	r5, r4
 8004d60:	f8c4 e004 	str.w	lr, [r4, #4]
 8004d64:	4630      	mov	r0, r6
 8004d66:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8004d6a:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8004d6e:	6069      	str	r1, [r5, #4]
 8004d70:	50e2      	str	r2, [r4, r3]
 8004d72:	f000 f947 	bl	8005004 <__malloc_unlock>
 8004d76:	3408      	adds	r4, #8
 8004d78:	e68a      	b.n	8004a90 <_malloc_r+0x50>
 8004d7a:	08e8      	lsrs	r0, r5, #3
 8004d7c:	f105 0308 	add.w	r3, r5, #8
 8004d80:	e66e      	b.n	8004a60 <_malloc_r+0x20>
 8004d82:	f108 0801 	add.w	r8, r8, #1
 8004d86:	f018 0f03 	tst.w	r8, #3
 8004d8a:	f10e 0e08 	add.w	lr, lr, #8
 8004d8e:	f47f aeeb 	bne.w	8004b68 <_malloc_r+0x128>
 8004d92:	e060      	b.n	8004e56 <_malloc_r+0x416>
 8004d94:	20000438 	.word	0x20000438
 8004d98:	20000c44 	.word	0x20000c44
 8004d9c:	20000c14 	.word	0x20000c14
 8004da0:	20000c3c 	.word	0x20000c3c
 8004da4:	20000c40 	.word	0x20000c40
 8004da8:	20000440 	.word	0x20000440
 8004dac:	20000840 	.word	0x20000840
 8004db0:	461c      	mov	r4, r3
 8004db2:	4419      	add	r1, r3
 8004db4:	684a      	ldr	r2, [r1, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	604a      	str	r2, [r1, #4]
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	60eb      	str	r3, [r5, #12]
 8004dc6:	609d      	str	r5, [r3, #8]
 8004dc8:	f000 f91c 	bl	8005004 <__malloc_unlock>
 8004dcc:	e660      	b.n	8004a90 <_malloc_r+0x50>
 8004dce:	0a5a      	lsrs	r2, r3, #9
 8004dd0:	2a04      	cmp	r2, #4
 8004dd2:	d935      	bls.n	8004e40 <_malloc_r+0x400>
 8004dd4:	2a14      	cmp	r2, #20
 8004dd6:	d86f      	bhi.n	8004eb8 <_malloc_r+0x478>
 8004dd8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8004ddc:	00c9      	lsls	r1, r1, #3
 8004dde:	325b      	adds	r2, #91	; 0x5b
 8004de0:	eb07 0e01 	add.w	lr, r7, r1
 8004de4:	5879      	ldr	r1, [r7, r1]
 8004de6:	f1ae 0e08 	sub.w	lr, lr, #8
 8004dea:	458e      	cmp	lr, r1
 8004dec:	d058      	beq.n	8004ea0 <_malloc_r+0x460>
 8004dee:	684a      	ldr	r2, [r1, #4]
 8004df0:	f022 0203 	bic.w	r2, r2, #3
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d902      	bls.n	8004dfe <_malloc_r+0x3be>
 8004df8:	6889      	ldr	r1, [r1, #8]
 8004dfa:	458e      	cmp	lr, r1
 8004dfc:	d1f7      	bne.n	8004dee <_malloc_r+0x3ae>
 8004dfe:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8004e08:	f8ce 4008 	str.w	r4, [lr, #8]
 8004e0c:	60cc      	str	r4, [r1, #12]
 8004e0e:	e699      	b.n	8004b44 <_malloc_r+0x104>
 8004e10:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004e14:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8004e18:	00c1      	lsls	r1, r0, #3
 8004e1a:	e656      	b.n	8004aca <_malloc_r+0x8a>
 8004e1c:	42bc      	cmp	r4, r7
 8004e1e:	d072      	beq.n	8004f06 <_malloc_r+0x4c6>
 8004e20:	68bc      	ldr	r4, [r7, #8]
 8004e22:	6862      	ldr	r2, [r4, #4]
 8004e24:	f022 0203 	bic.w	r2, r2, #3
 8004e28:	4295      	cmp	r5, r2
 8004e2a:	eba2 0305 	sub.w	r3, r2, r5
 8004e2e:	d802      	bhi.n	8004e36 <_malloc_r+0x3f6>
 8004e30:	2b0f      	cmp	r3, #15
 8004e32:	f73f af5f 	bgt.w	8004cf4 <_malloc_r+0x2b4>
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f8e4 	bl	8005004 <__malloc_unlock>
 8004e3c:	2400      	movs	r4, #0
 8004e3e:	e627      	b.n	8004a90 <_malloc_r+0x50>
 8004e40:	099a      	lsrs	r2, r3, #6
 8004e42:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8004e46:	00c9      	lsls	r1, r1, #3
 8004e48:	3238      	adds	r2, #56	; 0x38
 8004e4a:	e7c9      	b.n	8004de0 <_malloc_r+0x3a0>
 8004e4c:	f8d9 9000 	ldr.w	r9, [r9]
 8004e50:	4599      	cmp	r9, r3
 8004e52:	f040 8083 	bne.w	8004f5c <_malloc_r+0x51c>
 8004e56:	f010 0f03 	tst.w	r0, #3
 8004e5a:	f1a9 0308 	sub.w	r3, r9, #8
 8004e5e:	f100 30ff 	add.w	r0, r0, #4294967295
 8004e62:	d1f3      	bne.n	8004e4c <_malloc_r+0x40c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	ea23 0304 	bic.w	r3, r3, r4
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	0064      	lsls	r4, r4, #1
 8004e6e:	429c      	cmp	r4, r3
 8004e70:	f63f aeba 	bhi.w	8004be8 <_malloc_r+0x1a8>
 8004e74:	b91c      	cbnz	r4, 8004e7e <_malloc_r+0x43e>
 8004e76:	e6b7      	b.n	8004be8 <_malloc_r+0x1a8>
 8004e78:	0064      	lsls	r4, r4, #1
 8004e7a:	f108 0804 	add.w	r8, r8, #4
 8004e7e:	421c      	tst	r4, r3
 8004e80:	d0fa      	beq.n	8004e78 <_malloc_r+0x438>
 8004e82:	4640      	mov	r0, r8
 8004e84:	e66c      	b.n	8004b60 <_malloc_r+0x120>
 8004e86:	f108 0810 	add.w	r8, r8, #16
 8004e8a:	e6ca      	b.n	8004c22 <_malloc_r+0x1e2>
 8004e8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e90:	d826      	bhi.n	8004ee0 <_malloc_r+0x4a0>
 8004e92:	0beb      	lsrs	r3, r5, #15
 8004e94:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004e98:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8004e9c:	00c1      	lsls	r1, r0, #3
 8004e9e:	e614      	b.n	8004aca <_malloc_r+0x8a>
 8004ea0:	f04f 0801 	mov.w	r8, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1092      	asrs	r2, r2, #2
 8004ea8:	fa08 f202 	lsl.w	r2, r8, r2
 8004eac:	431a      	orrs	r2, r3
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	e7a8      	b.n	8004e04 <_malloc_r+0x3c4>
 8004eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb6:	e6dc      	b.n	8004c72 <_malloc_r+0x232>
 8004eb8:	2a54      	cmp	r2, #84	; 0x54
 8004eba:	d829      	bhi.n	8004f10 <_malloc_r+0x4d0>
 8004ebc:	0b1a      	lsrs	r2, r3, #12
 8004ebe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004ec2:	00c9      	lsls	r1, r1, #3
 8004ec4:	326e      	adds	r2, #110	; 0x6e
 8004ec6:	e78b      	b.n	8004de0 <_malloc_r+0x3a0>
 8004ec8:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	f47f aebc 	bne.w	8004c4a <_malloc_r+0x20a>
 8004ed2:	eb09 0208 	add.w	r2, r9, r8
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	604a      	str	r2, [r1, #4]
 8004ede:	e6fa      	b.n	8004cd6 <_malloc_r+0x296>
 8004ee0:	f240 5254 	movw	r2, #1364	; 0x554
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d81c      	bhi.n	8004f22 <_malloc_r+0x4e2>
 8004ee8:	0cab      	lsrs	r3, r5, #18
 8004eea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8004eee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8004ef2:	00c1      	lsls	r1, r0, #3
 8004ef4:	e5e9      	b.n	8004aca <_malloc_r+0x8a>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f8cb 3004 	str.w	r3, [fp, #4]
 8004efc:	e79b      	b.n	8004e36 <_malloc_r+0x3f6>
 8004efe:	2101      	movs	r1, #1
 8004f00:	f04f 0800 	mov.w	r8, #0
 8004f04:	e6c8      	b.n	8004c98 <_malloc_r+0x258>
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <_malloc_r+0x520>)
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	4443      	add	r3, r8
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e69c      	b.n	8004c4a <_malloc_r+0x20a>
 8004f10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004f14:	d814      	bhi.n	8004f40 <_malloc_r+0x500>
 8004f16:	0bda      	lsrs	r2, r3, #15
 8004f18:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8004f1c:	00c9      	lsls	r1, r1, #3
 8004f1e:	3277      	adds	r2, #119	; 0x77
 8004f20:	e75e      	b.n	8004de0 <_malloc_r+0x3a0>
 8004f22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8004f26:	207f      	movs	r0, #127	; 0x7f
 8004f28:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8004f2c:	e5cd      	b.n	8004aca <_malloc_r+0x8a>
 8004f2e:	f104 0108 	add.w	r1, r4, #8
 8004f32:	4630      	mov	r0, r6
 8004f34:	9201      	str	r2, [sp, #4]
 8004f36:	f000 f8f7 	bl	8005128 <_free_r>
 8004f3a:	9a01      	ldr	r2, [sp, #4]
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	e6ca      	b.n	8004cd6 <_malloc_r+0x296>
 8004f40:	f240 5154 	movw	r1, #1364	; 0x554
 8004f44:	428a      	cmp	r2, r1
 8004f46:	d805      	bhi.n	8004f54 <_malloc_r+0x514>
 8004f48:	0c9a      	lsrs	r2, r3, #18
 8004f4a:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8004f4e:	00c9      	lsls	r1, r1, #3
 8004f50:	327c      	adds	r2, #124	; 0x7c
 8004f52:	e745      	b.n	8004de0 <_malloc_r+0x3a0>
 8004f54:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8004f58:	227e      	movs	r2, #126	; 0x7e
 8004f5a:	e741      	b.n	8004de0 <_malloc_r+0x3a0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	e785      	b.n	8004e6c <_malloc_r+0x42c>
 8004f60:	20000c14 	.word	0x20000c14

08004f64 <memset>:
 8004f64:	b4f0      	push	{r4, r5, r6, r7}
 8004f66:	0786      	lsls	r6, r0, #30
 8004f68:	d043      	beq.n	8004ff2 <memset+0x8e>
 8004f6a:	1e54      	subs	r4, r2, #1
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d03e      	beq.n	8004fee <memset+0x8a>
 8004f70:	b2ca      	uxtb	r2, r1
 8004f72:	4603      	mov	r3, r0
 8004f74:	e002      	b.n	8004f7c <memset+0x18>
 8004f76:	f114 34ff 	adds.w	r4, r4, #4294967295
 8004f7a:	d338      	bcc.n	8004fee <memset+0x8a>
 8004f7c:	f803 2b01 	strb.w	r2, [r3], #1
 8004f80:	079d      	lsls	r5, r3, #30
 8004f82:	d1f8      	bne.n	8004f76 <memset+0x12>
 8004f84:	2c03      	cmp	r4, #3
 8004f86:	d92b      	bls.n	8004fe0 <memset+0x7c>
 8004f88:	b2cd      	uxtb	r5, r1
 8004f8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004f8e:	2c0f      	cmp	r4, #15
 8004f90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004f94:	d916      	bls.n	8004fc4 <memset+0x60>
 8004f96:	f1a4 0710 	sub.w	r7, r4, #16
 8004f9a:	093f      	lsrs	r7, r7, #4
 8004f9c:	f103 0620 	add.w	r6, r3, #32
 8004fa0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004fa4:	f103 0210 	add.w	r2, r3, #16
 8004fa8:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004fac:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004fb0:	3210      	adds	r2, #16
 8004fb2:	42b2      	cmp	r2, r6
 8004fb4:	d1f8      	bne.n	8004fa8 <memset+0x44>
 8004fb6:	f004 040f 	and.w	r4, r4, #15
 8004fba:	3701      	adds	r7, #1
 8004fbc:	2c03      	cmp	r4, #3
 8004fbe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8004fc2:	d90d      	bls.n	8004fe0 <memset+0x7c>
 8004fc4:	461e      	mov	r6, r3
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	3a04      	subs	r2, #4
 8004fca:	2a03      	cmp	r2, #3
 8004fcc:	f846 5b04 	str.w	r5, [r6], #4
 8004fd0:	d8fa      	bhi.n	8004fc8 <memset+0x64>
 8004fd2:	1f22      	subs	r2, r4, #4
 8004fd4:	f022 0203 	bic.w	r2, r2, #3
 8004fd8:	3204      	adds	r2, #4
 8004fda:	4413      	add	r3, r2
 8004fdc:	f004 0403 	and.w	r4, r4, #3
 8004fe0:	b12c      	cbz	r4, 8004fee <memset+0x8a>
 8004fe2:	b2c9      	uxtb	r1, r1
 8004fe4:	441c      	add	r4, r3
 8004fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fea:	429c      	cmp	r4, r3
 8004fec:	d1fb      	bne.n	8004fe6 <memset+0x82>
 8004fee:	bcf0      	pop	{r4, r5, r6, r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	e7c5      	b.n	8004f84 <memset+0x20>

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f000 b989 	b.w	8005310 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200016dc 	.word	0x200016dc

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f000 b985 	b.w	8005314 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200016dc 	.word	0x200016dc

08005010 <_sbrk_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	2300      	movs	r3, #0
 8005014:	4c06      	ldr	r4, [pc, #24]	; (8005030 <_sbrk_r+0x20>)
 8005016:	4605      	mov	r5, r0
 8005018:	4608      	mov	r0, r1
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	f7ff fc58 	bl	80048d0 <_sbrk>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d000      	beq.n	8005026 <_sbrk_r+0x16>
 8005024:	bd38      	pop	{r3, r4, r5, pc}
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0fb      	beq.n	8005024 <_sbrk_r+0x14>
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200016f0 	.word	0x200016f0

08005034 <register_fini>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <register_fini+0xc>)
 8005036:	b113      	cbz	r3, 800503e <register_fini+0xa>
 8005038:	4802      	ldr	r0, [pc, #8]	; (8005044 <register_fini+0x10>)
 800503a:	f000 b805 	b.w	8005048 <atexit>
 800503e:	4770      	bx	lr
 8005040:	00000000 	.word	0x00000000
 8005044:	08005055 	.word	0x08005055

08005048 <atexit>:
 8005048:	2300      	movs	r3, #0
 800504a:	4601      	mov	r1, r0
 800504c:	461a      	mov	r2, r3
 800504e:	4618      	mov	r0, r3
 8005050:	f000 b962 	b.w	8005318 <__register_exitproc>

08005054 <__libc_fini_array>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4c0a      	ldr	r4, [pc, #40]	; (8005080 <__libc_fini_array+0x2c>)
 8005058:	4d0a      	ldr	r5, [pc, #40]	; (8005084 <__libc_fini_array+0x30>)
 800505a:	1b64      	subs	r4, r4, r5
 800505c:	10a4      	asrs	r4, r4, #2
 800505e:	d00a      	beq.n	8005076 <__libc_fini_array+0x22>
 8005060:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005064:	3b01      	subs	r3, #1
 8005066:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800506a:	3c01      	subs	r4, #1
 800506c:	f855 3904 	ldr.w	r3, [r5], #-4
 8005070:	4798      	blx	r3
 8005072:	2c00      	cmp	r4, #0
 8005074:	d1f9      	bne.n	800506a <__libc_fini_array+0x16>
 8005076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800507a:	f000 b9b3 	b.w	80053e4 <_fini>
 800507e:	bf00      	nop
 8005080:	080054d4 	.word	0x080054d4
 8005084:	080054d0 	.word	0x080054d0

08005088 <_malloc_trim_r>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	460c      	mov	r4, r1
 800508c:	4f23      	ldr	r7, [pc, #140]	; (800511c <_malloc_trim_r+0x94>)
 800508e:	4606      	mov	r6, r0
 8005090:	f7ff ffb2 	bl	8004ff8 <__malloc_lock>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800509a:	685d      	ldr	r5, [r3, #4]
 800509c:	310f      	adds	r1, #15
 800509e:	f025 0503 	bic.w	r5, r5, #3
 80050a2:	4429      	add	r1, r5
 80050a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80050a8:	f021 010f 	bic.w	r1, r1, #15
 80050ac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80050b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80050b4:	db07      	blt.n	80050c6 <_malloc_trim_r+0x3e>
 80050b6:	2100      	movs	r1, #0
 80050b8:	4630      	mov	r0, r6
 80050ba:	f7ff ffa9 	bl	8005010 <_sbrk_r>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	442b      	add	r3, r5
 80050c2:	4298      	cmp	r0, r3
 80050c4:	d004      	beq.n	80050d0 <_malloc_trim_r+0x48>
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff ff9c 	bl	8005004 <__malloc_unlock>
 80050cc:	2000      	movs	r0, #0
 80050ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d0:	4261      	negs	r1, r4
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7ff ff9c 	bl	8005010 <_sbrk_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	d00d      	beq.n	80050f8 <_malloc_trim_r+0x70>
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <_malloc_trim_r+0x98>)
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	1b2d      	subs	r5, r5, r4
 80050e4:	f045 0501 	orr.w	r5, r5, #1
 80050e8:	4630      	mov	r0, r6
 80050ea:	1b09      	subs	r1, r1, r4
 80050ec:	6055      	str	r5, [r2, #4]
 80050ee:	6019      	str	r1, [r3, #0]
 80050f0:	f7ff ff88 	bl	8005004 <__malloc_unlock>
 80050f4:	2001      	movs	r0, #1
 80050f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f8:	2100      	movs	r1, #0
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff ff88 	bl	8005010 <_sbrk_r>
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	1a83      	subs	r3, r0, r2
 8005104:	2b0f      	cmp	r3, #15
 8005106:	ddde      	ble.n	80050c6 <_malloc_trim_r+0x3e>
 8005108:	4906      	ldr	r1, [pc, #24]	; (8005124 <_malloc_trim_r+0x9c>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	680c      	ldr	r4, [r1, #0]
 8005110:	4903      	ldr	r1, [pc, #12]	; (8005120 <_malloc_trim_r+0x98>)
 8005112:	1b00      	subs	r0, r0, r4
 8005114:	6053      	str	r3, [r2, #4]
 8005116:	6008      	str	r0, [r1, #0]
 8005118:	e7d5      	b.n	80050c6 <_malloc_trim_r+0x3e>
 800511a:	bf00      	nop
 800511c:	20000438 	.word	0x20000438
 8005120:	20000c14 	.word	0x20000c14
 8005124:	20000840 	.word	0x20000840

08005128 <_free_r>:
 8005128:	2900      	cmp	r1, #0
 800512a:	d053      	beq.n	80051d4 <_free_r+0xac>
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	460d      	mov	r5, r1
 8005130:	4606      	mov	r6, r0
 8005132:	f7ff ff61 	bl	8004ff8 <__malloc_lock>
 8005136:	f855 cc04 	ldr.w	ip, [r5, #-4]
 800513a:	4f71      	ldr	r7, [pc, #452]	; (8005300 <_free_r+0x1d8>)
 800513c:	f1a5 0108 	sub.w	r1, r5, #8
 8005140:	f02c 0301 	bic.w	r3, ip, #1
 8005144:	18ca      	adds	r2, r1, r3
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	6854      	ldr	r4, [r2, #4]
 800514a:	4290      	cmp	r0, r2
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	d053      	beq.n	80051fa <_free_r+0xd2>
 8005152:	f01c 0f01 	tst.w	ip, #1
 8005156:	6054      	str	r4, [r2, #4]
 8005158:	eb02 0004 	add.w	r0, r2, r4
 800515c:	d13b      	bne.n	80051d6 <_free_r+0xae>
 800515e:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005162:	6840      	ldr	r0, [r0, #4]
 8005164:	eba1 010c 	sub.w	r1, r1, ip
 8005168:	688d      	ldr	r5, [r1, #8]
 800516a:	f107 0e08 	add.w	lr, r7, #8
 800516e:	4575      	cmp	r5, lr
 8005170:	4463      	add	r3, ip
 8005172:	f000 0001 	and.w	r0, r0, #1
 8005176:	d075      	beq.n	8005264 <_free_r+0x13c>
 8005178:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800517c:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005180:	f8cc 5008 	str.w	r5, [ip, #8]
 8005184:	b360      	cbz	r0, 80051e0 <_free_r+0xb8>
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	604a      	str	r2, [r1, #4]
 800518c:	50cb      	str	r3, [r1, r3]
 800518e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005192:	d350      	bcc.n	8005236 <_free_r+0x10e>
 8005194:	0a5a      	lsrs	r2, r3, #9
 8005196:	2a04      	cmp	r2, #4
 8005198:	d870      	bhi.n	800527c <_free_r+0x154>
 800519a:	099a      	lsrs	r2, r3, #6
 800519c:	f102 0539 	add.w	r5, r2, #57	; 0x39
 80051a0:	00ed      	lsls	r5, r5, #3
 80051a2:	f102 0038 	add.w	r0, r2, #56	; 0x38
 80051a6:	197c      	adds	r4, r7, r5
 80051a8:	597a      	ldr	r2, [r7, r5]
 80051aa:	3c08      	subs	r4, #8
 80051ac:	4294      	cmp	r4, r2
 80051ae:	d078      	beq.n	80052a2 <_free_r+0x17a>
 80051b0:	6850      	ldr	r0, [r2, #4]
 80051b2:	f020 0003 	bic.w	r0, r0, #3
 80051b6:	4298      	cmp	r0, r3
 80051b8:	d971      	bls.n	800529e <_free_r+0x176>
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	4294      	cmp	r4, r2
 80051be:	d1f7      	bne.n	80051b0 <_free_r+0x88>
 80051c0:	68e3      	ldr	r3, [r4, #12]
 80051c2:	e9c1 4302 	strd	r4, r3, [r1, #8]
 80051c6:	4630      	mov	r0, r6
 80051c8:	6099      	str	r1, [r3, #8]
 80051ca:	60e1      	str	r1, [r4, #12]
 80051cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051d0:	f7ff bf18 	b.w	8005004 <__malloc_unlock>
 80051d4:	4770      	bx	lr
 80051d6:	6840      	ldr	r0, [r0, #4]
 80051d8:	f000 0001 	and.w	r0, r0, #1
 80051dc:	2800      	cmp	r0, #0
 80051de:	d1d2      	bne.n	8005186 <_free_r+0x5e>
 80051e0:	6890      	ldr	r0, [r2, #8]
 80051e2:	4d48      	ldr	r5, [pc, #288]	; (8005304 <_free_r+0x1dc>)
 80051e4:	4423      	add	r3, r4
 80051e6:	42a8      	cmp	r0, r5
 80051e8:	f043 0401 	orr.w	r4, r3, #1
 80051ec:	d062      	beq.n	80052b4 <_free_r+0x18c>
 80051ee:	68d2      	ldr	r2, [r2, #12]
 80051f0:	60c2      	str	r2, [r0, #12]
 80051f2:	6090      	str	r0, [r2, #8]
 80051f4:	604c      	str	r4, [r1, #4]
 80051f6:	50cb      	str	r3, [r1, r3]
 80051f8:	e7c9      	b.n	800518e <_free_r+0x66>
 80051fa:	f01c 0f01 	tst.w	ip, #1
 80051fe:	4423      	add	r3, r4
 8005200:	d107      	bne.n	8005212 <_free_r+0xea>
 8005202:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8005206:	1b09      	subs	r1, r1, r4
 8005208:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
 800520c:	4423      	add	r3, r4
 800520e:	60c2      	str	r2, [r0, #12]
 8005210:	6090      	str	r0, [r2, #8]
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <_free_r+0x1e0>)
 8005214:	f043 0001 	orr.w	r0, r3, #1
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6048      	str	r0, [r1, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	d804      	bhi.n	800522c <_free_r+0x104>
 8005222:	4b3a      	ldr	r3, [pc, #232]	; (800530c <_free_r+0x1e4>)
 8005224:	4630      	mov	r0, r6
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	f7ff ff2e 	bl	8005088 <_malloc_trim_r>
 800522c:	4630      	mov	r0, r6
 800522e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005232:	f7ff bee7 	b.w	8005004 <__malloc_unlock>
 8005236:	2201      	movs	r2, #1
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	687c      	ldr	r4, [r7, #4]
 800523c:	1098      	asrs	r0, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	4082      	lsls	r2, r0
 8005242:	4322      	orrs	r2, r4
 8005244:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
 8005248:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 800524c:	3808      	subs	r0, #8
 800524e:	e9c1 4002 	strd	r4, r0, [r1, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	4630      	mov	r0, r6
 8005256:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
 800525a:	60e1      	str	r1, [r4, #12]
 800525c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005260:	f7ff bed0 	b.w	8005004 <__malloc_unlock>
 8005264:	2800      	cmp	r0, #0
 8005266:	d145      	bne.n	80052f4 <_free_r+0x1cc>
 8005268:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
 800526c:	4423      	add	r3, r4
 800526e:	f043 0401 	orr.w	r4, r3, #1
 8005272:	60c2      	str	r2, [r0, #12]
 8005274:	6090      	str	r0, [r2, #8]
 8005276:	604c      	str	r4, [r1, #4]
 8005278:	50cb      	str	r3, [r1, r3]
 800527a:	e7d7      	b.n	800522c <_free_r+0x104>
 800527c:	2a14      	cmp	r2, #20
 800527e:	d908      	bls.n	8005292 <_free_r+0x16a>
 8005280:	2a54      	cmp	r2, #84	; 0x54
 8005282:	d81e      	bhi.n	80052c2 <_free_r+0x19a>
 8005284:	0b1a      	lsrs	r2, r3, #12
 8005286:	f102 056f 	add.w	r5, r2, #111	; 0x6f
 800528a:	00ed      	lsls	r5, r5, #3
 800528c:	f102 006e 	add.w	r0, r2, #110	; 0x6e
 8005290:	e789      	b.n	80051a6 <_free_r+0x7e>
 8005292:	f102 055c 	add.w	r5, r2, #92	; 0x5c
 8005296:	00ed      	lsls	r5, r5, #3
 8005298:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 800529c:	e783      	b.n	80051a6 <_free_r+0x7e>
 800529e:	4614      	mov	r4, r2
 80052a0:	e78e      	b.n	80051c0 <_free_r+0x98>
 80052a2:	2301      	movs	r3, #1
 80052a4:	1082      	asrs	r2, r0, #2
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	fa03 f202 	lsl.w	r2, r3, r2
 80052ac:	4302      	orrs	r2, r0
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	4623      	mov	r3, r4
 80052b2:	e786      	b.n	80051c2 <_free_r+0x9a>
 80052b4:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80052b8:	e9c1 0002 	strd	r0, r0, [r1, #8]
 80052bc:	604c      	str	r4, [r1, #4]
 80052be:	50cb      	str	r3, [r1, r3]
 80052c0:	e7b4      	b.n	800522c <_free_r+0x104>
 80052c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80052c6:	d806      	bhi.n	80052d6 <_free_r+0x1ae>
 80052c8:	0bda      	lsrs	r2, r3, #15
 80052ca:	f102 0578 	add.w	r5, r2, #120	; 0x78
 80052ce:	00ed      	lsls	r5, r5, #3
 80052d0:	f102 0077 	add.w	r0, r2, #119	; 0x77
 80052d4:	e767      	b.n	80051a6 <_free_r+0x7e>
 80052d6:	f240 5054 	movw	r0, #1364	; 0x554
 80052da:	4282      	cmp	r2, r0
 80052dc:	d806      	bhi.n	80052ec <_free_r+0x1c4>
 80052de:	0c9a      	lsrs	r2, r3, #18
 80052e0:	f102 057d 	add.w	r5, r2, #125	; 0x7d
 80052e4:	00ed      	lsls	r5, r5, #3
 80052e6:	f102 007c 	add.w	r0, r2, #124	; 0x7c
 80052ea:	e75c      	b.n	80051a6 <_free_r+0x7e>
 80052ec:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 80052f0:	207e      	movs	r0, #126	; 0x7e
 80052f2:	e758      	b.n	80051a6 <_free_r+0x7e>
 80052f4:	f043 0001 	orr.w	r0, r3, #1
 80052f8:	6048      	str	r0, [r1, #4]
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	e796      	b.n	800522c <_free_r+0x104>
 80052fe:	bf00      	nop
 8005300:	20000438 	.word	0x20000438
 8005304:	20000440 	.word	0x20000440
 8005308:	20000844 	.word	0x20000844
 800530c:	20000c44 	.word	0x20000c44

08005310 <__retarget_lock_acquire_recursive>:
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop

08005314 <__retarget_lock_release_recursive>:
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop

08005318 <__register_exitproc>:
 8005318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800531c:	4d2b      	ldr	r5, [pc, #172]	; (80053cc <__register_exitproc+0xb4>)
 800531e:	4606      	mov	r6, r0
 8005320:	6828      	ldr	r0, [r5, #0]
 8005322:	4698      	mov	r8, r3
 8005324:	460f      	mov	r7, r1
 8005326:	4691      	mov	r9, r2
 8005328:	f7ff fff2 	bl	8005310 <__retarget_lock_acquire_recursive>
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <__register_exitproc+0xb8>)
 800532e:	681c      	ldr	r4, [r3, #0]
 8005330:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03d      	beq.n	80053b4 <__register_exitproc+0x9c>
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	2a1f      	cmp	r2, #31
 800533c:	dc0d      	bgt.n	800535a <__register_exitproc+0x42>
 800533e:	f102 0c01 	add.w	ip, r2, #1
 8005342:	bb16      	cbnz	r6, 800538a <__register_exitproc+0x72>
 8005344:	3202      	adds	r2, #2
 8005346:	f8c3 c004 	str.w	ip, [r3, #4]
 800534a:	6828      	ldr	r0, [r5, #0]
 800534c:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005350:	f7ff ffe0 	bl	8005314 <__retarget_lock_release_recursive>
 8005354:	2000      	movs	r0, #0
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <__register_exitproc+0xbc>)
 800535c:	b37b      	cbz	r3, 80053be <__register_exitproc+0xa6>
 800535e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005362:	f7ff fb65 	bl	8004a30 <malloc>
 8005366:	4603      	mov	r3, r0
 8005368:	b348      	cbz	r0, 80053be <__register_exitproc+0xa6>
 800536a:	2000      	movs	r0, #0
 800536c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8005370:	f04f 0c01 	mov.w	ip, #1
 8005374:	e9c3 1000 	strd	r1, r0, [r3]
 8005378:	4602      	mov	r2, r0
 800537a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800537e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8005382:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 8005386:	2e00      	cmp	r6, #0
 8005388:	d0dc      	beq.n	8005344 <__register_exitproc+0x2c>
 800538a:	2101      	movs	r1, #1
 800538c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005390:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8005394:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8005398:	4091      	lsls	r1, r2
 800539a:	4308      	orrs	r0, r1
 800539c:	2e02      	cmp	r6, #2
 800539e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80053a2:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80053a6:	d1cd      	bne.n	8005344 <__register_exitproc+0x2c>
 80053a8:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 80053ac:	4301      	orrs	r1, r0
 80053ae:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 80053b2:	e7c7      	b.n	8005344 <__register_exitproc+0x2c>
 80053b4:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 80053b8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80053bc:	e7bc      	b.n	8005338 <__register_exitproc+0x20>
 80053be:	6828      	ldr	r0, [r5, #0]
 80053c0:	f7ff ffa8 	bl	8005314 <__retarget_lock_release_recursive>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e7c5      	b.n	8005356 <__register_exitproc+0x3e>
 80053ca:	bf00      	nop
 80053cc:	20000848 	.word	0x20000848
 80053d0:	080054c4 	.word	0x080054c4
 80053d4:	08004a31 	.word	0x08004a31

080053d8 <_init>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr

080053e4 <_fini>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr
